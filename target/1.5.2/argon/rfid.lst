
d:/Dev/rfid/target/1.5.2/argon/rfid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001bf4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5c10  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e340  000d5c14  0001e340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000448  2003e3a8  2003e3a8  0002e3a8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5c7c  000d5c7c  00025c7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5ca4  000d5ca4  00025ca4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d3939  00000000  00000000  00025ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001097a  00000000  00000000  000f95e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001e522  00000000  00000000  00109f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023d8  00000000  00000000  0012847d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004458  00000000  00000000  0012a855  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000350ee  00000000  00000000  0012ecad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000290e5  00000000  00000000  00163d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001018fa  00000000  00000000  0018ce80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cabc  00000000  00000000  0028e77c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fbfd 	bl	d582c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fc02 	bl	d5842 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e340 	.word	0x2003e340
   d4048:	000d5c14 	.word	0x000d5c14
   d404c:	2003e3a8 	.word	0x2003e3a8
   d4050:	2003e3a8 	.word	0x2003e3a8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fe49 	bl	d4cf0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5c08 	.word	0x000d5c08
   d4080:	000d5bc8 	.word	0x000d5bc8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81c 	b.w	d40c0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f877 	bl	d417c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bdef 	b.w	d4c74 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bcc9 	b.w	d4a2c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bcc7 	b.w	d4a2c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f000 fcb9 	bl	d4a2c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}
	...

000d40c0 <setup>:

Adafruit_NeoPixel pixels(NUMPIXELS, LED_PIN, WS2812B);


// setup() runs once, when the device is first turned on.
void setup() {
   d40c0:	b510      	push	{r4, lr}
  // Put initialization like pinMode and begin functions here.
  pixels.begin();
   d40c2:	480a      	ldr	r0, [pc, #40]	; (d40ec <setup+0x2c>)
   d40c4:	f000 f8c3 	bl	d424e <_ZN17Adafruit_NeoPixel5beginEv>
  for(int i=0; i<NUMPIXELS; i++){
   d40c8:	2400      	movs	r4, #0
    pixels.setPixelColor(i, pixels.Color(0,0,0));
   d40ca:	2200      	movs	r2, #0
   d40cc:	4611      	mov	r1, r2
   d40ce:	4610      	mov	r0, r2
   d40d0:	f000 fae1 	bl	d4696 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d40d4:	b2a1      	uxth	r1, r4
   d40d6:	4602      	mov	r2, r0
   d40d8:	4804      	ldr	r0, [pc, #16]	; (d40ec <setup+0x2c>)
   d40da:	f000 fa91 	bl	d4600 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  pixels.begin();
  for(int i=0; i<NUMPIXELS; i++){
   d40de:	3401      	adds	r4, #1
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();    
   d40e0:	4802      	ldr	r0, [pc, #8]	; (d40ec <setup+0x2c>)
   d40e2:	f000 f8eb 	bl	d42bc <_ZN17Adafruit_NeoPixel4showEv>

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  pixels.begin();
  for(int i=0; i<NUMPIXELS; i++){
   d40e6:	2c0c      	cmp	r4, #12
   d40e8:	d1ef      	bne.n	d40ca <setup+0xa>
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();    
  }
}
   d40ea:	bd10      	pop	{r4, pc}
   d40ec:	2003e3ac 	.word	0x2003e3ac

000d40f0 <_Z6unlockv>:

void unlock(){
   d40f0:	b570      	push	{r4, r5, r6, lr}
  for(int fade=0; fade<MAXVAL; fade++){
   d40f2:	2400      	movs	r4, #0
   d40f4:	2500      	movs	r5, #0
    for(int i=0; i<NUMPIXELS; i++){
      pixels.setPixelColor(i, pixels.Color(0,fade,0));
   d40f6:	b2e6      	uxtb	r6, r4
   d40f8:	2200      	movs	r2, #0
   d40fa:	4631      	mov	r1, r6
   d40fc:	4610      	mov	r0, r2
   d40fe:	f000 faca 	bl	d4696 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4102:	b2a9      	uxth	r1, r5
   d4104:	4602      	mov	r2, r0
   d4106:	481c      	ldr	r0, [pc, #112]	; (d4178 <_Z6unlockv+0x88>)
   d4108:	f000 fa7a 	bl	d4600 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  }
}

void unlock(){
  for(int fade=0; fade<MAXVAL; fade++){
    for(int i=0; i<NUMPIXELS; i++){
   d410c:	3501      	adds	r5, #1
      pixels.setPixelColor(i, pixels.Color(0,fade,0));
      pixels.show();
   d410e:	481a      	ldr	r0, [pc, #104]	; (d4178 <_Z6unlockv+0x88>)
   d4110:	f000 f8d4 	bl	d42bc <_ZN17Adafruit_NeoPixel4showEv>
  }
}

void unlock(){
  for(int fade=0; fade<MAXVAL; fade++){
    for(int i=0; i<NUMPIXELS; i++){
   d4114:	2d0c      	cmp	r5, #12
   d4116:	d1ef      	bne.n	d40f8 <_Z6unlockv+0x8>
      pixels.setPixelColor(i, pixels.Color(0,fade,0));
      pixels.show();
    }
    delay(FADEVAL);
   d4118:	2005      	movs	r0, #5
    pixels.show();    
  }
}

void unlock(){
  for(int fade=0; fade<MAXVAL; fade++){
   d411a:	3401      	adds	r4, #1
    for(int i=0; i<NUMPIXELS; i++){
      pixels.setPixelColor(i, pixels.Color(0,fade,0));
      pixels.show();
    }
    delay(FADEVAL);
   d411c:	f000 fd6c 	bl	d4bf8 <delay>
    pixels.show();    
  }
}

void unlock(){
  for(int fade=0; fade<MAXVAL; fade++){
   d4120:	2c32      	cmp	r4, #50	; 0x32
   d4122:	d1e7      	bne.n	d40f4 <_Z6unlockv+0x4>
      pixels.show();
    }
    delay(FADEVAL);
  }
  
  delay(DELAYVAL * 7);
   d4124:	f240 60d6 	movw	r0, #1750	; 0x6d6
   d4128:	f000 fd66 	bl	d4bf8 <delay>
  for(int i=0; i<NUMPIXELS; i++){
   d412c:	2500      	movs	r5, #0
   d412e:	2432      	movs	r4, #50	; 0x32
    for(int fade=0; fade<MAXVAL; fade++){
      pixels.setPixelColor(i, pixels.Color(0,MAXVAL-fade,0));
   d4130:	b2ae      	uxth	r6, r5
   d4132:	2200      	movs	r2, #0
   d4134:	b2e1      	uxtb	r1, r4
   d4136:	4610      	mov	r0, r2
   d4138:	f000 faad 	bl	d4696 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d413c:	4631      	mov	r1, r6
   d413e:	4602      	mov	r2, r0
   d4140:	480d      	ldr	r0, [pc, #52]	; (d4178 <_Z6unlockv+0x88>)
   d4142:	f000 fa5d 	bl	d4600 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      pixels.show();
   d4146:	480c      	ldr	r0, [pc, #48]	; (d4178 <_Z6unlockv+0x88>)
   d4148:	f000 f8b8 	bl	d42bc <_ZN17Adafruit_NeoPixel4showEv>
      delay(FADEVAL);
   d414c:	2005      	movs	r0, #5
   d414e:	f000 fd53 	bl	d4bf8 <delay>
    delay(FADEVAL);
  }
  
  delay(DELAYVAL * 7);
  for(int i=0; i<NUMPIXELS; i++){
    for(int fade=0; fade<MAXVAL; fade++){
   d4152:	3c01      	subs	r4, #1
   d4154:	d1ed      	bne.n	d4132 <_Z6unlockv+0x42>
      pixels.setPixelColor(i, pixels.Color(0,MAXVAL-fade,0));
      pixels.show();
      delay(FADEVAL);
    }
    pixels.setPixelColor(i, pixels.Color(0,0,0));
   d4156:	4622      	mov	r2, r4
   d4158:	4621      	mov	r1, r4
   d415a:	4620      	mov	r0, r4
   d415c:	f000 fa9b 	bl	d4696 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4160:	4631      	mov	r1, r6
   d4162:	4602      	mov	r2, r0
   d4164:	4804      	ldr	r0, [pc, #16]	; (d4178 <_Z6unlockv+0x88>)
   d4166:	f000 fa4b 	bl	d4600 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    }
    delay(FADEVAL);
  }
  
  delay(DELAYVAL * 7);
  for(int i=0; i<NUMPIXELS; i++){
   d416a:	3501      	adds	r5, #1
      pixels.setPixelColor(i, pixels.Color(0,MAXVAL-fade,0));
      pixels.show();
      delay(FADEVAL);
    }
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();
   d416c:	4802      	ldr	r0, [pc, #8]	; (d4178 <_Z6unlockv+0x88>)
   d416e:	f000 f8a5 	bl	d42bc <_ZN17Adafruit_NeoPixel4showEv>
    }
    delay(FADEVAL);
  }
  
  delay(DELAYVAL * 7);
  for(int i=0; i<NUMPIXELS; i++){
   d4172:	2d0c      	cmp	r5, #12
   d4174:	d1db      	bne.n	d412e <_Z6unlockv+0x3e>
      delay(FADEVAL);
    }
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();
  }
}
   d4176:	bd70      	pop	{r4, r5, r6, pc}
   d4178:	2003e3ac 	.word	0x2003e3ac

000d417c <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d417c:	b508      	push	{r3, lr}
  // The core of your code will likely live here.
  unlock();
   d417e:	f7ff ffb7 	bl	d40f0 <_Z6unlockv>
  delay(5000);
   d4182:	f241 3088 	movw	r0, #5000	; 0x1388
   d4186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  unlock();
  delay(5000);
   d418a:	f000 bd35 	b.w	d4bf8 <delay>
	...

000d4190 <_GLOBAL__sub_I_SystemMode>:
   d4190:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4192:	4c11      	ldr	r4, [pc, #68]	; (d41d8 <_GLOBAL__sub_I_SystemMode+0x48>)
SYSTEM_MODE(MANUAL);
   d4194:	4d11      	ldr	r5, [pc, #68]	; (d41dc <_GLOBAL__sub_I_SystemMode+0x4c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4196:	f000 fa9d 	bl	d46d4 <HAL_Pin_Map>
   d419a:	2300      	movs	r3, #0
   d419c:	6023      	str	r3, [r4, #0]
   d419e:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d41a0:	71a3      	strb	r3, [r4, #6]
   d41a2:	8123      	strh	r3, [r4, #8]
   d41a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d41a8:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d41aa:	2003      	movs	r0, #3
   d41ac:	f000 fbba 	bl	d4924 <set_system_mode>
   d41b0:	4620      	mov	r0, r4
#define NUMPIXELS 12
#define DELAYVAL 250
#define FADEVAL 5
#define MAXVAL 50

Adafruit_NeoPixel pixels(NUMPIXELS, LED_PIN, WS2812B);
   d41b2:	4c0b      	ldr	r4, [pc, #44]	; (d41e0 <_GLOBAL__sub_I_SystemMode+0x50>)
SYSTEM_MODE(MANUAL);
   d41b4:	490b      	ldr	r1, [pc, #44]	; (d41e4 <_GLOBAL__sub_I_SystemMode+0x54>)
   d41b6:	462a      	mov	r2, r5
   d41b8:	f001 f9c0 	bl	d553c <__aeabi_atexit>
#define NUMPIXELS 12
#define DELAYVAL 250
#define FADEVAL 5
#define MAXVAL 50

Adafruit_NeoPixel pixels(NUMPIXELS, LED_PIN, WS2812B);
   d41bc:	2302      	movs	r3, #2
   d41be:	2206      	movs	r2, #6
   d41c0:	210c      	movs	r1, #12
   d41c2:	4620      	mov	r0, r4
   d41c4:	f000 f868 	bl	d4298 <_ZN17Adafruit_NeoPixelC1Ethh>
   d41c8:	462a      	mov	r2, r5
   d41ca:	4620      	mov	r0, r4
   d41cc:	4906      	ldr	r1, [pc, #24]	; (d41e8 <_GLOBAL__sub_I_SystemMode+0x58>)
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  unlock();
  delay(5000);
   d41ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#define NUMPIXELS 12
#define DELAYVAL 250
#define FADEVAL 5
#define MAXVAL 50

Adafruit_NeoPixel pixels(NUMPIXELS, LED_PIN, WS2812B);
   d41d2:	f001 b9b3 	b.w	d553c <__aeabi_atexit>
   d41d6:	bf00      	nop
   d41d8:	2003e3c0 	.word	0x2003e3c0
   d41dc:	2003e3a8 	.word	0x2003e3a8
   d41e0:	2003e3ac 	.word	0x2003e3ac
   d41e4:	000d40af 	.word	0x000d40af
   d41e8:	000d41f9 	.word	0x000d41f9

000d41ec <_GLOBAL__sub_I__ZN7MFRC522C2Ehh>:
   d41ec:	f000 ba72 	b.w	d46d4 <HAL_Pin_Map>

000d41f0 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d41f0:	f000 bab0 	b.w	d4754 <HAL_Timer_Get_Micro_Seconds>

000d41f4 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d41f4:	f000 baa6 	b.w	d4744 <HAL_Delay_Microseconds>

000d41f8 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d41f8:	b510      	push	{r4, lr}
   d41fa:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d41fc:	68c0      	ldr	r0, [r0, #12]
   d41fe:	b108      	cbz	r0, d4204 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4200:	f000 fc14 	bl	d4a2c <free>
  if (begun) pinMode(pin, INPUT);
   d4204:	7823      	ldrb	r3, [r4, #0]
   d4206:	b11b      	cbz	r3, d4210 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4208:	2100      	movs	r1, #0
   d420a:	79e0      	ldrb	r0, [r4, #7]
   d420c:	f001 f92c 	bl	d5468 <pinMode>
}
   d4210:	4620      	mov	r0, r4
   d4212:	bd10      	pop	{r4, pc}

000d4214 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4214:	b538      	push	{r3, r4, r5, lr}
   d4216:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4218:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d421a:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d421c:	b108      	cbz	r0, d4222 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d421e:	f000 fc05 	bl	d4a2c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4222:	79a3      	ldrb	r3, [r4, #6]
   d4224:	2b06      	cmp	r3, #6
   d4226:	bf0c      	ite	eq
   d4228:	2004      	moveq	r0, #4
   d422a:	2003      	movne	r0, #3
   d422c:	fb10 f005 	smulbb	r0, r0, r5
   d4230:	b280      	uxth	r0, r0
   d4232:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4234:	f000 fbf2 	bl	d4a1c <malloc>
   d4238:	60e0      	str	r0, [r4, #12]
   d423a:	b128      	cbz	r0, d4248 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d423c:	88a2      	ldrh	r2, [r4, #4]
   d423e:	2100      	movs	r1, #0
   d4240:	f001 faff 	bl	d5842 <memset>
    numLEDs = n;
   d4244:	8065      	strh	r5, [r4, #2]
   d4246:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4248:	80a0      	strh	r0, [r4, #4]
   d424a:	8060      	strh	r0, [r4, #2]
   d424c:	bd38      	pop	{r3, r4, r5, pc}

000d424e <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d424e:	b510      	push	{r4, lr}
   d4250:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4252:	2101      	movs	r1, #1
   d4254:	79c0      	ldrb	r0, [r0, #7]
   d4256:	f001 f907 	bl	d5468 <pinMode>
  digitalWrite(pin, LOW);
   d425a:	2100      	movs	r1, #0
   d425c:	79e0      	ldrb	r0, [r4, #7]
   d425e:	f001 f914 	bl	d548a <digitalWrite>
  begun = true;
   d4262:	2301      	movs	r3, #1
   d4264:	7023      	strb	r3, [r4, #0]
   d4266:	bd10      	pop	{r4, pc}

000d4268 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4268:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d426a:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d426c:	4605      	mov	r5, r0
   d426e:	460c      	mov	r4, r1
    if (begun) {
   d4270:	b11b      	cbz	r3, d427a <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4272:	2100      	movs	r1, #0
   d4274:	79c0      	ldrb	r0, [r0, #7]
   d4276:	f001 f8f7 	bl	d5468 <pinMode>
    }
    pin = p;
    if (begun) {
   d427a:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d427c:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d427e:	b153      	cbz	r3, d4296 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d4280:	b2a4      	uxth	r4, r4
   d4282:	4620      	mov	r0, r4
   d4284:	2101      	movs	r1, #1
   d4286:	f001 f8ef 	bl	d5468 <pinMode>
        digitalWrite(p, LOW);
   d428a:	4620      	mov	r0, r4
   d428c:	2100      	movs	r1, #0
    }
}
   d428e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d4292:	f001 b8fa 	b.w	d548a <digitalWrite>
   d4296:	bd38      	pop	{r3, r4, r5, pc}

000d4298 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4298:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d429a:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d429c:	4604      	mov	r4, r0
   d429e:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d42a0:	7183      	strb	r3, [r0, #6]
   d42a2:	7005      	strb	r5, [r0, #0]
   d42a4:	7205      	strb	r5, [r0, #8]
   d42a6:	60c5      	str	r5, [r0, #12]
   d42a8:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d42aa:	f7ff ffb3 	bl	d4214 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d42ae:	4620      	mov	r0, r4
   d42b0:	4631      	mov	r1, r6
   d42b2:	f7ff ffd9 	bl	d4268 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d42b6:	4620      	mov	r0, r4
   d42b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d42bc <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d42bc:	68c3      	ldr	r3, [r0, #12]
   d42be:	2b00      	cmp	r3, #0
   d42c0:	f000 818b 	beq.w	d45da <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d42c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42c8:	7983      	ldrb	r3, [r0, #6]
   d42ca:	3b02      	subs	r3, #2
   d42cc:	b2db      	uxtb	r3, r3
   d42ce:	2b04      	cmp	r3, #4
   d42d0:	bf9c      	itt	ls
   d42d2:	4ac4      	ldrls	r2, [pc, #784]	; (d45e4 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d42d4:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d42d8:	b087      	sub	sp, #28
   d42da:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d42dc:	bf88      	it	hi
   d42de:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d42e0:	f7ff ff86 	bl	d41f0 <micros>
   d42e4:	692b      	ldr	r3, [r5, #16]
   d42e6:	1ac0      	subs	r0, r0, r3
   d42e8:	42a0      	cmp	r0, r4
   d42ea:	d3f9      	bcc.n	d42e0 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d42ec:	4abe      	ldr	r2, [pc, #760]	; (d45e8 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d42ee:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d42f0:	ca07      	ldmia	r2, {r0, r1, r2}
   d42f2:	ac06      	add	r4, sp, #24
   d42f4:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d42f8:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d42fa:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d42fc:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4300:	3304      	adds	r3, #4
   d4302:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4304:	b922      	cbnz	r2, d4310 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4306:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d430a:	2b00      	cmp	r3, #0
   d430c:	f2c0 8155 	blt.w	d45ba <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d4310:	9c04      	ldr	r4, [sp, #16]
   d4312:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4316:	b923      	cbnz	r3, d4322 <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4318:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d431c:	2b00      	cmp	r3, #0
   d431e:	f2c0 813c 	blt.w	d459a <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d4322:	9c05      	ldr	r4, [sp, #20]
   d4324:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4328:	b91b      	cbnz	r3, d4332 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d432a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d432e:	2b00      	cmp	r3, #0
   d4330:	db6e      	blt.n	d4410 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4332:	4bae      	ldr	r3, [pc, #696]	; (d45ec <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d4334:	79ea      	ldrb	r2, [r5, #7]
   d4336:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4338:	4cad      	ldr	r4, [pc, #692]	; (d45f0 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d433a:	49ae      	ldr	r1, [pc, #696]	; (d45f4 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d433c:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d433e:	0112      	lsls	r2, r2, #4
   d4340:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4342:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4346:	785b      	ldrb	r3, [r3, #1]
   d4348:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d434a:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d434c:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d434e:	f003 031f 	and.w	r3, r3, #31
   d4352:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4356:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4358:	433a      	orrs	r2, r7
   d435a:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d435c:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d435e:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4360:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4364:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4368:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d436a:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d436c:	2800      	cmp	r0, #0
   d436e:	d044      	beq.n	d43fa <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d4370:	46cc      	mov	ip, r9
   d4372:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4374:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d4378:	f81c eb01 	ldrb.w	lr, [ip], #1
   d437c:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d437e:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4380:	6863      	ldr	r3, [r4, #4]
   d4382:	1a9b      	subs	r3, r3, r2
   d4384:	2b46      	cmp	r3, #70	; 0x46
   d4386:	d9fb      	bls.n	d4380 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d4388:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d438c:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4390:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4394:	ea43 0307 	orr.w	r3, r3, r7
   d4398:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d439c:	d02f      	beq.n	d43fe <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d439e:	6863      	ldr	r3, [r4, #4]
   d43a0:	1a9b      	subs	r3, r3, r2
   d43a2:	2b28      	cmp	r3, #40	; 0x28
   d43a4:	d9fb      	bls.n	d439e <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d43a6:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d43aa:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d43ac:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d43b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d43b4:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d43b8:	d1e2      	bne.n	d4380 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d43ba:	ebc9 030c 	rsb	r3, r9, ip
   d43be:	88a8      	ldrh	r0, [r5, #4]
   d43c0:	b29b      	uxth	r3, r3
   d43c2:	4298      	cmp	r0, r3
   d43c4:	d8d8      	bhi.n	d4378 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d43c6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d43ca:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d43ce:	6863      	ldr	r3, [r4, #4]
   d43d0:	1a9b      	subs	r3, r3, r2
   d43d2:	2b46      	cmp	r3, #70	; 0x46
   d43d4:	d9fb      	bls.n	d43ce <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d43d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d43da:	ebca 0a03 	rsb	sl, sl, r3
   d43de:	4582      	cmp	sl, r0
   d43e0:	f0c0 80d5 	bcc.w	d458e <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d43e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d43e8:	f7ff ff04 	bl	d41f4 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d43ec:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d43ee:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d43f2:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d43f6:	2800      	cmp	r0, #0
   d43f8:	d1ba      	bne.n	d4370 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d43fa:	4602      	mov	r2, r0
   d43fc:	e7e7      	b.n	d43ce <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d43fe:	6863      	ldr	r3, [r4, #4]
   d4400:	1a9b      	subs	r3, r3, r2
   d4402:	2b11      	cmp	r3, #17
   d4404:	d8cf      	bhi.n	d43a6 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d4406:	6863      	ldr	r3, [r4, #4]
   d4408:	1a9b      	subs	r3, r3, r2
   d440a:	2b11      	cmp	r3, #17
   d440c:	d9f7      	bls.n	d43fe <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d440e:	e7ca      	b.n	d43a6 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4410:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4414:	2b00      	cmp	r3, #0
   d4416:	da8c      	bge.n	d4332 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4418:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d441c:	2b00      	cmp	r3, #0
   d441e:	da88      	bge.n	d4332 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4420:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4424:	2b00      	cmp	r3, #0
   d4426:	da84      	bge.n	d4332 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4428:	9801      	ldr	r0, [sp, #4]
   d442a:	f000 faf7 	bl	d4a1c <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d442e:	2800      	cmp	r0, #0
   d4430:	f43f af7f 	beq.w	d4332 <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4434:	88ab      	ldrh	r3, [r5, #4]
   d4436:	2b00      	cmp	r3, #0
   d4438:	f000 80d0 	beq.w	d45dc <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d443c:	2700      	movs	r7, #0
   d443e:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4440:	4e6d      	ldr	r6, [pc, #436]	; (d45f8 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d4442:	496e      	ldr	r1, [pc, #440]	; (d45fc <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d4444:	e000      	b.n	d4448 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d4446:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d4448:	68ea      	ldr	r2, [r5, #12]
   d444a:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d444c:	f103 0e01 	add.w	lr, r3, #1
   d4450:	f012 0f80 	tst.w	r2, #128	; 0x80
   d4454:	bf14      	ite	ne
   d4456:	46b0      	movne	r8, r6
   d4458:	4688      	moveq	r8, r1
   d445a:	fa1f fe8e 	uxth.w	lr, lr
   d445e:	f012 0f40 	tst.w	r2, #64	; 0x40
   d4462:	bf14      	ite	ne
   d4464:	46b1      	movne	r9, r6
   d4466:	4689      	moveq	r9, r1
   d4468:	f012 0f20 	tst.w	r2, #32
   d446c:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d4470:	bf18      	it	ne
   d4472:	46b2      	movne	sl, r6
   d4474:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d4478:	bf08      	it	eq
   d447a:	468a      	moveq	sl, r1
   d447c:	f103 0802 	add.w	r8, r3, #2
   d4480:	f012 0f10 	tst.w	r2, #16
   d4484:	f103 0e03 	add.w	lr, r3, #3
   d4488:	bf14      	ite	ne
   d448a:	46b4      	movne	ip, r6
   d448c:	468c      	moveq	ip, r1
   d448e:	fa1f f888 	uxth.w	r8, r8
   d4492:	f012 0f08 	tst.w	r2, #8
   d4496:	fa1f fe8e 	uxth.w	lr, lr
   d449a:	f103 0904 	add.w	r9, r3, #4
   d449e:	fa1f f989 	uxth.w	r9, r9
   d44a2:	bf14      	ite	ne
   d44a4:	46b3      	movne	fp, r6
   d44a6:	468b      	moveq	fp, r1
   d44a8:	f012 0f04 	tst.w	r2, #4
   d44ac:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d44b0:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d44b4:	bf14      	ite	ne
   d44b6:	46b2      	movne	sl, r6
   d44b8:	468a      	moveq	sl, r1
   d44ba:	f103 0805 	add.w	r8, r3, #5
   d44be:	f012 0f02 	tst.w	r2, #2
   d44c2:	f103 0c06 	add.w	ip, r3, #6
   d44c6:	f103 0e07 	add.w	lr, r3, #7
   d44ca:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d44ce:	fa1f fe8e 	uxth.w	lr, lr
   d44d2:	bf14      	ite	ne
   d44d4:	46b1      	movne	r9, r6
   d44d6:	4689      	moveq	r9, r1
   d44d8:	fa1f f888 	uxth.w	r8, r8
   d44dc:	f012 0f01 	tst.w	r2, #1
   d44e0:	fa1f fc8c 	uxth.w	ip, ip
   d44e4:	bf14      	ite	ne
   d44e6:	4632      	movne	r2, r6
   d44e8:	460a      	moveq	r2, r1
   d44ea:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d44ee:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d44f2:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d44f6:	3701      	adds	r7, #1
   d44f8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d44fc:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d44fe:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4502:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4504:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4506:	d89e      	bhi.n	d4446 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d4508:	f103 0209 	add.w	r2, r3, #9
   d450c:	330a      	adds	r3, #10
   d450e:	b292      	uxth	r2, r2
   d4510:	b29b      	uxth	r3, r3
   d4512:	0052      	lsls	r2, r2, #1
   d4514:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4516:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4518:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d451c:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d451e:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4520:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4522:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4524:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4526:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d452a:	4e30      	ldr	r6, [pc, #192]	; (d45ec <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d452c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4530:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4534:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d4538:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d453c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4540:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d4544:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4548:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d454c:	79eb      	ldrb	r3, [r5, #7]
   d454e:	6831      	ldr	r1, [r6, #0]
   d4550:	011b      	lsls	r3, r3, #4
   d4552:	18ce      	adds	r6, r1, r3
   d4554:	5cc9      	ldrb	r1, [r1, r3]
   d4556:	7873      	ldrb	r3, [r6, #1]
   d4558:	f003 031f 	and.w	r3, r3, #31
   d455c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d4560:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4562:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d4566:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d456a:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d456e:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d4570:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4574:	2b00      	cmp	r3, #0
   d4576:	d0fb      	beq.n	d4570 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4578:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d457a:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d457e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d4582:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4586:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d458a:	f000 fa4f 	bl	d4a2c <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d458e:	f7ff fe2f 	bl	d41f0 <micros>
   d4592:	6128      	str	r0, [r5, #16]
}
   d4594:	b007      	add	sp, #28
   d4596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d459a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d459e:	2b00      	cmp	r3, #0
   d45a0:	f6bf aebf 	bge.w	d4322 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45a4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45a8:	2b00      	cmp	r3, #0
   d45aa:	f6bf aeba 	bge.w	d4322 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d45ae:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45b2:	2b00      	cmp	r3, #0
   d45b4:	f6bf aeb5 	bge.w	d4322 <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d45b8:	e736      	b.n	d4428 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45ba:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45be:	2b00      	cmp	r3, #0
   d45c0:	f6bf aea6 	bge.w	d4310 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45c4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45c8:	2b00      	cmp	r3, #0
   d45ca:	f6bf aea1 	bge.w	d4310 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d45ce:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d45d2:	2b00      	cmp	r3, #0
   d45d4:	f6bf ae9c 	bge.w	d4310 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d45d8:	e726      	b.n	d4428 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d45da:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d45dc:	2304      	movs	r3, #4
   d45de:	2202      	movs	r2, #2
   d45e0:	e799      	b.n	d4516 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d45e2:	bf00      	nop
   d45e4:	000d58d4 	.word	0x000d58d4
   d45e8:	000d58c8 	.word	0x000d58c8
   d45ec:	2003e3d8 	.word	0x2003e3d8
   d45f0:	e000edf0 	.word	0xe000edf0
   d45f4:	e0001000 	.word	0xe0001000
   d45f8:	ffff800d 	.word	0xffff800d
   d45fc:	ffff8006 	.word	0xffff8006

000d4600 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d4600:	8843      	ldrh	r3, [r0, #2]
   d4602:	428b      	cmp	r3, r1
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d4604:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d4606:	d945      	bls.n	d4694 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d4608:	7a05      	ldrb	r5, [r0, #8]
   d460a:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d460e:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d4612:	b2d6      	uxtb	r6, r2
   d4614:	b145      	cbz	r5, d4628 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
   d4616:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d4618:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d461a:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d461c:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d4620:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d4624:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d4628:	f890 c006 	ldrb.w	ip, [r0, #6]
   d462c:	68c7      	ldr	r7, [r0, #12]
   d462e:	f1bc 0f06 	cmp.w	ip, #6
   d4632:	bf0c      	ite	eq
   d4634:	2504      	moveq	r5, #4
   d4636:	2503      	movne	r5, #3
   d4638:	4369      	muls	r1, r5
   d463a:	f1bc 0f08 	cmp.w	ip, #8
   d463e:	eb07 0501 	add.w	r5, r7, r1
   d4642:	d824      	bhi.n	d468e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
   d4644:	f04f 0e01 	mov.w	lr, #1
   d4648:	fa0e fe0c 	lsl.w	lr, lr, ip
   d464c:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
   d4650:	d10c      	bne.n	d466c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
   d4652:	f01e 0f40 	tst.w	lr, #64	; 0x40
   d4656:	d10d      	bne.n	d4674 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
   d4658:	f01e 0f10 	tst.w	lr, #16
   d465c:	d017      	beq.n	d468e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d465e:	2bff      	cmp	r3, #255	; 0xff
   d4660:	bf08      	it	eq
   d4662:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
   d4664:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d4666:	706e      	strb	r6, [r5, #1]
          *p = g;
   d4668:	70ac      	strb	r4, [r5, #2]
        } break;
   d466a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d466c:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d466e:	706b      	strb	r3, [r5, #1]
          *p = b;
   d4670:	70ae      	strb	r6, [r5, #2]
        } break;
   d4672:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
   d4674:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4676:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d4678:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d467a:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d467c:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d467e:	b90b      	cbnz	r3, d4684 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d4680:	b2d2      	uxtb	r2, r2
   d4682:	e002      	b.n	d468a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4684:	435a      	muls	r2, r3
   d4686:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d468a:	70ea      	strb	r2, [r5, #3]
        } break;
   d468c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d468e:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4690:	706c      	strb	r4, [r5, #1]
          *p = b;
   d4692:	70ae      	strb	r6, [r5, #2]
   d4694:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4696 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   d4696:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
   d469a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
   d469e:	4770      	bx	lr

000d46a0 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d46a0:	b508      	push	{r3, lr}
   d46a2:	f000 f817 	bl	d46d4 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d46a6:	f000 f815 	bl	d46d4 <HAL_Pin_Map>
   d46aa:	4b01      	ldr	r3, [pc, #4]	; (d46b0 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d46ac:	6018      	str	r0, [r3, #0]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	2003e3d8 	.word	0x2003e3d8

000d46b4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <netdb_freeaddrinfo+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	689b      	ldr	r3, [r3, #8]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030268 	.word	0x00030268

000d46c4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <netdb_getaddrinfo+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	68db      	ldr	r3, [r3, #12]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030268 	.word	0x00030268

000d46d4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_Pin_Map+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	681b      	ldr	r3, [r3, #0]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003022c 	.word	0x0003022c

000d46e4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_Pin_Mode+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	689b      	ldr	r3, [r3, #8]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003022c 	.word	0x0003022c

000d46f4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_Get_Pin_Mode+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	68db      	ldr	r3, [r3, #12]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003022c 	.word	0x0003022c

000d4704 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_GPIO_Write+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	691b      	ldr	r3, [r3, #16]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003022c 	.word	0x0003022c

000d4714 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <HAL_SPI_Init+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	69db      	ldr	r3, [r3, #28]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030230 	.word	0x00030230

000d4724 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <HAL_SPI_Is_Enabled+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6a1b      	ldr	r3, [r3, #32]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030230 	.word	0x00030230

000d4734 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <HAL_RNG_GetRandomNumber+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	685b      	ldr	r3, [r3, #4]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030218 	.word	0x00030218

000d4744 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <HAL_Delay_Microseconds+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	68db      	ldr	r3, [r3, #12]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030218 	.word	0x00030218

000d4754 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	691b      	ldr	r3, [r3, #16]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030218 	.word	0x00030218

000d4764 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	695b      	ldr	r3, [r3, #20]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030218 	.word	0x00030218

000d4774 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <os_thread_is_current+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	689b      	ldr	r3, [r3, #8]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030248 	.word	0x00030248

000d4784 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <os_thread_join+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	691b      	ldr	r3, [r3, #16]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030248 	.word	0x00030248

000d4794 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <os_thread_cleanup+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	695b      	ldr	r3, [r3, #20]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030248 	.word	0x00030248

000d47a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <os_mutex_recursive_create+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	00030248 	.word	0x00030248

000d47b4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <os_mutex_recursive_destroy+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	00030248 	.word	0x00030248

000d47c4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <inet_inet_ntop+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	695b      	ldr	r3, [r3, #20]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	00030264 	.word	0x00030264

000d47d4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <HAL_USART_Init+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	681b      	ldr	r3, [r3, #0]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	0003023c 	.word	0x0003023c

000d47e4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <HAL_USART_Write_Data+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	68db      	ldr	r3, [r3, #12]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003023c 	.word	0x0003023c

000d47f4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <HAL_USART_Available_Data+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	691b      	ldr	r3, [r3, #16]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	0003023c 	.word	0x0003023c

000d4804 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <HAL_USART_Read_Data+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	695b      	ldr	r3, [r3, #20]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	0003023c 	.word	0x0003023c

000d4814 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <HAL_USART_Peek_Data+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	699b      	ldr	r3, [r3, #24]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003023c 	.word	0x0003023c

000d4824 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <HAL_USART_Flush_Data+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	69db      	ldr	r3, [r3, #28]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	0003023c 	.word	0x0003023c

000d4834 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <HAL_USART_Is_Enabled+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	6a1b      	ldr	r3, [r3, #32]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	0003023c 	.word	0x0003023c

000d4844 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <HAL_USART_Available_Data_For_Write+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	0003023c 	.word	0x0003023c

000d4854 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <HAL_I2C_Write_Data+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	6a1b      	ldr	r3, [r3, #32]
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	00030228 	.word	0x00030228

000d4864 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <HAL_I2C_Available_Data+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030228 	.word	0x00030228

000d4874 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <HAL_I2C_Read_Data+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030228 	.word	0x00030228

000d4884 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <HAL_I2C_Peek_Data+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030228 	.word	0x00030228

000d4894 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <HAL_I2C_Flush_Data+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030228 	.word	0x00030228

000d48a4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <HAL_I2C_Is_Enabled+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	00030228 	.word	0x00030228

000d48b4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <HAL_I2C_Init+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	00030228 	.word	0x00030228

000d48c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <HAL_USB_USART_Init+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	681b      	ldr	r3, [r3, #0]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	0003024c 	.word	0x0003024c

000d48d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <HAL_USB_USART_Available_Data+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	691b      	ldr	r3, [r3, #16]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	0003024c 	.word	0x0003024c

000d48e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	695b      	ldr	r3, [r3, #20]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	0003024c 	.word	0x0003024c

000d48f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <HAL_USB_USART_Receive_Data+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	699b      	ldr	r3, [r3, #24]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	0003024c 	.word	0x0003024c

000d4904 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <HAL_USB_USART_Send_Data+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	69db      	ldr	r3, [r3, #28]
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	0003024c 	.word	0x0003024c

000d4914 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <HAL_USB_USART_Flush_Data+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	6a1b      	ldr	r3, [r3, #32]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	0003024c 	.word	0x0003024c

000d4924 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <set_system_mode+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	685b      	ldr	r3, [r3, #4]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030220 	.word	0x00030220

000d4934 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <system_delay_ms+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	695b      	ldr	r3, [r3, #20]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030220 	.word	0x00030220

000d4944 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b03      	ldr	r3, [pc, #12]	; (d4954 <system_ctrl_set_app_request_handler+0x10>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d494e:	9301      	str	r3, [sp, #4]
   d4950:	bd08      	pop	{r3, pc}
   d4952:	0000      	.short	0x0000
   d4954:	00030220 	.word	0x00030220

000d4958 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b03      	ldr	r3, [pc, #12]	; (d4968 <system_ctrl_set_result+0x10>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4962:	9301      	str	r3, [sp, #4]
   d4964:	bd08      	pop	{r3, pc}
   d4966:	0000      	.short	0x0000
   d4968:	00030220 	.word	0x00030220

000d496c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <network_connect+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	685b      	ldr	r3, [r3, #4]
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030240 	.word	0x00030240

000d497c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <network_connecting+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	689b      	ldr	r3, [r3, #8]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030240 	.word	0x00030240

000d498c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <network_disconnect+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	68db      	ldr	r3, [r3, #12]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030240 	.word	0x00030240

000d499c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <network_ready+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	691b      	ldr	r3, [r3, #16]
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030240 	.word	0x00030240

000d49ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <network_on+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	695b      	ldr	r3, [r3, #20]
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	00030240 	.word	0x00030240

000d49bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <network_off+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	699b      	ldr	r3, [r3, #24]
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	00030240 	.word	0x00030240

000d49cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <network_listen+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	69db      	ldr	r3, [r3, #28]
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	00030240 	.word	0x00030240

000d49dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <network_listening+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	6a1b      	ldr	r3, [r3, #32]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	00030240 	.word	0x00030240

000d49ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <network_set_listen_timeout+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	00030240 	.word	0x00030240

000d49fc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <network_get_listen_timeout+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	00030240 	.word	0x00030240

000d4a0c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	00030244 	.word	0x00030244

000d4a1c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <malloc+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	681b      	ldr	r3, [r3, #0]
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	0003021c 	.word	0x0003021c

000d4a2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <free+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	685b      	ldr	r3, [r3, #4]
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	0003021c 	.word	0x0003021c

000d4a3c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a3c:	2200      	movs	r2, #0
   d4a3e:	4611      	mov	r1, r2
   d4a40:	6840      	ldr	r0, [r0, #4]
   d4a42:	f7ff bfcb 	b.w	d49dc <network_listening>

000d4a46 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4a46:	2200      	movs	r2, #0
   d4a48:	4611      	mov	r1, r2
   d4a4a:	6840      	ldr	r0, [r0, #4]
   d4a4c:	f7ff bfd6 	b.w	d49fc <network_get_listen_timeout>

000d4a50 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4a50:	2200      	movs	r2, #0
   d4a52:	6840      	ldr	r0, [r0, #4]
   d4a54:	f7ff bfca 	b.w	d49ec <network_set_listen_timeout>

000d4a58 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a58:	2200      	movs	r2, #0
   d4a5a:	f081 0101 	eor.w	r1, r1, #1
   d4a5e:	6840      	ldr	r0, [r0, #4]
   d4a60:	f7ff bfb4 	b.w	d49cc <network_listen>

000d4a64 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4a64:	2300      	movs	r3, #0
   d4a66:	461a      	mov	r2, r3
   d4a68:	4619      	mov	r1, r3
   d4a6a:	6840      	ldr	r0, [r0, #4]
   d4a6c:	f7ff bfa6 	b.w	d49bc <network_off>

000d4a70 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4a70:	2300      	movs	r3, #0
   d4a72:	461a      	mov	r2, r3
   d4a74:	4619      	mov	r1, r3
   d4a76:	6840      	ldr	r0, [r0, #4]
   d4a78:	f7ff bf98 	b.w	d49ac <network_on>

000d4a7c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a7c:	2200      	movs	r2, #0
   d4a7e:	4611      	mov	r1, r2
   d4a80:	6840      	ldr	r0, [r0, #4]
   d4a82:	f7ff bf8b 	b.w	d499c <network_ready>

000d4a86 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4a86:	2200      	movs	r2, #0
   d4a88:	4611      	mov	r1, r2
   d4a8a:	6840      	ldr	r0, [r0, #4]
   d4a8c:	f7ff bf76 	b.w	d497c <network_connecting>

000d4a90 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a90:	2200      	movs	r2, #0
   d4a92:	2102      	movs	r1, #2
   d4a94:	6840      	ldr	r0, [r0, #4]
   d4a96:	f7ff bf79 	b.w	d498c <network_disconnect>

000d4a9a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4a9a:	2300      	movs	r3, #0
   d4a9c:	461a      	mov	r2, r3
   d4a9e:	6840      	ldr	r0, [r0, #4]
   d4aa0:	f7ff bf64 	b.w	d496c <network_connect>

000d4aa4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4aa4:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4aa6:	2203      	movs	r2, #3
   d4aa8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4aaa:	4a02      	ldr	r2, [pc, #8]	; (d4ab4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4aac:	601a      	str	r2, [r3, #0]
   d4aae:	4770      	bx	lr
   d4ab0:	2003e3dc 	.word	0x2003e3dc
   d4ab4:	000d58f0 	.word	0x000d58f0

000d4ab8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4ab8:	b510      	push	{r4, lr}
   d4aba:	4604      	mov	r4, r0
{
    _spi = spi;
   d4abc:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d4abe:	4608      	mov	r0, r1
   d4ac0:	f7ff fe28 	bl	d4714 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4ac4:	2300      	movs	r3, #0
   d4ac6:	6063      	str	r3, [r4, #4]
}
   d4ac8:	4620      	mov	r0, r4
   d4aca:	bd10      	pop	{r4, pc}

000d4acc <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4acc:	7800      	ldrb	r0, [r0, #0]
   d4ace:	f7ff be29 	b.w	d4724 <HAL_SPI_Is_Enabled>
	...

000d4ad4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4ad4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ad6:	4c09      	ldr	r4, [pc, #36]	; (d4afc <_GLOBAL__sub_I_System+0x28>)
   d4ad8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4ada:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ade:	6020      	str	r0, [r4, #0]
   d4ae0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4ae2:	71a0      	strb	r0, [r4, #6]
   d4ae4:	8120      	strh	r0, [r4, #8]
   d4ae6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4ae8:	f7ff ff1c 	bl	d4924 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4aec:	4620      	mov	r0, r4
   d4aee:	4a04      	ldr	r2, [pc, #16]	; (d4b00 <_GLOBAL__sub_I_System+0x2c>)
   d4af0:	4904      	ldr	r1, [pc, #16]	; (d4b04 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4af6:	f000 bd21 	b.w	d553c <__aeabi_atexit>
   d4afa:	bf00      	nop
   d4afc:	2003e3e4 	.word	0x2003e3e4
   d4b00:	2003e3a8 	.word	0x2003e3a8
   d4b04:	000d40af 	.word	0x000d40af

000d4b08 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4b08:	b510      	push	{r4, lr}
   d4b0a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4b0c:	6800      	ldr	r0, [r0, #0]
   d4b0e:	b108      	cbz	r0, d4b14 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4b10:	f7ff fe50 	bl	d47b4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4b14:	4620      	mov	r0, r4
   d4b16:	bd10      	pop	{r4, pc}

000d4b18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4b18:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b1a:	4c06      	ldr	r4, [pc, #24]	; (d4b34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4b1c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4b1e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b20:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4b22:	f7ff fe3f 	bl	d47a4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4b26:	4620      	mov	r0, r4
   d4b28:	4a03      	ldr	r2, [pc, #12]	; (d4b38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4b2a:	4904      	ldr	r1, [pc, #16]	; (d4b3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4b30:	f000 bd04 	b.w	d553c <__aeabi_atexit>
   d4b34:	2003e3f0 	.word	0x2003e3f0
   d4b38:	2003e3a8 	.word	0x2003e3a8
   d4b3c:	000d4b09 	.word	0x000d4b09

000d4b40 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b42:	4606      	mov	r6, r0
   d4b44:	460d      	mov	r5, r1
   d4b46:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4b48:	2400      	movs	r4, #0
  while (size--) {
   d4b4a:	42bd      	cmp	r5, r7
   d4b4c:	d00c      	beq.n	d4b68 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4b4e:	6833      	ldr	r3, [r6, #0]
   d4b50:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b54:	689b      	ldr	r3, [r3, #8]
   d4b56:	4630      	mov	r0, r6
   d4b58:	4798      	blx	r3
     if (chunk>=0)
   d4b5a:	2800      	cmp	r0, #0
   d4b5c:	db01      	blt.n	d4b62 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4b5e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4b60:	e7f3      	b.n	d4b4a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4b62:	2c00      	cmp	r4, #0
   d4b64:	bf08      	it	eq
   d4b66:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4b68:	4620      	mov	r0, r4
   d4b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b6c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4b6c:	b570      	push	{r4, r5, r6, lr}
   d4b6e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4b70:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4b72:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4b74:	b149      	cbz	r1, d4b8a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4b76:	f000 fe95 	bl	d58a4 <strlen>
   d4b7a:	682b      	ldr	r3, [r5, #0]
   d4b7c:	4602      	mov	r2, r0
   d4b7e:	4621      	mov	r1, r4
   d4b80:	4628      	mov	r0, r5
   d4b82:	68db      	ldr	r3, [r3, #12]
    }
   d4b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4b88:	4718      	bx	r3
    }
   d4b8a:	bd70      	pop	{r4, r5, r6, pc}

000d4b8c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4b8c:	6803      	ldr	r3, [r0, #0]
   d4b8e:	689b      	ldr	r3, [r3, #8]
   d4b90:	4718      	bx	r3

000d4b92 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4b92:	b530      	push	{r4, r5, lr}
   d4b94:	b08b      	sub	sp, #44	; 0x2c
   d4b96:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4b98:	2100      	movs	r1, #0
   d4b9a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4b9e:	2a01      	cmp	r2, #1
   d4ba0:	bf98      	it	ls
   d4ba2:	220a      	movls	r2, #10
   d4ba4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4ba8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4bac:	fb05 3312 	mls	r3, r5, r2, r3
   d4bb0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4bb4:	2b09      	cmp	r3, #9
   d4bb6:	bf94      	ite	ls
   d4bb8:	3330      	addls	r3, #48	; 0x30
   d4bba:	3337      	addhi	r3, #55	; 0x37
   d4bbc:	b2db      	uxtb	r3, r3
   d4bbe:	4621      	mov	r1, r4
   d4bc0:	f804 3901 	strb.w	r3, [r4], #-1
   d4bc4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4bc6:	2d00      	cmp	r5, #0
   d4bc8:	d1ee      	bne.n	d4ba8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4bca:	f7ff ffcf 	bl	d4b6c <_ZN5Print5writeEPKc>
}
   d4bce:	b00b      	add	sp, #44	; 0x2c
   d4bd0:	bd30      	pop	{r4, r5, pc}
	...

000d4bd4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4bd4:	4b01      	ldr	r3, [pc, #4]	; (d4bdc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4bd6:	4a02      	ldr	r2, [pc, #8]	; (d4be0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4bd8:	601a      	str	r2, [r3, #0]
   d4bda:	4770      	bx	lr
   d4bdc:	2003e3f4 	.word	0x2003e3f4
   d4be0:	000d598f 	.word	0x000d598f

000d4be4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4be4:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4be6:	681a      	ldr	r2, [r3, #0]
   d4be8:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4bea:	601a      	str	r2, [r3, #0]
   d4bec:	4770      	bx	lr
   d4bee:	bf00      	nop
   d4bf0:	2003e340 	.word	0x2003e340
   d4bf4:	2003e3f8 	.word	0x2003e3f8

000d4bf8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4bf8:	2100      	movs	r1, #0
   d4bfa:	f7ff be9b 	b.w	d4934 <system_delay_ms>

000d4bfe <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4bfe:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4c00:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c02:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4c04:	b113      	cbz	r3, d4c0c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c06:	2203      	movs	r2, #3
   d4c08:	4601      	mov	r1, r0
   d4c0a:	4798      	blx	r3
    }
   d4c0c:	4620      	mov	r0, r4
   d4c0e:	bd10      	pop	{r4, pc}

000d4c10 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4c10:	b510      	push	{r4, lr}
   d4c12:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c14:	f7ff fff3 	bl	d4bfe <_ZNSt14_Function_baseD1Ev>
   d4c18:	4620      	mov	r0, r4
   d4c1a:	bd10      	pop	{r4, pc}

000d4c1c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c1c:	4803      	ldr	r0, [pc, #12]	; (d4c2c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4c1e:	4a04      	ldr	r2, [pc, #16]	; (d4c30 <_GLOBAL__sub_I_RGB+0x14>)
   d4c20:	4904      	ldr	r1, [pc, #16]	; (d4c34 <_GLOBAL__sub_I_RGB+0x18>)
   d4c22:	2300      	movs	r3, #0
   d4c24:	6083      	str	r3, [r0, #8]
   d4c26:	f000 bc89 	b.w	d553c <__aeabi_atexit>
   d4c2a:	bf00      	nop
   d4c2c:	2003e3fc 	.word	0x2003e3fc
   d4c30:	2003e3a8 	.word	0x2003e3a8
   d4c34:	000d4c11 	.word	0x000d4c11

000d4c38 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4c38:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4c3a:	4b0c      	ldr	r3, [pc, #48]	; (d4c6c <serialEventRun+0x34>)
   d4c3c:	b133      	cbz	r3, d4c4c <serialEventRun+0x14>
   d4c3e:	f000 f953 	bl	d4ee8 <_Z16_fetch_usbserialv>
   d4c42:	6803      	ldr	r3, [r0, #0]
   d4c44:	691b      	ldr	r3, [r3, #16]
   d4c46:	4798      	blx	r3
   d4c48:	2800      	cmp	r0, #0
   d4c4a:	dc09      	bgt.n	d4c60 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4c4c:	4b08      	ldr	r3, [pc, #32]	; (d4c70 <serialEventRun+0x38>)
   d4c4e:	b163      	cbz	r3, d4c6a <serialEventRun+0x32>
   d4c50:	f000 f9cc 	bl	d4fec <_Z22__fetch_global_Serial1v>
   d4c54:	6803      	ldr	r3, [r0, #0]
   d4c56:	691b      	ldr	r3, [r3, #16]
   d4c58:	4798      	blx	r3
   d4c5a:	2800      	cmp	r0, #0
   d4c5c:	dc03      	bgt.n	d4c66 <serialEventRun+0x2e>
   d4c5e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4c60:	f3af 8000 	nop.w
   d4c64:	e7f2      	b.n	d4c4c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4c66:	f3af 8000 	nop.w
   d4c6a:	bd08      	pop	{r3, pc}
	...

000d4c74 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4c74:	b508      	push	{r3, lr}
	serialEventRun();
   d4c76:	f7ff ffdf 	bl	d4c38 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4c7a:	f7ff fd73 	bl	d4764 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4c7e:	4b01      	ldr	r3, [pc, #4]	; (d4c84 <_post_loop+0x10>)
   d4c80:	6018      	str	r0, [r3, #0]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	2003e730 	.word	0x2003e730

000d4c88 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4c88:	4802      	ldr	r0, [pc, #8]	; (d4c94 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4c8a:	4a03      	ldr	r2, [pc, #12]	; (d4c98 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4c8c:	4903      	ldr	r1, [pc, #12]	; (d4c9c <_Z33system_initialize_user_backup_ramv+0x14>)
   d4c8e:	1a12      	subs	r2, r2, r0
   d4c90:	f000 bdcc 	b.w	d582c <memcpy>
   d4c94:	2003f400 	.word	0x2003f400
   d4c98:	2003f404 	.word	0x2003f404
   d4c9c:	000d5c10 	.word	0x000d5c10

000d4ca0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4ca0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ca2:	2300      	movs	r3, #0
   d4ca4:	9300      	str	r3, [sp, #0]
   d4ca6:	461a      	mov	r2, r3
   d4ca8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4cac:	f7ff fe54 	bl	d4958 <system_ctrl_set_result>
}
   d4cb0:	b003      	add	sp, #12
   d4cb2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4cb8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4cb8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4cba:	8843      	ldrh	r3, [r0, #2]
   d4cbc:	2b0a      	cmp	r3, #10
   d4cbe:	d008      	beq.n	d4cd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4cc0:	2b50      	cmp	r3, #80	; 0x50
   d4cc2:	d109      	bne.n	d4cd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4cc4:	4b09      	ldr	r3, [pc, #36]	; (d4cec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4cc6:	681b      	ldr	r3, [r3, #0]
   d4cc8:	b13b      	cbz	r3, d4cda <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4cca:	b003      	add	sp, #12
   d4ccc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4cd0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4cd2:	f7ff ffe5 	bl	d4ca0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4cd6:	e006      	b.n	d4ce6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4cd8:	2300      	movs	r3, #0
   d4cda:	9300      	str	r3, [sp, #0]
   d4cdc:	461a      	mov	r2, r3
   d4cde:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ce2:	f7ff fe39 	bl	d4958 <system_ctrl_set_result>
        break;
    }
}
   d4ce6:	b003      	add	sp, #12
   d4ce8:	f85d fb04 	ldr.w	pc, [sp], #4
   d4cec:	2003e40c 	.word	0x2003e40c

000d4cf0 <module_user_init_hook>:

void module_user_init_hook()
{
   d4cf0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4cf2:	4c10      	ldr	r4, [pc, #64]	; (d4d34 <module_user_init_hook+0x44>)
   d4cf4:	4d10      	ldr	r5, [pc, #64]	; (d4d38 <module_user_init_hook+0x48>)
   d4cf6:	6823      	ldr	r3, [r4, #0]
   d4cf8:	42ab      	cmp	r3, r5
   d4cfa:	4b10      	ldr	r3, [pc, #64]	; (d4d3c <module_user_init_hook+0x4c>)
   d4cfc:	bf0c      	ite	eq
   d4cfe:	2201      	moveq	r2, #1
   d4d00:	2200      	movne	r2, #0
   d4d02:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4d04:	d002      	beq.n	d4d0c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4d06:	f7ff ffbf 	bl	d4c88 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4d0a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4d0c:	f7ff fd12 	bl	d4734 <HAL_RNG_GetRandomNumber>
   d4d10:	4604      	mov	r4, r0
    srand(seed);
   d4d12:	f000 fd9f 	bl	d5854 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4d16:	4b0a      	ldr	r3, [pc, #40]	; (d4d40 <module_user_init_hook+0x50>)
   d4d18:	b113      	cbz	r3, d4d20 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4d1a:	4620      	mov	r0, r4
   d4d1c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4d20:	2100      	movs	r1, #0
   d4d22:	4807      	ldr	r0, [pc, #28]	; (d4d40 <module_user_init_hook+0x50>)
   d4d24:	f7ff fe72 	bl	d4a0c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4d28:	2100      	movs	r1, #0
   d4d2a:	4806      	ldr	r0, [pc, #24]	; (d4d44 <module_user_init_hook+0x54>)
}
   d4d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4d30:	f7ff be08 	b.w	d4944 <system_ctrl_set_app_request_handler>
   d4d34:	2003f400 	.word	0x2003f400
   d4d38:	9a271c1e 	.word	0x9a271c1e
   d4d3c:	2003e410 	.word	0x2003e410
   d4d40:	00000000 	.word	0x00000000
   d4d44:	000d4cb9 	.word	0x000d4cb9

000d4d48 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4d48:	4770      	bx	lr

000d4d4a <_ZN9IPAddressD0Ev>:
   d4d4a:	b510      	push	{r4, lr}
   d4d4c:	2118      	movs	r1, #24
   d4d4e:	4604      	mov	r4, r0
   d4d50:	f000 fc02 	bl	d5558 <_ZdlPvj>
   d4d54:	4620      	mov	r0, r4
   d4d56:	bd10      	pop	{r4, pc}

000d4d58 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d58:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d5a:	7d03      	ldrb	r3, [r0, #20]
   d4d5c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d5e:	b08d      	sub	sp, #52	; 0x34
   d4d60:	460e      	mov	r6, r1
   d4d62:	f100 0704 	add.w	r7, r0, #4
   d4d66:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d6a:	d002      	beq.n	d4d72 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4d6c:	f100 0508 	add.w	r5, r0, #8
   d4d70:	e018      	b.n	d4da4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4d72:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4d74:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4d76:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4d7a:	232f      	movs	r3, #47	; 0x2f
   d4d7c:	462a      	mov	r2, r5
   d4d7e:	200a      	movs	r0, #10
   d4d80:	f7ff fd20 	bl	d47c4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4d84:	4628      	mov	r0, r5
   d4d86:	f000 fd8d 	bl	d58a4 <strlen>
   d4d8a:	6833      	ldr	r3, [r6, #0]
   d4d8c:	4602      	mov	r2, r0
   d4d8e:	68db      	ldr	r3, [r3, #12]
   d4d90:	4629      	mov	r1, r5
   d4d92:	4630      	mov	r0, r6
   d4d94:	4798      	blx	r3
   d4d96:	e00f      	b.n	d4db8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4d98:	b124      	cbz	r4, d4da4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4d9a:	212e      	movs	r1, #46	; 0x2e
   d4d9c:	4630      	mov	r0, r6
   d4d9e:	f7ff fef5 	bl	d4b8c <_ZN5Print5printEc>
   d4da2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4da4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4da8:	220a      	movs	r2, #10
   d4daa:	4630      	mov	r0, r6
   d4dac:	f7ff fef1 	bl	d4b92 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4db0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4db2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4db4:	d1f0      	bne.n	d4d98 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4db6:	4620      	mov	r0, r4
    }
    return n;
}
   d4db8:	b00d      	add	sp, #52	; 0x34
   d4dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4dbc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4dbc:	b510      	push	{r4, lr}
   d4dbe:	4b05      	ldr	r3, [pc, #20]	; (d4dd4 <_ZN9IPAddressC1Ev+0x18>)
   d4dc0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4dc2:	2211      	movs	r2, #17
   d4dc4:	f840 3b04 	str.w	r3, [r0], #4
   d4dc8:	2100      	movs	r1, #0
   d4dca:	f000 fd3a 	bl	d5842 <memset>
{
    clear();
}
   d4dce:	4620      	mov	r0, r4
   d4dd0:	bd10      	pop	{r4, pc}
   d4dd2:	bf00      	nop
   d4dd4:	000d5a30 	.word	0x000d5a30

000d4dd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4dd8:	4603      	mov	r3, r0
   d4dda:	4a07      	ldr	r2, [pc, #28]	; (d4df8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ddc:	b510      	push	{r4, lr}
   d4dde:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4de2:	f101 0210 	add.w	r2, r1, #16
   d4de6:	f851 4b04 	ldr.w	r4, [r1], #4
   d4dea:	f843 4b04 	str.w	r4, [r3], #4
   d4dee:	4291      	cmp	r1, r2
   d4df0:	d1f9      	bne.n	d4de6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4df2:	780a      	ldrb	r2, [r1, #0]
   d4df4:	701a      	strb	r2, [r3, #0]
}
   d4df6:	bd10      	pop	{r4, pc}
   d4df8:	000d5a30 	.word	0x000d5a30

000d4dfc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4dfc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4dfe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4e02:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4e06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4e0a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4e0e:	2304      	movs	r3, #4
   d4e10:	6041      	str	r1, [r0, #4]
   d4e12:	7503      	strb	r3, [r0, #20]
   d4e14:	bd10      	pop	{r4, pc}

000d4e16 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4e16:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4e18:	780d      	ldrb	r5, [r1, #0]
   d4e1a:	788b      	ldrb	r3, [r1, #2]
   d4e1c:	784a      	ldrb	r2, [r1, #1]
   d4e1e:	78c9      	ldrb	r1, [r1, #3]
   d4e20:	9100      	str	r1, [sp, #0]
   d4e22:	4629      	mov	r1, r5
   d4e24:	f7ff ffea 	bl	d4dfc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4e28:	b003      	add	sp, #12
   d4e2a:	bd30      	pop	{r4, r5, pc}

000d4e2c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4e2c:	7441      	strb	r1, [r0, #17]
   d4e2e:	4770      	bx	lr

000d4e30 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4e30:	4770      	bx	lr

000d4e32 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4e32:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4e34:	2100      	movs	r1, #0
   d4e36:	7c00      	ldrb	r0, [r0, #16]
   d4e38:	f7ff fd5c 	bl	d48f4 <HAL_USB_USART_Receive_Data>
}
   d4e3c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e40:	bf28      	it	cs
   d4e42:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e46:	bd08      	pop	{r3, pc}

000d4e48 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4e48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4e4a:	2101      	movs	r1, #1
   d4e4c:	7c00      	ldrb	r0, [r0, #16]
   d4e4e:	f7ff fd51 	bl	d48f4 <HAL_USB_USART_Receive_Data>
}
   d4e52:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e56:	bf28      	it	cs
   d4e58:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e5c:	bd08      	pop	{r3, pc}

000d4e5e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4e5e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4e60:	7c00      	ldrb	r0, [r0, #16]
   d4e62:	f7ff fd3f 	bl	d48e4 <HAL_USB_USART_Available_Data_For_Write>
}
   d4e66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e6a:	bd08      	pop	{r3, pc}

000d4e6c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4e6c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4e6e:	7c00      	ldrb	r0, [r0, #16]
   d4e70:	f7ff fd30 	bl	d48d4 <HAL_USB_USART_Available_Data>
}
   d4e74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e78:	bd08      	pop	{r3, pc}

000d4e7a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4e7a:	7c00      	ldrb	r0, [r0, #16]
   d4e7c:	f7ff bd4a 	b.w	d4914 <HAL_USB_USART_Flush_Data>

000d4e80 <_ZN9USBSerialD0Ev>:
   d4e80:	b510      	push	{r4, lr}
   d4e82:	2114      	movs	r1, #20
   d4e84:	4604      	mov	r4, r0
   d4e86:	f000 fb67 	bl	d5558 <_ZdlPvj>
   d4e8a:	4620      	mov	r0, r4
   d4e8c:	bd10      	pop	{r4, pc}

000d4e8e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4e8e:	b538      	push	{r3, r4, r5, lr}
   d4e90:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4e92:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4e94:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4e96:	f7ff fd25 	bl	d48e4 <HAL_USB_USART_Available_Data_For_Write>
   d4e9a:	2800      	cmp	r0, #0
   d4e9c:	dc01      	bgt.n	d4ea2 <_ZN9USBSerial5writeEh+0x14>
   d4e9e:	7c60      	ldrb	r0, [r4, #17]
   d4ea0:	b128      	cbz	r0, d4eae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4ea2:	4629      	mov	r1, r5
   d4ea4:	7c20      	ldrb	r0, [r4, #16]
   d4ea6:	f7ff fd2d 	bl	d4904 <HAL_USB_USART_Send_Data>
   d4eaa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4eae:	bd38      	pop	{r3, r4, r5, pc}

000d4eb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4eb0:	b510      	push	{r4, lr}
   d4eb2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4eb4:	2300      	movs	r3, #0
   d4eb6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4ebc:	60a3      	str	r3, [r4, #8]
   d4ebe:	4b05      	ldr	r3, [pc, #20]	; (d4ed4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4ec0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4ec2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4ec4:	4608      	mov	r0, r1
{
  _serial = serial;
   d4ec6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4ec8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4eca:	4611      	mov	r1, r2
   d4ecc:	f7ff fcfa 	bl	d48c4 <HAL_USB_USART_Init>
}
   d4ed0:	4620      	mov	r0, r4
   d4ed2:	bd10      	pop	{r4, pc}
   d4ed4:	000d5a44 	.word	0x000d5a44

000d4ed8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4ed8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4eda:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4edc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4ede:	2100      	movs	r1, #0
   d4ee0:	f000 fcaf 	bl	d5842 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4ee4:	4620      	mov	r0, r4
   d4ee6:	bd10      	pop	{r4, pc}

000d4ee8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4ee8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4eea:	4d0e      	ldr	r5, [pc, #56]	; (d4f24 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4eec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4eee:	a801      	add	r0, sp, #4
   d4ef0:	f7ff fff2 	bl	d4ed8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4ef4:	6829      	ldr	r1, [r5, #0]
   d4ef6:	f011 0401 	ands.w	r4, r1, #1
   d4efa:	d110      	bne.n	d4f1e <_Z16_fetch_usbserialv+0x36>
   d4efc:	4628      	mov	r0, r5
   d4efe:	f7ff f8ce 	bl	d409e <__cxa_guard_acquire>
   d4f02:	b160      	cbz	r0, d4f1e <_Z16_fetch_usbserialv+0x36>
   d4f04:	aa01      	add	r2, sp, #4
   d4f06:	4621      	mov	r1, r4
   d4f08:	4807      	ldr	r0, [pc, #28]	; (d4f28 <_Z16_fetch_usbserialv+0x40>)
   d4f0a:	f7ff ffd1 	bl	d4eb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4f0e:	4628      	mov	r0, r5
   d4f10:	f7ff f8ca 	bl	d40a8 <__cxa_guard_release>
   d4f14:	4a05      	ldr	r2, [pc, #20]	; (d4f2c <_Z16_fetch_usbserialv+0x44>)
   d4f16:	4906      	ldr	r1, [pc, #24]	; (d4f30 <_Z16_fetch_usbserialv+0x48>)
   d4f18:	4803      	ldr	r0, [pc, #12]	; (d4f28 <_Z16_fetch_usbserialv+0x40>)
   d4f1a:	f000 fb0f 	bl	d553c <__aeabi_atexit>
	return _usbserial;
}
   d4f1e:	4802      	ldr	r0, [pc, #8]	; (d4f28 <_Z16_fetch_usbserialv+0x40>)
   d4f20:	b007      	add	sp, #28
   d4f22:	bd30      	pop	{r4, r5, pc}
   d4f24:	2003e414 	.word	0x2003e414
   d4f28:	2003e418 	.word	0x2003e418
   d4f2c:	2003e3a8 	.word	0x2003e3a8
   d4f30:	000d4e31 	.word	0x000d4e31

000d4f34 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4f34:	4770      	bx	lr

000d4f36 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4f36:	7441      	strb	r1, [r0, #17]
   d4f38:	4770      	bx	lr

000d4f3a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4f3a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4f3c:	7c00      	ldrb	r0, [r0, #16]
   d4f3e:	f7ff fc81 	bl	d4844 <HAL_USART_Available_Data_For_Write>
}
   d4f42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f46:	bd08      	pop	{r3, pc}

000d4f48 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4f48:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4f4a:	7c00      	ldrb	r0, [r0, #16]
   d4f4c:	f7ff fc52 	bl	d47f4 <HAL_USART_Available_Data>
}
   d4f50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f54:	bd08      	pop	{r3, pc}

000d4f56 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4f56:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4f58:	7c00      	ldrb	r0, [r0, #16]
   d4f5a:	f7ff fc5b 	bl	d4814 <HAL_USART_Peek_Data>
}
   d4f5e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f62:	bf28      	it	cs
   d4f64:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f68:	bd08      	pop	{r3, pc}

000d4f6a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4f6a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4f6c:	7c00      	ldrb	r0, [r0, #16]
   d4f6e:	f7ff fc49 	bl	d4804 <HAL_USART_Read_Data>
}
   d4f72:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f76:	bf28      	it	cs
   d4f78:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f7c:	bd08      	pop	{r3, pc}

000d4f7e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4f7e:	7c00      	ldrb	r0, [r0, #16]
   d4f80:	f7ff bc50 	b.w	d4824 <HAL_USART_Flush_Data>

000d4f84 <_ZN11USARTSerialD0Ev>:
   d4f84:	b510      	push	{r4, lr}
   d4f86:	2114      	movs	r1, #20
   d4f88:	4604      	mov	r4, r0
   d4f8a:	f000 fae5 	bl	d5558 <_ZdlPvj>
   d4f8e:	4620      	mov	r0, r4
   d4f90:	bd10      	pop	{r4, pc}

000d4f92 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4f92:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4f94:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4f96:	4604      	mov	r4, r0
   d4f98:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4f9a:	b925      	cbnz	r5, d4fa6 <_ZN11USARTSerial5writeEh+0x14>
   d4f9c:	7c00      	ldrb	r0, [r0, #16]
   d4f9e:	f7ff fc51 	bl	d4844 <HAL_USART_Available_Data_For_Write>
   d4fa2:	2800      	cmp	r0, #0
   d4fa4:	dd05      	ble.n	d4fb2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4fa6:	4631      	mov	r1, r6
   d4fa8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4fae:	f7ff bc19 	b.w	d47e4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4fb2:	4628      	mov	r0, r5
   d4fb4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4fb8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4fb8:	b510      	push	{r4, lr}
   d4fba:	4604      	mov	r4, r0
   d4fbc:	4608      	mov	r0, r1
   d4fbe:	4611      	mov	r1, r2
   d4fc0:	2200      	movs	r2, #0
   d4fc2:	6062      	str	r2, [r4, #4]
   d4fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4fc8:	60a2      	str	r2, [r4, #8]
   d4fca:	4a05      	ldr	r2, [pc, #20]	; (d4fe0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4fcc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4fce:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4fd0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4fd2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4fd4:	461a      	mov	r2, r3
   d4fd6:	f7ff fbfd 	bl	d47d4 <HAL_USART_Init>
}
   d4fda:	4620      	mov	r0, r4
   d4fdc:	bd10      	pop	{r4, pc}
   d4fde:	bf00      	nop
   d4fe0:	000d5a74 	.word	0x000d5a74

000d4fe4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4fe4:	7c00      	ldrb	r0, [r0, #16]
   d4fe6:	f7ff bc25 	b.w	d4834 <HAL_USART_Is_Enabled>
	...

000d4fec <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4fec:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4fee:	4d0c      	ldr	r5, [pc, #48]	; (d5020 <_Z22__fetch_global_Serial1v+0x34>)
   d4ff0:	6829      	ldr	r1, [r5, #0]
   d4ff2:	f011 0401 	ands.w	r4, r1, #1
   d4ff6:	d111      	bne.n	d501c <_Z22__fetch_global_Serial1v+0x30>
   d4ff8:	4628      	mov	r0, r5
   d4ffa:	f7ff f850 	bl	d409e <__cxa_guard_acquire>
   d4ffe:	b168      	cbz	r0, d501c <_Z22__fetch_global_Serial1v+0x30>
   d5000:	4a08      	ldr	r2, [pc, #32]	; (d5024 <_Z22__fetch_global_Serial1v+0x38>)
   d5002:	4b09      	ldr	r3, [pc, #36]	; (d5028 <_Z22__fetch_global_Serial1v+0x3c>)
   d5004:	4809      	ldr	r0, [pc, #36]	; (d502c <_Z22__fetch_global_Serial1v+0x40>)
   d5006:	4621      	mov	r1, r4
   d5008:	f7ff ffd6 	bl	d4fb8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d500c:	4628      	mov	r0, r5
   d500e:	f7ff f84b 	bl	d40a8 <__cxa_guard_release>
   d5012:	4a07      	ldr	r2, [pc, #28]	; (d5030 <_Z22__fetch_global_Serial1v+0x44>)
   d5014:	4907      	ldr	r1, [pc, #28]	; (d5034 <_Z22__fetch_global_Serial1v+0x48>)
   d5016:	4805      	ldr	r0, [pc, #20]	; (d502c <_Z22__fetch_global_Serial1v+0x40>)
   d5018:	f000 fa90 	bl	d553c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d501c:	4803      	ldr	r0, [pc, #12]	; (d502c <_Z22__fetch_global_Serial1v+0x40>)
   d501e:	bd38      	pop	{r3, r4, r5, pc}
   d5020:	2003e4c4 	.word	0x2003e4c4
   d5024:	2003e4c8 	.word	0x2003e4c8
   d5028:	2003e440 	.word	0x2003e440
   d502c:	2003e42c 	.word	0x2003e42c
   d5030:	2003e3a8 	.word	0x2003e3a8
   d5034:	000d4f35 	.word	0x000d4f35

000d5038 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5038:	4770      	bx	lr

000d503a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d503a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d503c:	4606      	mov	r6, r0
   d503e:	4615      	mov	r5, r2
   d5040:	460c      	mov	r4, r1
   d5042:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5044:	42bc      	cmp	r4, r7
   d5046:	d006      	beq.n	d5056 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5048:	6833      	ldr	r3, [r6, #0]
   d504a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d504e:	689b      	ldr	r3, [r3, #8]
   d5050:	4630      	mov	r0, r6
   d5052:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5054:	e7f6      	b.n	d5044 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5056:	4628      	mov	r0, r5
   d5058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d505a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d505a:	2200      	movs	r2, #0
   d505c:	7c00      	ldrb	r0, [r0, #16]
   d505e:	f7ff bbf9 	b.w	d4854 <HAL_I2C_Write_Data>

000d5062 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5062:	2100      	movs	r1, #0
   d5064:	7c00      	ldrb	r0, [r0, #16]
   d5066:	f7ff bbfd 	b.w	d4864 <HAL_I2C_Available_Data>

000d506a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d506a:	2100      	movs	r1, #0
   d506c:	7c00      	ldrb	r0, [r0, #16]
   d506e:	f7ff bc01 	b.w	d4874 <HAL_I2C_Read_Data>

000d5072 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5072:	2100      	movs	r1, #0
   d5074:	7c00      	ldrb	r0, [r0, #16]
   d5076:	f7ff bc05 	b.w	d4884 <HAL_I2C_Peek_Data>

000d507a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d507a:	2100      	movs	r1, #0
   d507c:	7c00      	ldrb	r0, [r0, #16]
   d507e:	f7ff bc09 	b.w	d4894 <HAL_I2C_Flush_Data>

000d5082 <_ZN7TwoWireD0Ev>:
   d5082:	b510      	push	{r4, lr}
   d5084:	2114      	movs	r1, #20
   d5086:	4604      	mov	r4, r0
   d5088:	f000 fa66 	bl	d5558 <_ZdlPvj>
   d508c:	4620      	mov	r0, r4
   d508e:	bd10      	pop	{r4, pc}

000d5090 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5090:	b510      	push	{r4, lr}
   d5092:	4604      	mov	r4, r0
   d5094:	2300      	movs	r3, #0
   d5096:	6063      	str	r3, [r4, #4]
   d5098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d509c:	60a3      	str	r3, [r4, #8]
   d509e:	4b04      	ldr	r3, [pc, #16]	; (d50b0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d50a0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d50a2:	4608      	mov	r0, r1
   d50a4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d50a6:	4611      	mov	r1, r2
   d50a8:	f7ff fc04 	bl	d48b4 <HAL_I2C_Init>
}
   d50ac:	4620      	mov	r0, r4
   d50ae:	bd10      	pop	{r4, pc}
   d50b0:	000d5aa4 	.word	0x000d5aa4

000d50b4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d50b4:	2100      	movs	r1, #0
   d50b6:	7c00      	ldrb	r0, [r0, #16]
   d50b8:	f7ff bbf4 	b.w	d48a4 <HAL_I2C_Is_Enabled>

000d50bc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50bc:	2200      	movs	r2, #0
   d50be:	4611      	mov	r1, r2
   d50c0:	6840      	ldr	r0, [r0, #4]
   d50c2:	f7ff bc8b 	b.w	d49dc <network_listening>

000d50c6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d50c6:	2200      	movs	r2, #0
   d50c8:	4611      	mov	r1, r2
   d50ca:	6840      	ldr	r0, [r0, #4]
   d50cc:	f7ff bc96 	b.w	d49fc <network_get_listen_timeout>

000d50d0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d50d0:	2200      	movs	r2, #0
   d50d2:	6840      	ldr	r0, [r0, #4]
   d50d4:	f7ff bc8a 	b.w	d49ec <network_set_listen_timeout>

000d50d8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d50d8:	2200      	movs	r2, #0
   d50da:	f081 0101 	eor.w	r1, r1, #1
   d50de:	6840      	ldr	r0, [r0, #4]
   d50e0:	f7ff bc74 	b.w	d49cc <network_listen>

000d50e4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d50e4:	2300      	movs	r3, #0
   d50e6:	461a      	mov	r2, r3
   d50e8:	2101      	movs	r1, #1
   d50ea:	6840      	ldr	r0, [r0, #4]
   d50ec:	f7ff bc66 	b.w	d49bc <network_off>

000d50f0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d50f0:	2300      	movs	r3, #0
   d50f2:	461a      	mov	r2, r3
   d50f4:	4619      	mov	r1, r3
   d50f6:	6840      	ldr	r0, [r0, #4]
   d50f8:	f7ff bc58 	b.w	d49ac <network_on>

000d50fc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d50fc:	2200      	movs	r2, #0
   d50fe:	4611      	mov	r1, r2
   d5100:	6840      	ldr	r0, [r0, #4]
   d5102:	f7ff bc4b 	b.w	d499c <network_ready>

000d5106 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5106:	2200      	movs	r2, #0
   d5108:	4611      	mov	r1, r2
   d510a:	6840      	ldr	r0, [r0, #4]
   d510c:	f7ff bc36 	b.w	d497c <network_connecting>

000d5110 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5110:	2200      	movs	r2, #0
   d5112:	2102      	movs	r1, #2
   d5114:	6840      	ldr	r0, [r0, #4]
   d5116:	f7ff bc39 	b.w	d498c <network_disconnect>

000d511a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d511a:	2300      	movs	r3, #0
   d511c:	461a      	mov	r2, r3
   d511e:	6840      	ldr	r0, [r0, #4]
   d5120:	f7ff bc24 	b.w	d496c <network_connect>

000d5124 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5124:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5126:	4605      	mov	r5, r0
   d5128:	b188      	cbz	r0, d514e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d512a:	6804      	ldr	r4, [r0, #0]
   d512c:	b14c      	cbz	r4, d5142 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d512e:	68a3      	ldr	r3, [r4, #8]
   d5130:	b11b      	cbz	r3, d513a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5132:	2203      	movs	r2, #3
   d5134:	4621      	mov	r1, r4
   d5136:	4620      	mov	r0, r4
   d5138:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d513a:	2110      	movs	r1, #16
   d513c:	4620      	mov	r0, r4
   d513e:	f000 fa0b 	bl	d5558 <_ZdlPvj>
   d5142:	4628      	mov	r0, r5
   d5144:	2114      	movs	r1, #20
      }
   d5146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d514a:	f000 ba05 	b.w	d5558 <_ZdlPvj>
   d514e:	bd38      	pop	{r3, r4, r5, pc}

000d5150 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5150:	b110      	cbz	r0, d5158 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5152:	6803      	ldr	r3, [r0, #0]
   d5154:	685b      	ldr	r3, [r3, #4]
   d5156:	4718      	bx	r3
   d5158:	4770      	bx	lr

000d515a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d515a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d515c:	6803      	ldr	r3, [r0, #0]
   d515e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5160:	b1bb      	cbz	r3, d5192 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5162:	6858      	ldr	r0, [r3, #4]
   d5164:	f7ff fb06 	bl	d4774 <os_thread_is_current>
   d5168:	b978      	cbnz	r0, d518a <_ZN6ThreadD1Ev+0x30>
   d516a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d516c:	7c5a      	ldrb	r2, [r3, #17]
   d516e:	b912      	cbnz	r2, d5176 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5170:	6858      	ldr	r0, [r3, #4]
   d5172:	f7ff fb07 	bl	d4784 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5176:	6823      	ldr	r3, [r4, #0]
   d5178:	6858      	ldr	r0, [r3, #4]
   d517a:	f7ff fb0b 	bl	d4794 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d517e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5180:	2300      	movs	r3, #0
   d5182:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5184:	b128      	cbz	r0, d5192 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5186:	f7ff ffcd 	bl	d5124 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d518a:	6820      	ldr	r0, [r4, #0]
   d518c:	b108      	cbz	r0, d5192 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d518e:	f7ff ffc9 	bl	d5124 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5192:	4620      	mov	r0, r4
   d5194:	bd10      	pop	{r4, pc}

000d5196 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5196:	b538      	push	{r3, r4, r5, lr}
   d5198:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d519a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d519e:	b108      	cbz	r0, d51a4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d51a0:	f7fe ff7b 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d51a4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d51a8:	b108      	cbz	r0, d51ae <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d51aa:	f7ff fb03 	bl	d47b4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51ae:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d51b2:	b135      	cbz	r5, d51c2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51b4:	4628      	mov	r0, r5
   d51b6:	f7ff ffd0 	bl	d515a <_ZN6ThreadD1Ev>
   d51ba:	2104      	movs	r1, #4
   d51bc:	4628      	mov	r0, r5
   d51be:	f000 f9cb 	bl	d5558 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51c2:	6820      	ldr	r0, [r4, #0]
   d51c4:	b108      	cbz	r0, d51ca <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d51c6:	f7ff ffc3 	bl	d5150 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d51ca:	4620      	mov	r0, r4
   d51cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d51d0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d51d0:	b510      	push	{r4, lr}
   d51d2:	4b04      	ldr	r3, [pc, #16]	; (d51e4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d51d4:	4604      	mov	r4, r0
   d51d6:	f840 3b08 	str.w	r3, [r0], #8
   d51da:	f7ff ffdc 	bl	d5196 <_ZN5spark11MeshPublishD1Ev>
   d51de:	4620      	mov	r0, r4
   d51e0:	bd10      	pop	{r4, pc}
   d51e2:	bf00      	nop
   d51e4:	000d5acc 	.word	0x000d5acc

000d51e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d51e8:	b538      	push	{r3, r4, r5, lr}
   d51ea:	4c0e      	ldr	r4, [pc, #56]	; (d5224 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d51ec:	4b0e      	ldr	r3, [pc, #56]	; (d5228 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d51ee:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d51f0:	2500      	movs	r5, #0
   d51f2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d51f4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d51f8:	6063      	str	r3, [r4, #4]
   d51fa:	60a5      	str	r5, [r4, #8]
   d51fc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5200:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5204:	f7ff face 	bl	d47a4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5208:	4b08      	ldr	r3, [pc, #32]	; (d522c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d520a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d520e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5212:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5214:	4620      	mov	r0, r4
   d5216:	4a06      	ldr	r2, [pc, #24]	; (d5230 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5218:	4906      	ldr	r1, [pc, #24]	; (d5234 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d521a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d521e:	f000 b98d 	b.w	d553c <__aeabi_atexit>
   d5222:	bf00      	nop
   d5224:	2003e54c 	.word	0x2003e54c
   d5228:	000d5b34 	.word	0x000d5b34
   d522c:	000d5acc 	.word	0x000d5acc
   d5230:	2003e3a8 	.word	0x2003e3a8
   d5234:	000d51d1 	.word	0x000d51d1

000d5238 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5238:	2200      	movs	r2, #0
   d523a:	4611      	mov	r1, r2
   d523c:	6840      	ldr	r0, [r0, #4]
   d523e:	f7ff bbad 	b.w	d499c <network_ready>

000d5242 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5242:	2200      	movs	r2, #0
   d5244:	4611      	mov	r1, r2
   d5246:	6840      	ldr	r0, [r0, #4]
   d5248:	f7ff bbc8 	b.w	d49dc <network_listening>

000d524c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d524c:	2200      	movs	r2, #0
   d524e:	4611      	mov	r1, r2
   d5250:	6840      	ldr	r0, [r0, #4]
   d5252:	f7ff bbd3 	b.w	d49fc <network_get_listen_timeout>

000d5256 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5256:	2200      	movs	r2, #0
   d5258:	6840      	ldr	r0, [r0, #4]
   d525a:	f7ff bbc7 	b.w	d49ec <network_set_listen_timeout>

000d525e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d525e:	2200      	movs	r2, #0
   d5260:	f081 0101 	eor.w	r1, r1, #1
   d5264:	6840      	ldr	r0, [r0, #4]
   d5266:	f7ff bbb1 	b.w	d49cc <network_listen>

000d526a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d526a:	2300      	movs	r3, #0
   d526c:	461a      	mov	r2, r3
   d526e:	4619      	mov	r1, r3
   d5270:	6840      	ldr	r0, [r0, #4]
   d5272:	f7ff bba3 	b.w	d49bc <network_off>

000d5276 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5276:	2300      	movs	r3, #0
   d5278:	461a      	mov	r2, r3
   d527a:	4619      	mov	r1, r3
   d527c:	6840      	ldr	r0, [r0, #4]
   d527e:	f7ff bb95 	b.w	d49ac <network_on>

000d5282 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5282:	2200      	movs	r2, #0
   d5284:	4611      	mov	r1, r2
   d5286:	6840      	ldr	r0, [r0, #4]
   d5288:	f7ff bb78 	b.w	d497c <network_connecting>

000d528c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d528c:	2200      	movs	r2, #0
   d528e:	2102      	movs	r1, #2
   d5290:	6840      	ldr	r0, [r0, #4]
   d5292:	f7ff bb7b 	b.w	d498c <network_disconnect>

000d5296 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5296:	2300      	movs	r3, #0
   d5298:	461a      	mov	r2, r3
   d529a:	6840      	ldr	r0, [r0, #4]
   d529c:	f7ff bb66 	b.w	d496c <network_connect>

000d52a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d52a0:	4b02      	ldr	r3, [pc, #8]	; (d52ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d52a2:	2204      	movs	r2, #4
   d52a4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d52a6:	4a02      	ldr	r2, [pc, #8]	; (d52b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d52a8:	601a      	str	r2, [r3, #0]
   d52aa:	4770      	bx	lr
   d52ac:	2003e720 	.word	0x2003e720
   d52b0:	000d5b00 	.word	0x000d5b00

000d52b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d52b4:	2300      	movs	r3, #0
   d52b6:	461a      	mov	r2, r3
   d52b8:	6840      	ldr	r0, [r0, #4]
   d52ba:	f7ff bb57 	b.w	d496c <network_connect>

000d52be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d52be:	2200      	movs	r2, #0
   d52c0:	2102      	movs	r1, #2
   d52c2:	6840      	ldr	r0, [r0, #4]
   d52c4:	f7ff bb62 	b.w	d498c <network_disconnect>

000d52c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d52c8:	2200      	movs	r2, #0
   d52ca:	4611      	mov	r1, r2
   d52cc:	6840      	ldr	r0, [r0, #4]
   d52ce:	f7ff bb55 	b.w	d497c <network_connecting>

000d52d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d52d2:	2200      	movs	r2, #0
   d52d4:	4611      	mov	r1, r2
   d52d6:	6840      	ldr	r0, [r0, #4]
   d52d8:	f7ff bb60 	b.w	d499c <network_ready>

000d52dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d52dc:	2300      	movs	r3, #0
   d52de:	461a      	mov	r2, r3
   d52e0:	4619      	mov	r1, r3
   d52e2:	6840      	ldr	r0, [r0, #4]
   d52e4:	f7ff bb62 	b.w	d49ac <network_on>

000d52e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d52e8:	2300      	movs	r3, #0
   d52ea:	461a      	mov	r2, r3
   d52ec:	4619      	mov	r1, r3
   d52ee:	6840      	ldr	r0, [r0, #4]
   d52f0:	f7ff bb64 	b.w	d49bc <network_off>

000d52f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d52f4:	2200      	movs	r2, #0
   d52f6:	f081 0101 	eor.w	r1, r1, #1
   d52fa:	6840      	ldr	r0, [r0, #4]
   d52fc:	f7ff bb66 	b.w	d49cc <network_listen>

000d5300 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5300:	2200      	movs	r2, #0
   d5302:	6840      	ldr	r0, [r0, #4]
   d5304:	f7ff bb72 	b.w	d49ec <network_set_listen_timeout>

000d5308 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5308:	2200      	movs	r2, #0
   d530a:	4611      	mov	r1, r2
   d530c:	6840      	ldr	r0, [r0, #4]
   d530e:	f7ff bb75 	b.w	d49fc <network_get_listen_timeout>

000d5312 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5312:	2200      	movs	r2, #0
   d5314:	4611      	mov	r1, r2
   d5316:	6840      	ldr	r0, [r0, #4]
   d5318:	f7ff bb60 	b.w	d49dc <network_listening>

000d531c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d531c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5320:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5322:	b095      	sub	sp, #84	; 0x54
   d5324:	4616      	mov	r6, r2
   d5326:	460d      	mov	r5, r1
   d5328:	4607      	mov	r7, r0
    IPAddress addr;
   d532a:	f7ff fd47 	bl	d4dbc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d532e:	4621      	mov	r1, r4
   d5330:	2220      	movs	r2, #32
   d5332:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5334:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5336:	f000 fa84 	bl	d5842 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d533a:	2340      	movs	r3, #64	; 0x40
   d533c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d533e:	4621      	mov	r1, r4
   d5340:	466b      	mov	r3, sp
   d5342:	aa0c      	add	r2, sp, #48	; 0x30
   d5344:	4630      	mov	r0, r6
   d5346:	f7ff f9bd 	bl	d46c4 <netdb_getaddrinfo>
    if (!r) {
   d534a:	4604      	mov	r4, r0
   d534c:	2800      	cmp	r0, #0
   d534e:	d144      	bne.n	d53da <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5350:	4602      	mov	r2, r0
   d5352:	2101      	movs	r1, #1
   d5354:	6868      	ldr	r0, [r5, #4]
   d5356:	f7ff fb21 	bl	d499c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d535a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d535c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d535e:	4622      	mov	r2, r4
   d5360:	6868      	ldr	r0, [r5, #4]
   d5362:	f7ff fb1b 	bl	d499c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5366:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5368:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d536a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d536c:	2e00      	cmp	r6, #0
   d536e:	d034      	beq.n	d53da <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5370:	2900      	cmp	r1, #0
   d5372:	d132      	bne.n	d53da <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5374:	6873      	ldr	r3, [r6, #4]
   d5376:	2b02      	cmp	r3, #2
   d5378:	d002      	beq.n	d5380 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d537a:	2b0a      	cmp	r3, #10
   d537c:	d009      	beq.n	d5392 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d537e:	e02a      	b.n	d53d6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5380:	f1b8 0f00 	cmp.w	r8, #0
   d5384:	d027      	beq.n	d53d6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5386:	6971      	ldr	r1, [r6, #20]
   d5388:	4638      	mov	r0, r7
   d538a:	3104      	adds	r1, #4
   d538c:	f7ff fd43 	bl	d4e16 <_ZN9IPAddressaSEPKh>
   d5390:	e020      	b.n	d53d4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5392:	f1b9 0f00 	cmp.w	r9, #0
   d5396:	d01e      	beq.n	d53d6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5398:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d539a:	2211      	movs	r2, #17
   d539c:	a801      	add	r0, sp, #4
   d539e:	f000 fa50 	bl	d5842 <memset>
                    a.v = 6;
   d53a2:	2306      	movs	r3, #6
   d53a4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d53a8:	ad01      	add	r5, sp, #4
   d53aa:	f104 0308 	add.w	r3, r4, #8
   d53ae:	3418      	adds	r4, #24
   d53b0:	6818      	ldr	r0, [r3, #0]
   d53b2:	6859      	ldr	r1, [r3, #4]
   d53b4:	462a      	mov	r2, r5
   d53b6:	c203      	stmia	r2!, {r0, r1}
   d53b8:	3308      	adds	r3, #8
   d53ba:	42a3      	cmp	r3, r4
   d53bc:	4615      	mov	r5, r2
   d53be:	d1f7      	bne.n	d53b0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d53c0:	a901      	add	r1, sp, #4
   d53c2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d53c4:	ad07      	add	r5, sp, #28
   d53c6:	f7ff fd07 	bl	d4dd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d53ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d53cc:	1d3c      	adds	r4, r7, #4
   d53ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d53d0:	682b      	ldr	r3, [r5, #0]
   d53d2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d53d4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d53d6:	69f6      	ldr	r6, [r6, #28]
   d53d8:	e7c8      	b.n	d536c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d53da:	9800      	ldr	r0, [sp, #0]
   d53dc:	f7ff f96a 	bl	d46b4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d53e0:	4638      	mov	r0, r7
   d53e2:	b015      	add	sp, #84	; 0x54
   d53e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d53e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d53e8:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d53ea:	4a03      	ldr	r2, [pc, #12]	; (d53f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d53ec:	601a      	str	r2, [r3, #0]
   d53ee:	2200      	movs	r2, #0
   d53f0:	605a      	str	r2, [r3, #4]
   d53f2:	4770      	bx	lr
   d53f4:	2003e728 	.word	0x2003e728
   d53f8:	000d5b34 	.word	0x000d5b34

000d53fc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d53fc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d53fe:	4e18      	ldr	r6, [pc, #96]	; (d5460 <pinAvailable+0x64>)
   d5400:	6831      	ldr	r1, [r6, #0]
   d5402:	f011 0501 	ands.w	r5, r1, #1
   d5406:	4604      	mov	r4, r0
   d5408:	d10a      	bne.n	d5420 <pinAvailable+0x24>
   d540a:	4630      	mov	r0, r6
   d540c:	f7fe fe47 	bl	d409e <__cxa_guard_acquire>
   d5410:	b130      	cbz	r0, d5420 <pinAvailable+0x24>
   d5412:	4629      	mov	r1, r5
   d5414:	4813      	ldr	r0, [pc, #76]	; (d5464 <pinAvailable+0x68>)
   d5416:	f7ff fb4f 	bl	d4ab8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d541a:	4630      	mov	r0, r6
   d541c:	f7fe fe44 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5420:	4810      	ldr	r0, [pc, #64]	; (d5464 <pinAvailable+0x68>)
   d5422:	f7ff fb53 	bl	d4acc <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5426:	b128      	cbz	r0, d5434 <pinAvailable+0x38>
   d5428:	f1a4 030b 	sub.w	r3, r4, #11
   d542c:	2b02      	cmp	r3, #2
   d542e:	d801      	bhi.n	d5434 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5430:	2000      	movs	r0, #0
   d5432:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5434:	f000 f85c 	bl	d54f0 <_Z19__fetch_global_Wirev>
   d5438:	f7ff fe3c 	bl	d50b4 <_ZN7TwoWire9isEnabledEv>
   d543c:	b108      	cbz	r0, d5442 <pinAvailable+0x46>
   d543e:	2c01      	cmp	r4, #1
   d5440:	d9f6      	bls.n	d5430 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5442:	f7ff fdd3 	bl	d4fec <_Z22__fetch_global_Serial1v>
   d5446:	f7ff fdcd 	bl	d4fe4 <_ZN11USARTSerial9isEnabledEv>
   d544a:	b118      	cbz	r0, d5454 <pinAvailable+0x58>
   d544c:	f1a4 0309 	sub.w	r3, r4, #9
   d5450:	2b01      	cmp	r3, #1
   d5452:	d9ed      	bls.n	d5430 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5454:	2c23      	cmp	r4, #35	; 0x23
   d5456:	bf8c      	ite	hi
   d5458:	2000      	movhi	r0, #0
   d545a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d545c:	bd70      	pop	{r4, r5, r6, pc}
   d545e:	bf00      	nop
   d5460:	2003e3cc 	.word	0x2003e3cc
   d5464:	2003e3d0 	.word	0x2003e3d0

000d5468 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5468:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d546a:	b538      	push	{r3, r4, r5, lr}
   d546c:	4604      	mov	r4, r0
   d546e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5470:	d80a      	bhi.n	d5488 <pinMode+0x20>
   d5472:	29ff      	cmp	r1, #255	; 0xff
   d5474:	d008      	beq.n	d5488 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5476:	f7ff ffc1 	bl	d53fc <pinAvailable>
   d547a:	b128      	cbz	r0, d5488 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d547c:	4629      	mov	r1, r5
   d547e:	4620      	mov	r0, r4
}
   d5480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5484:	f7ff b92e 	b.w	d46e4 <HAL_Pin_Mode>
   d5488:	bd38      	pop	{r3, r4, r5, pc}

000d548a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d548a:	b538      	push	{r3, r4, r5, lr}
   d548c:	4604      	mov	r4, r0
   d548e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5490:	f7ff f930 	bl	d46f4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5494:	28ff      	cmp	r0, #255	; 0xff
   d5496:	d010      	beq.n	d54ba <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5498:	2806      	cmp	r0, #6
   d549a:	d804      	bhi.n	d54a6 <digitalWrite+0x1c>
   d549c:	234d      	movs	r3, #77	; 0x4d
   d549e:	fa23 f000 	lsr.w	r0, r3, r0
   d54a2:	07c3      	lsls	r3, r0, #31
   d54a4:	d409      	bmi.n	d54ba <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d54a6:	4620      	mov	r0, r4
   d54a8:	f7ff ffa8 	bl	d53fc <pinAvailable>
   d54ac:	b128      	cbz	r0, d54ba <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d54ae:	4629      	mov	r1, r5
   d54b0:	4620      	mov	r0, r4
}
   d54b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d54b6:	f7ff b925 	b.w	d4704 <HAL_GPIO_Write>
   d54ba:	bd38      	pop	{r3, r4, r5, pc}

000d54bc <_Z17acquireWireBufferv>:
   d54bc:	b570      	push	{r4, r5, r6, lr}
   d54be:	4604      	mov	r4, r0
   d54c0:	2514      	movs	r5, #20
   d54c2:	462a      	mov	r2, r5
   d54c4:	4e09      	ldr	r6, [pc, #36]	; (d54ec <_Z17acquireWireBufferv+0x30>)
   d54c6:	2100      	movs	r1, #0
   d54c8:	f000 f9bb 	bl	d5842 <memset>
   d54cc:	8025      	strh	r5, [r4, #0]
   d54ce:	2520      	movs	r5, #32
   d54d0:	4631      	mov	r1, r6
   d54d2:	60a5      	str	r5, [r4, #8]
   d54d4:	6125      	str	r5, [r4, #16]
   d54d6:	4628      	mov	r0, r5
   d54d8:	f000 f840 	bl	d555c <_ZnajRKSt9nothrow_t>
   d54dc:	4631      	mov	r1, r6
   d54de:	6060      	str	r0, [r4, #4]
   d54e0:	4628      	mov	r0, r5
   d54e2:	f000 f83b 	bl	d555c <_ZnajRKSt9nothrow_t>
   d54e6:	60e0      	str	r0, [r4, #12]
   d54e8:	4620      	mov	r0, r4
   d54ea:	bd70      	pop	{r4, r5, r6, pc}
   d54ec:	000d5b60 	.word	0x000d5b60

000d54f0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d54f0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d54f2:	4d0e      	ldr	r5, [pc, #56]	; (d552c <_Z19__fetch_global_Wirev+0x3c>)
   d54f4:	6829      	ldr	r1, [r5, #0]
   d54f6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d54fa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d54fc:	d113      	bne.n	d5526 <_Z19__fetch_global_Wirev+0x36>
   d54fe:	4628      	mov	r0, r5
   d5500:	f7fe fdcd 	bl	d409e <__cxa_guard_acquire>
   d5504:	b178      	cbz	r0, d5526 <_Z19__fetch_global_Wirev+0x36>
   d5506:	a801      	add	r0, sp, #4
   d5508:	f7ff ffd8 	bl	d54bc <_Z17acquireWireBufferv>
   d550c:	aa01      	add	r2, sp, #4
   d550e:	4621      	mov	r1, r4
   d5510:	4807      	ldr	r0, [pc, #28]	; (d5530 <_Z19__fetch_global_Wirev+0x40>)
   d5512:	f7ff fdbd 	bl	d5090 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5516:	4628      	mov	r0, r5
   d5518:	f7fe fdc6 	bl	d40a8 <__cxa_guard_release>
   d551c:	4a05      	ldr	r2, [pc, #20]	; (d5534 <_Z19__fetch_global_Wirev+0x44>)
   d551e:	4906      	ldr	r1, [pc, #24]	; (d5538 <_Z19__fetch_global_Wirev+0x48>)
   d5520:	4803      	ldr	r0, [pc, #12]	; (d5530 <_Z19__fetch_global_Wirev+0x40>)
   d5522:	f000 f80b 	bl	d553c <__aeabi_atexit>
	return wire;
}
   d5526:	4802      	ldr	r0, [pc, #8]	; (d5530 <_Z19__fetch_global_Wirev+0x40>)
   d5528:	b007      	add	sp, #28
   d552a:	bd30      	pop	{r4, r5, pc}
   d552c:	2003e734 	.word	0x2003e734
   d5530:	2003e738 	.word	0x2003e738
   d5534:	2003e3a8 	.word	0x2003e3a8
   d5538:	000d5039 	.word	0x000d5039

000d553c <__aeabi_atexit>:
   d553c:	460b      	mov	r3, r1
   d553e:	4601      	mov	r1, r0
   d5540:	4618      	mov	r0, r3
   d5542:	f000 b965 	b.w	d5810 <__cxa_atexit>
	...

000d5548 <_ZSt15get_new_handlerv>:
   d5548:	4b02      	ldr	r3, [pc, #8]	; (d5554 <_ZSt15get_new_handlerv+0xc>)
   d554a:	6818      	ldr	r0, [r3, #0]
   d554c:	f3bf 8f5f 	dmb	sy
   d5550:	4770      	bx	lr
   d5552:	bf00      	nop
   d5554:	2003e74c 	.word	0x2003e74c

000d5558 <_ZdlPvj>:
   d5558:	f7fe bd9d 	b.w	d4096 <_ZdlPv>

000d555c <_ZnajRKSt9nothrow_t>:
   d555c:	f000 b800 	b.w	d5560 <_ZnwjRKSt9nothrow_t>

000d5560 <_ZnwjRKSt9nothrow_t>:
   d5560:	b510      	push	{r4, lr}
   d5562:	2800      	cmp	r0, #0
   d5564:	bf14      	ite	ne
   d5566:	4604      	movne	r4, r0
   d5568:	2401      	moveq	r4, #1
   d556a:	4620      	mov	r0, r4
   d556c:	f7ff fa56 	bl	d4a1c <malloc>
   d5570:	b920      	cbnz	r0, d557c <_ZnwjRKSt9nothrow_t+0x1c>
   d5572:	f7ff ffe9 	bl	d5548 <_ZSt15get_new_handlerv>
   d5576:	b108      	cbz	r0, d557c <_ZnwjRKSt9nothrow_t+0x1c>
   d5578:	4780      	blx	r0
   d557a:	e7f6      	b.n	d556a <_ZnwjRKSt9nothrow_t+0xa>
   d557c:	bd10      	pop	{r4, pc}
	...

000d5580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5580:	4b18      	ldr	r3, [pc, #96]	; (d55e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5582:	681a      	ldr	r2, [r3, #0]
   d5584:	07d1      	lsls	r1, r2, #31
   d5586:	bf5c      	itt	pl
   d5588:	2201      	movpl	r2, #1
   d558a:	601a      	strpl	r2, [r3, #0]
   d558c:	4b16      	ldr	r3, [pc, #88]	; (d55e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d558e:	681a      	ldr	r2, [r3, #0]
   d5590:	07d2      	lsls	r2, r2, #31
   d5592:	bf5c      	itt	pl
   d5594:	2201      	movpl	r2, #1
   d5596:	601a      	strpl	r2, [r3, #0]
   d5598:	4b14      	ldr	r3, [pc, #80]	; (d55ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d559a:	681a      	ldr	r2, [r3, #0]
   d559c:	07d0      	lsls	r0, r2, #31
   d559e:	bf5c      	itt	pl
   d55a0:	2201      	movpl	r2, #1
   d55a2:	601a      	strpl	r2, [r3, #0]
   d55a4:	4b12      	ldr	r3, [pc, #72]	; (d55f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d55a6:	681a      	ldr	r2, [r3, #0]
   d55a8:	07d1      	lsls	r1, r2, #31
   d55aa:	bf5c      	itt	pl
   d55ac:	2201      	movpl	r2, #1
   d55ae:	601a      	strpl	r2, [r3, #0]
   d55b0:	4b10      	ldr	r3, [pc, #64]	; (d55f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d55b2:	681a      	ldr	r2, [r3, #0]
   d55b4:	07d2      	lsls	r2, r2, #31
   d55b6:	bf5c      	itt	pl
   d55b8:	2201      	movpl	r2, #1
   d55ba:	601a      	strpl	r2, [r3, #0]
   d55bc:	4b0e      	ldr	r3, [pc, #56]	; (d55f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d55be:	681a      	ldr	r2, [r3, #0]
   d55c0:	07d0      	lsls	r0, r2, #31
   d55c2:	bf5c      	itt	pl
   d55c4:	2201      	movpl	r2, #1
   d55c6:	601a      	strpl	r2, [r3, #0]
   d55c8:	4b0c      	ldr	r3, [pc, #48]	; (d55fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d55ca:	681a      	ldr	r2, [r3, #0]
   d55cc:	07d1      	lsls	r1, r2, #31
   d55ce:	bf5c      	itt	pl
   d55d0:	2201      	movpl	r2, #1
   d55d2:	601a      	strpl	r2, [r3, #0]
   d55d4:	4b0a      	ldr	r3, [pc, #40]	; (d5600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d55d6:	681a      	ldr	r2, [r3, #0]
   d55d8:	07d2      	lsls	r2, r2, #31
   d55da:	bf5c      	itt	pl
   d55dc:	2201      	movpl	r2, #1
   d55de:	601a      	strpl	r2, [r3, #0]
   d55e0:	4770      	bx	lr
   d55e2:	bf00      	nop
   d55e4:	2003e76c 	.word	0x2003e76c
   d55e8:	2003e768 	.word	0x2003e768
   d55ec:	2003e764 	.word	0x2003e764
   d55f0:	2003e760 	.word	0x2003e760
   d55f4:	2003e75c 	.word	0x2003e75c
   d55f8:	2003e758 	.word	0x2003e758
   d55fc:	2003e754 	.word	0x2003e754
   d5600:	2003e750 	.word	0x2003e750

000d5604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5604:	4b24      	ldr	r3, [pc, #144]	; (d5698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5606:	681a      	ldr	r2, [r3, #0]
   d5608:	07d0      	lsls	r0, r2, #31
   d560a:	bf5c      	itt	pl
   d560c:	2201      	movpl	r2, #1
   d560e:	601a      	strpl	r2, [r3, #0]
   d5610:	4b22      	ldr	r3, [pc, #136]	; (d569c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5612:	681a      	ldr	r2, [r3, #0]
   d5614:	07d1      	lsls	r1, r2, #31
   d5616:	bf5c      	itt	pl
   d5618:	2201      	movpl	r2, #1
   d561a:	601a      	strpl	r2, [r3, #0]
   d561c:	4b20      	ldr	r3, [pc, #128]	; (d56a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d561e:	681a      	ldr	r2, [r3, #0]
   d5620:	07d2      	lsls	r2, r2, #31
   d5622:	bf5c      	itt	pl
   d5624:	2201      	movpl	r2, #1
   d5626:	601a      	strpl	r2, [r3, #0]
   d5628:	4b1e      	ldr	r3, [pc, #120]	; (d56a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d562a:	681a      	ldr	r2, [r3, #0]
   d562c:	07d0      	lsls	r0, r2, #31
   d562e:	bf5c      	itt	pl
   d5630:	2201      	movpl	r2, #1
   d5632:	601a      	strpl	r2, [r3, #0]
   d5634:	4b1c      	ldr	r3, [pc, #112]	; (d56a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5636:	681a      	ldr	r2, [r3, #0]
   d5638:	07d1      	lsls	r1, r2, #31
   d563a:	bf5c      	itt	pl
   d563c:	2201      	movpl	r2, #1
   d563e:	601a      	strpl	r2, [r3, #0]
   d5640:	4b1a      	ldr	r3, [pc, #104]	; (d56ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5642:	681a      	ldr	r2, [r3, #0]
   d5644:	07d2      	lsls	r2, r2, #31
   d5646:	bf5c      	itt	pl
   d5648:	2201      	movpl	r2, #1
   d564a:	601a      	strpl	r2, [r3, #0]
   d564c:	4b18      	ldr	r3, [pc, #96]	; (d56b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d564e:	681a      	ldr	r2, [r3, #0]
   d5650:	07d0      	lsls	r0, r2, #31
   d5652:	bf5c      	itt	pl
   d5654:	2201      	movpl	r2, #1
   d5656:	601a      	strpl	r2, [r3, #0]
   d5658:	4b16      	ldr	r3, [pc, #88]	; (d56b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d565a:	681a      	ldr	r2, [r3, #0]
   d565c:	07d1      	lsls	r1, r2, #31
   d565e:	bf5c      	itt	pl
   d5660:	2201      	movpl	r2, #1
   d5662:	601a      	strpl	r2, [r3, #0]
   d5664:	4b14      	ldr	r3, [pc, #80]	; (d56b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5666:	681a      	ldr	r2, [r3, #0]
   d5668:	07d2      	lsls	r2, r2, #31
   d566a:	bf5c      	itt	pl
   d566c:	2201      	movpl	r2, #1
   d566e:	601a      	strpl	r2, [r3, #0]
   d5670:	4b12      	ldr	r3, [pc, #72]	; (d56bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5672:	681a      	ldr	r2, [r3, #0]
   d5674:	07d0      	lsls	r0, r2, #31
   d5676:	bf5c      	itt	pl
   d5678:	2201      	movpl	r2, #1
   d567a:	601a      	strpl	r2, [r3, #0]
   d567c:	4b10      	ldr	r3, [pc, #64]	; (d56c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d567e:	681a      	ldr	r2, [r3, #0]
   d5680:	07d1      	lsls	r1, r2, #31
   d5682:	bf5c      	itt	pl
   d5684:	2201      	movpl	r2, #1
   d5686:	601a      	strpl	r2, [r3, #0]
   d5688:	4b0e      	ldr	r3, [pc, #56]	; (d56c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d568a:	681a      	ldr	r2, [r3, #0]
   d568c:	07d2      	lsls	r2, r2, #31
   d568e:	bf5c      	itt	pl
   d5690:	2201      	movpl	r2, #1
   d5692:	601a      	strpl	r2, [r3, #0]
   d5694:	4770      	bx	lr
   d5696:	bf00      	nop
   d5698:	2003e79c 	.word	0x2003e79c
   d569c:	2003e798 	.word	0x2003e798
   d56a0:	2003e794 	.word	0x2003e794
   d56a4:	2003e790 	.word	0x2003e790
   d56a8:	2003e78c 	.word	0x2003e78c
   d56ac:	2003e788 	.word	0x2003e788
   d56b0:	2003e784 	.word	0x2003e784
   d56b4:	2003e780 	.word	0x2003e780
   d56b8:	2003e77c 	.word	0x2003e77c
   d56bc:	2003e778 	.word	0x2003e778
   d56c0:	2003e774 	.word	0x2003e774
   d56c4:	2003e770 	.word	0x2003e770

000d56c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d56c8:	4b24      	ldr	r3, [pc, #144]	; (d575c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d56ca:	681a      	ldr	r2, [r3, #0]
   d56cc:	07d0      	lsls	r0, r2, #31
   d56ce:	bf5c      	itt	pl
   d56d0:	2201      	movpl	r2, #1
   d56d2:	601a      	strpl	r2, [r3, #0]
   d56d4:	4b22      	ldr	r3, [pc, #136]	; (d5760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d56d6:	681a      	ldr	r2, [r3, #0]
   d56d8:	07d1      	lsls	r1, r2, #31
   d56da:	bf5c      	itt	pl
   d56dc:	2201      	movpl	r2, #1
   d56de:	601a      	strpl	r2, [r3, #0]
   d56e0:	4b20      	ldr	r3, [pc, #128]	; (d5764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d56e2:	681a      	ldr	r2, [r3, #0]
   d56e4:	07d2      	lsls	r2, r2, #31
   d56e6:	bf5c      	itt	pl
   d56e8:	2201      	movpl	r2, #1
   d56ea:	601a      	strpl	r2, [r3, #0]
   d56ec:	4b1e      	ldr	r3, [pc, #120]	; (d5768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d56ee:	681a      	ldr	r2, [r3, #0]
   d56f0:	07d0      	lsls	r0, r2, #31
   d56f2:	bf5c      	itt	pl
   d56f4:	2201      	movpl	r2, #1
   d56f6:	601a      	strpl	r2, [r3, #0]
   d56f8:	4b1c      	ldr	r3, [pc, #112]	; (d576c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d56fa:	681a      	ldr	r2, [r3, #0]
   d56fc:	07d1      	lsls	r1, r2, #31
   d56fe:	bf5c      	itt	pl
   d5700:	2201      	movpl	r2, #1
   d5702:	601a      	strpl	r2, [r3, #0]
   d5704:	4b1a      	ldr	r3, [pc, #104]	; (d5770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5706:	681a      	ldr	r2, [r3, #0]
   d5708:	07d2      	lsls	r2, r2, #31
   d570a:	bf5c      	itt	pl
   d570c:	2201      	movpl	r2, #1
   d570e:	601a      	strpl	r2, [r3, #0]
   d5710:	4b18      	ldr	r3, [pc, #96]	; (d5774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5712:	681a      	ldr	r2, [r3, #0]
   d5714:	07d0      	lsls	r0, r2, #31
   d5716:	bf5c      	itt	pl
   d5718:	2201      	movpl	r2, #1
   d571a:	601a      	strpl	r2, [r3, #0]
   d571c:	4b16      	ldr	r3, [pc, #88]	; (d5778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d571e:	681a      	ldr	r2, [r3, #0]
   d5720:	07d1      	lsls	r1, r2, #31
   d5722:	bf5c      	itt	pl
   d5724:	2201      	movpl	r2, #1
   d5726:	601a      	strpl	r2, [r3, #0]
   d5728:	4b14      	ldr	r3, [pc, #80]	; (d577c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d572a:	681a      	ldr	r2, [r3, #0]
   d572c:	07d2      	lsls	r2, r2, #31
   d572e:	bf5c      	itt	pl
   d5730:	2201      	movpl	r2, #1
   d5732:	601a      	strpl	r2, [r3, #0]
   d5734:	4b12      	ldr	r3, [pc, #72]	; (d5780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5736:	681a      	ldr	r2, [r3, #0]
   d5738:	07d0      	lsls	r0, r2, #31
   d573a:	bf5c      	itt	pl
   d573c:	2201      	movpl	r2, #1
   d573e:	601a      	strpl	r2, [r3, #0]
   d5740:	4b10      	ldr	r3, [pc, #64]	; (d5784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5742:	681a      	ldr	r2, [r3, #0]
   d5744:	07d1      	lsls	r1, r2, #31
   d5746:	bf5c      	itt	pl
   d5748:	2201      	movpl	r2, #1
   d574a:	601a      	strpl	r2, [r3, #0]
   d574c:	4b0e      	ldr	r3, [pc, #56]	; (d5788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d574e:	681a      	ldr	r2, [r3, #0]
   d5750:	07d2      	lsls	r2, r2, #31
   d5752:	bf5c      	itt	pl
   d5754:	2201      	movpl	r2, #1
   d5756:	601a      	strpl	r2, [r3, #0]
   d5758:	4770      	bx	lr
   d575a:	bf00      	nop
   d575c:	2003e7cc 	.word	0x2003e7cc
   d5760:	2003e7c8 	.word	0x2003e7c8
   d5764:	2003e7c4 	.word	0x2003e7c4
   d5768:	2003e7c0 	.word	0x2003e7c0
   d576c:	2003e7bc 	.word	0x2003e7bc
   d5770:	2003e7b8 	.word	0x2003e7b8
   d5774:	2003e7b4 	.word	0x2003e7b4
   d5778:	2003e7b0 	.word	0x2003e7b0
   d577c:	2003e7ac 	.word	0x2003e7ac
   d5780:	2003e7a8 	.word	0x2003e7a8
   d5784:	2003e7a4 	.word	0x2003e7a4
   d5788:	2003e7a0 	.word	0x2003e7a0

000d578c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d578c:	4b18      	ldr	r3, [pc, #96]	; (d57f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d578e:	681a      	ldr	r2, [r3, #0]
   d5790:	07d1      	lsls	r1, r2, #31
   d5792:	bf5c      	itt	pl
   d5794:	2201      	movpl	r2, #1
   d5796:	601a      	strpl	r2, [r3, #0]
   d5798:	4b16      	ldr	r3, [pc, #88]	; (d57f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d579a:	681a      	ldr	r2, [r3, #0]
   d579c:	07d2      	lsls	r2, r2, #31
   d579e:	bf5c      	itt	pl
   d57a0:	2201      	movpl	r2, #1
   d57a2:	601a      	strpl	r2, [r3, #0]
   d57a4:	4b14      	ldr	r3, [pc, #80]	; (d57f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d57a6:	681a      	ldr	r2, [r3, #0]
   d57a8:	07d0      	lsls	r0, r2, #31
   d57aa:	bf5c      	itt	pl
   d57ac:	2201      	movpl	r2, #1
   d57ae:	601a      	strpl	r2, [r3, #0]
   d57b0:	4b12      	ldr	r3, [pc, #72]	; (d57fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d57b2:	681a      	ldr	r2, [r3, #0]
   d57b4:	07d1      	lsls	r1, r2, #31
   d57b6:	bf5c      	itt	pl
   d57b8:	2201      	movpl	r2, #1
   d57ba:	601a      	strpl	r2, [r3, #0]
   d57bc:	4b10      	ldr	r3, [pc, #64]	; (d5800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d57be:	681a      	ldr	r2, [r3, #0]
   d57c0:	07d2      	lsls	r2, r2, #31
   d57c2:	bf5c      	itt	pl
   d57c4:	2201      	movpl	r2, #1
   d57c6:	601a      	strpl	r2, [r3, #0]
   d57c8:	4b0e      	ldr	r3, [pc, #56]	; (d5804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d57ca:	681a      	ldr	r2, [r3, #0]
   d57cc:	07d0      	lsls	r0, r2, #31
   d57ce:	bf5c      	itt	pl
   d57d0:	2201      	movpl	r2, #1
   d57d2:	601a      	strpl	r2, [r3, #0]
   d57d4:	4b0c      	ldr	r3, [pc, #48]	; (d5808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d57d6:	681a      	ldr	r2, [r3, #0]
   d57d8:	07d1      	lsls	r1, r2, #31
   d57da:	bf5c      	itt	pl
   d57dc:	2201      	movpl	r2, #1
   d57de:	601a      	strpl	r2, [r3, #0]
   d57e0:	4b0a      	ldr	r3, [pc, #40]	; (d580c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d57e2:	681a      	ldr	r2, [r3, #0]
   d57e4:	07d2      	lsls	r2, r2, #31
   d57e6:	bf5c      	itt	pl
   d57e8:	2201      	movpl	r2, #1
   d57ea:	601a      	strpl	r2, [r3, #0]
   d57ec:	4770      	bx	lr
   d57ee:	bf00      	nop
   d57f0:	2003e7ec 	.word	0x2003e7ec
   d57f4:	2003e7e8 	.word	0x2003e7e8
   d57f8:	2003e7e4 	.word	0x2003e7e4
   d57fc:	2003e7e0 	.word	0x2003e7e0
   d5800:	2003e7dc 	.word	0x2003e7dc
   d5804:	2003e7d8 	.word	0x2003e7d8
   d5808:	2003e7d4 	.word	0x2003e7d4
   d580c:	2003e7d0 	.word	0x2003e7d0

000d5810 <__cxa_atexit>:
   d5810:	b510      	push	{r4, lr}
   d5812:	4c05      	ldr	r4, [pc, #20]	; (d5828 <__cxa_atexit+0x18>)
   d5814:	4613      	mov	r3, r2
   d5816:	b12c      	cbz	r4, d5824 <__cxa_atexit+0x14>
   d5818:	460a      	mov	r2, r1
   d581a:	4601      	mov	r1, r0
   d581c:	2002      	movs	r0, #2
   d581e:	f3af 8000 	nop.w
   d5822:	bd10      	pop	{r4, pc}
   d5824:	4620      	mov	r0, r4
   d5826:	bd10      	pop	{r4, pc}
   d5828:	00000000 	.word	0x00000000

000d582c <memcpy>:
   d582c:	b510      	push	{r4, lr}
   d582e:	1e43      	subs	r3, r0, #1
   d5830:	440a      	add	r2, r1
   d5832:	4291      	cmp	r1, r2
   d5834:	d004      	beq.n	d5840 <memcpy+0x14>
   d5836:	f811 4b01 	ldrb.w	r4, [r1], #1
   d583a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d583e:	e7f8      	b.n	d5832 <memcpy+0x6>
   d5840:	bd10      	pop	{r4, pc}

000d5842 <memset>:
   d5842:	4402      	add	r2, r0
   d5844:	4603      	mov	r3, r0
   d5846:	4293      	cmp	r3, r2
   d5848:	d002      	beq.n	d5850 <memset+0xe>
   d584a:	f803 1b01 	strb.w	r1, [r3], #1
   d584e:	e7fa      	b.n	d5846 <memset+0x4>
   d5850:	4770      	bx	lr
	...

000d5854 <srand>:
   d5854:	b538      	push	{r3, r4, r5, lr}
   d5856:	4b12      	ldr	r3, [pc, #72]	; (d58a0 <srand+0x4c>)
   d5858:	681c      	ldr	r4, [r3, #0]
   d585a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d585c:	4605      	mov	r5, r0
   d585e:	b9d3      	cbnz	r3, d5896 <srand+0x42>
   d5860:	2018      	movs	r0, #24
   d5862:	f7ff f8db 	bl	d4a1c <malloc>
   d5866:	f243 330e 	movw	r3, #13070	; 0x330e
   d586a:	63a0      	str	r0, [r4, #56]	; 0x38
   d586c:	8003      	strh	r3, [r0, #0]
   d586e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5872:	8043      	strh	r3, [r0, #2]
   d5874:	f241 2334 	movw	r3, #4660	; 0x1234
   d5878:	8083      	strh	r3, [r0, #4]
   d587a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d587e:	80c3      	strh	r3, [r0, #6]
   d5880:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5884:	8103      	strh	r3, [r0, #8]
   d5886:	2305      	movs	r3, #5
   d5888:	8143      	strh	r3, [r0, #10]
   d588a:	230b      	movs	r3, #11
   d588c:	8183      	strh	r3, [r0, #12]
   d588e:	2201      	movs	r2, #1
   d5890:	2300      	movs	r3, #0
   d5892:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5896:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5898:	2200      	movs	r2, #0
   d589a:	611d      	str	r5, [r3, #16]
   d589c:	615a      	str	r2, [r3, #20]
   d589e:	bd38      	pop	{r3, r4, r5, pc}
   d58a0:	2003e3a4 	.word	0x2003e3a4

000d58a4 <strlen>:
   d58a4:	4603      	mov	r3, r0
   d58a6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d58aa:	2a00      	cmp	r2, #0
   d58ac:	d1fb      	bne.n	d58a6 <strlen+0x2>
   d58ae:	1a18      	subs	r0, r3, r0
   d58b0:	3801      	subs	r0, #1
   d58b2:	4770      	bx	lr

000d58b4 <dynalib_user>:
   d58b4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d58c4:	0000 0000 c000 4001 1000 4002 2000 4002     .......@...@. .@

000d58d4 <CSWTCH.65>:
   d58d4:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d58e4:	0050 0000                                   P...

000d58e8 <_ZTVN5spark13EthernetClassE>:
	...
   d58f0:	4a9b 000d 4a91 000d 4a87 000d 4a7d 000d     .J...J...J..}J..
   d5900:	4a71 000d 4a65 000d 4a59 000d 4a51 000d     qJ..eJ..YJ..QJ..
   d5910:	4a47 000d 4a3d 000d 531d 000d 6162 6475     GJ..=J...S..baud
   d5920:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5930:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5940:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5950:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5960:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5970:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5980:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5990:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d59a0:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d59b0:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d59c0:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d59d0:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d59e0:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d59f0:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d5a00:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d5a10:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d5a20:	7463 6d69 0065 0000                         ctime...

000d5a28 <_ZTV9IPAddress>:
	...
   d5a30:	4d59 000d 4d49 000d 4d4b 000d               YM..IM..KM..

000d5a3c <_ZTV9USBSerial>:
	...
   d5a44:	4e31 000d 4e81 000d 4e8f 000d 4b41 000d     1N...N...N..AK..
   d5a54:	4e6d 000d 4e33 000d 4e49 000d 4e7b 000d     mN..3N..IN..{N..
   d5a64:	4e5f 000d 4e2d 000d                         _N..-N..

000d5a6c <_ZTV11USARTSerial>:
	...
   d5a74:	4f35 000d 4f85 000d 4f93 000d 4b41 000d     5O...O...O..AK..
   d5a84:	4f49 000d 4f6b 000d 4f57 000d 4f7f 000d     IO..kO..WO...O..
   d5a94:	4f37 000d 4f3b 000d                         7O..;O..

000d5a9c <_ZTV7TwoWire>:
	...
   d5aa4:	5039 000d 5083 000d 505b 000d 503b 000d     9P...P..[P..;P..
   d5ab4:	5063 000d 506b 000d 5073 000d 507b 000d     cP..kP..sP..{P..

000d5ac4 <_ZTVN5spark9MeshClassE>:
	...
   d5acc:	511b 000d 5111 000d 5107 000d 50fd 000d     .Q...Q...Q...P..
   d5adc:	50f1 000d 50e5 000d 50d9 000d 50d1 000d     .P...P...P...P..
   d5aec:	50c7 000d 50bd 000d 531d 000d               .P...P...S..

000d5af8 <_ZTVN5spark9WiFiClassE>:
	...
   d5b00:	5297 000d 528d 000d 5283 000d 5239 000d     .R...R...R..9R..
   d5b10:	5277 000d 526b 000d 525f 000d 5257 000d     wR..kR.._R..WR..
   d5b20:	524d 000d 5243 000d 531d 000d               MR..CR...S..

000d5b2c <_ZTVN5spark12NetworkClassE>:
	...
   d5b34:	52b5 000d 52bf 000d 52c9 000d 52d3 000d     .R...R...R...R..
   d5b44:	52dd 000d 52e9 000d 52f5 000d 5301 000d     .R...R...R...S..
   d5b54:	5309 000d 5313 000d 531d 000d               .S...S...S..

000d5b60 <_ZSt7nothrow>:
   d5b60:	0000 0000                                   ....

000d5b64 <__sf_fake_stdin>:
	...

000d5b84 <__sf_fake_stdout>:
	...

000d5ba4 <__sf_fake_stderr>:
	...
   d5bc4:	0043                                        C.

000d5bc6 <link_const_variable_data_end>:
	...

000d5bc8 <link_constructors_location>:
   d5bc8:	000d4191 	.word	0x000d4191
   d5bcc:	000d41ed 	.word	0x000d41ed
   d5bd0:	000d46a1 	.word	0x000d46a1
   d5bd4:	000d4aa5 	.word	0x000d4aa5
   d5bd8:	000d4ad5 	.word	0x000d4ad5
   d5bdc:	000d4b19 	.word	0x000d4b19
   d5be0:	000d4bd5 	.word	0x000d4bd5
   d5be4:	000d4be5 	.word	0x000d4be5
   d5be8:	000d4c1d 	.word	0x000d4c1d
   d5bec:	000d51e9 	.word	0x000d51e9
   d5bf0:	000d52a1 	.word	0x000d52a1
   d5bf4:	000d53e9 	.word	0x000d53e9
   d5bf8:	000d5581 	.word	0x000d5581
   d5bfc:	000d5605 	.word	0x000d5605
   d5c00:	000d56c9 	.word	0x000d56c9
   d5c04:	000d578d 	.word	0x000d578d

000d5c08 <link_constructors_end>:
	...
