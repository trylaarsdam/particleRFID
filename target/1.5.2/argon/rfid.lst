
d:/Dev/rfid/target/1.5.2/argon/rfid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002f64  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6f80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e318  000d6f84  0001e318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000470  2003e380  2003e380  0002e380  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6fec  000d6fec  00026fec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7014  000d7014  00027014  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d7948  00000000  00000000  00027018  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010db9  00000000  00000000  000fe960  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f2fe  00000000  00000000  0010f719  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002450  00000000  00000000  0012ea17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000045e8  00000000  00000000  00130e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035190  00000000  00000000  0013544f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00029782  00000000  00000000  0016a5df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101e6f  00000000  00000000  00193d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cc34  00000000  00000000  00295bd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fcdf 	bl	d69f0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fce4 	bl	d6a06 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e318 	.word	0x2003e318
   d4048:	000d6f84 	.word	0x000d6f84
   d404c:	2003e380 	.word	0x2003e380
   d4050:	2003e380 	.word	0x2003e380
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fef9 	bl	d5e50 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6f7c 	.word	0x000d6f7c
   d4080:	000d6f3c 	.word	0x000d6f3c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b84e 	b.w	d4124 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fc8f 	bl	d49ac <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 be9f 	b.w	d5dd4 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 bd43 	b.w	d5b20 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 bd41 	b.w	d5b20 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f001 fd33 	bl	d5b20 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}

000d40be <_ZN11EEPROMClass4readEi.isra.1>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d40be:	f001 bbab 	b.w	d5818 <HAL_EEPROM_Read>

000d40c2 <_ZN11EEPROMClass5writeEih.isra.2>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d40c2:	f001 bbb1 	b.w	d5828 <HAL_EEPROM_Write>
	...

000d40c8 <_Z5getIDv>:
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();    
  }
}

uint8_t getID() {
   d40c8:	b570      	push	{r4, r5, r6, lr}
  if(!mfrc522.PICC_IsNewCardPresent()){
   d40ca:	4812      	ldr	r0, [pc, #72]	; (d4114 <_Z5getIDv+0x4c>)
   d40cc:	f000 ff25 	bl	d4f1a <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   d40d0:	b908      	cbnz	r0, d40d6 <_Z5getIDv+0xe>
    return 0;
   d40d2:	2000      	movs	r0, #0
   d40d4:	bd70      	pop	{r4, r5, r6, pc}
  }
  if(!mfrc522.PICC_ReadCardSerial()){
   d40d6:	480f      	ldr	r0, [pc, #60]	; (d4114 <_Z5getIDv+0x4c>)
   d40d8:	f001 f87d 	bl	d51d6 <_ZN7MFRC52219PICC_ReadCardSerialEv>
   d40dc:	2800      	cmp	r0, #0
   d40de:	d0f8      	beq.n	d40d2 <_Z5getIDv+0xa>
   d40e0:	4c0d      	ldr	r4, [pc, #52]	; (d4118 <_Z5getIDv+0x50>)
   d40e2:	4d0e      	ldr	r5, [pc, #56]	; (d411c <_Z5getIDv+0x54>)
   d40e4:	1d26      	adds	r6, r4, #4
    return 0;
  }
  for ( uint8_t i = 0; i < 4; i++) {  //
    readCard[i] = mfrc522.uid.uidByte[i];
   d40e6:	f815 3b01 	ldrb.w	r3, [r5], #1
   d40ea:	f804 3f01 	strb.w	r3, [r4, #1]!
    Serial.print(readCard[i], HEX);
   d40ee:	f001 ffb5 	bl	d605c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d40f2:	2210      	movs	r2, #16
   d40f4:	7821      	ldrb	r1, [r4, #0]
   d40f6:	f001 fdfc 	bl	d5cf2 <_ZN5Print11printNumberEmh>
    return 0;
  }
  if(!mfrc522.PICC_ReadCardSerial()){
    return 0;
  }
  for ( uint8_t i = 0; i < 4; i++) {  //
   d40fa:	42b4      	cmp	r4, r6
   d40fc:	d1f3      	bne.n	d40e6 <_Z5getIDv+0x1e>
    readCard[i] = mfrc522.uid.uidByte[i];
    Serial.print(readCard[i], HEX);
  }
  Serial.println("");
   d40fe:	f001 ffad 	bl	d605c <_Z16_fetch_usbserialv>
   d4102:	4907      	ldr	r1, [pc, #28]	; (d4120 <_Z5getIDv+0x58>)
   d4104:	f001 fdeb 	bl	d5cde <_ZN5Print7printlnEPKc>
  mfrc522.PICC_HaltA(); // Stop reading
   d4108:	4802      	ldr	r0, [pc, #8]	; (d4114 <_Z5getIDv+0x4c>)
   d410a:	f001 f86d 	bl	d51e8 <_ZN7MFRC52210PICC_HaltAEv>
   d410e:	2001      	movs	r0, #1
  return 1;
}
   d4110:	bd70      	pop	{r4, r5, r6, pc}
   d4112:	bf00      	nop
   d4114:	2003e3a0 	.word	0x2003e3a0
   d4118:	2003e3b1 	.word	0x2003e3b1
   d411c:	2003e3a1 	.word	0x2003e3a1
   d4120:	000d6d37 	.word	0x000d6d37

000d4124 <setup>:
byte masterCard[4];
byte storedCard[4];   // Stores an ID read from EEPROM


// setup() runs once, when the device is first turned on.
void setup() {
   d4124:	b570      	push	{r4, r5, r6, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(D3, OUTPUT);
   d4126:	2101      	movs	r1, #1
   d4128:	2003      	movs	r0, #3
   d412a:	f002 fa57 	bl	d65dc <pinMode>
  pinMode(EEPROMRESET, INPUT);
   d412e:	2100      	movs	r1, #0
   d4130:	2002      	movs	r0, #2
   d4132:	f002 fa53 	bl	d65dc <pinMode>


  Serial.begin(9600);
   d4136:	f001 ff91 	bl	d605c <_Z16_fetch_usbserialv>
   d413a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d413e:	f001 ff7b 	bl	d6038 <_ZN9USBSerial5beginEl>
  while(!Serial);
   d4142:	f001 ff8b 	bl	d605c <_Z16_fetch_usbserialv>
   d4146:	f001 ff7e 	bl	d6046 <_ZN9USBSerialcvbEv>
   d414a:	2800      	cmp	r0, #0
   d414c:	d0f9      	beq.n	d4142 <setup+0x1e>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d414e:	4d88      	ldr	r5, [pc, #544]	; (d4370 <setup+0x24c>)
   d4150:	6829      	ldr	r1, [r5, #0]
   d4152:	f011 0401 	ands.w	r4, r1, #1
   d4156:	d10a      	bne.n	d416e <setup+0x4a>
   d4158:	4628      	mov	r0, r5
   d415a:	f7ff ffa0 	bl	d409e <__cxa_guard_acquire>
   d415e:	b130      	cbz	r0, d416e <setup+0x4a>
   d4160:	4621      	mov	r1, r4
   d4162:	4884      	ldr	r0, [pc, #528]	; (d4374 <setup+0x250>)
   d4164:	f001 fd28 	bl	d5bb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4168:	4628      	mov	r0, r5
   d416a:	f7ff ff9d 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }

    void begin() {
        instance().begin();
   d416e:	4881      	ldr	r0, [pc, #516]	; (d4374 <setup+0x250>)
   d4170:	f001 fd2c 	bl	d5bcc <_ZN8SPIClass5beginEv>
  SPI.begin();
  mfrc522.PCD_Init();
   d4174:	4880      	ldr	r0, [pc, #512]	; (d4378 <setup+0x254>)
   d4176:	f000 fd5d 	bl	d4c34 <_ZN7MFRC5228PCD_InitEv>
  pixels.begin();
   d417a:	4880      	ldr	r0, [pc, #512]	; (d437c <setup+0x258>)
   d417c:	f001 f88a 	bl	d5294 <_ZN17Adafruit_NeoPixel5beginEv>
  delay(1000);
   d4180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4184:	f001 fde8 	bl	d5d58 <delay>
  if(digitalRead(EEPROMRESET) == HIGH){
   d4188:	2002      	movs	r0, #2
   d418a:	f002 fa51 	bl	d6630 <digitalRead>
   d418e:	2801      	cmp	r0, #1
   d4190:	d126      	bne.n	d41e0 <setup+0xbc>
    Serial.println("CLEARING EEPROM");
   d4192:	f001 ff63 	bl	d605c <_Z16_fetch_usbserialv>
   d4196:	497a      	ldr	r1, [pc, #488]	; (d4380 <setup+0x25c>)
   d4198:	f001 fda1 	bl	d5cde <_ZN5Print7printlnEPKc>
    EEPROM.clear();
   d419c:	f002 fa5c 	bl	d6658 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    void clear()
    {
        HAL_EEPROM_Clear();
   d41a0:	f001 fb4a 	bl	d5838 <HAL_EEPROM_Clear>
    EEPROM.write(0, 0);
   d41a4:	f002 fa58 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d41a8:	2100      	movs	r1, #0
   d41aa:	4608      	mov	r0, r1
   d41ac:	f7ff ff89 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.2>
    for(int i=0; i<NUMPIXELS; i = i + 2){
   d41b0:	2400      	movs	r4, #0
      pixels.setPixelColor(i, pixels.Color(0,0,255));
   d41b2:	2100      	movs	r1, #0
   d41b4:	22ff      	movs	r2, #255	; 0xff
   d41b6:	4608      	mov	r0, r1
   d41b8:	f001 fa8f 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d41bc:	b2a1      	uxth	r1, r4
   d41be:	4602      	mov	r2, r0
   d41c0:	486e      	ldr	r0, [pc, #440]	; (d437c <setup+0x258>)
   d41c2:	f001 fa3f 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      pixels.show();
   d41c6:	486d      	ldr	r0, [pc, #436]	; (d437c <setup+0x258>)
   d41c8:	f001 f89a 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
  delay(1000);
  if(digitalRead(EEPROMRESET) == HIGH){
    Serial.println("CLEARING EEPROM");
    EEPROM.clear();
    EEPROM.write(0, 0);
    for(int i=0; i<NUMPIXELS; i = i + 2){
   d41cc:	3402      	adds	r4, #2
      pixels.setPixelColor(i, pixels.Color(0,0,255));
      pixels.show();
      delay(100);
   d41ce:	2064      	movs	r0, #100	; 0x64
   d41d0:	f001 fdc2 	bl	d5d58 <delay>
  delay(1000);
  if(digitalRead(EEPROMRESET) == HIGH){
    Serial.println("CLEARING EEPROM");
    EEPROM.clear();
    EEPROM.write(0, 0);
    for(int i=0; i<NUMPIXELS; i = i + 2){
   d41d4:	2c0c      	cmp	r4, #12
   d41d6:	d1ec      	bne.n	d41b2 <setup+0x8e>
      pixels.setPixelColor(i, pixels.Color(0,0,255));
      pixels.show();
      delay(100);
    }
    delay(500);
   d41d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d41dc:	f001 fdbc 	bl	d5d58 <delay>
  }

  if(EEPROM.read(1) != 143) {
   d41e0:	f002 fa3a 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d41e4:	2001      	movs	r0, #1
   d41e6:	f7ff ff6a 	bl	d40be <_ZN11EEPROMClass4readEi.isra.1>
   d41ea:	288f      	cmp	r0, #143	; 0x8f
   d41ec:	f000 8089 	beq.w	d4302 <setup+0x1de>
    Serial.println("No master card defined");
   d41f0:	f001 ff34 	bl	d605c <_Z16_fetch_usbserialv>
   d41f4:	4963      	ldr	r1, [pc, #396]	; (d4384 <setup+0x260>)
    Serial.println(EEPROM.read(1));
    Serial.println("Scan card to define as master card.");
    do {
      successRead = getID();
   d41f6:	4d64      	ldr	r5, [pc, #400]	; (d4388 <setup+0x264>)
    }
    delay(500);
  }

  if(EEPROM.read(1) != 143) {
    Serial.println("No master card defined");
   d41f8:	f001 fd71 	bl	d5cde <_ZN5Print7printlnEPKc>
    Serial.println(EEPROM.read(1));
   d41fc:	f001 ff2e 	bl	d605c <_Z16_fetch_usbserialv>
   d4200:	4604      	mov	r4, r0
   d4202:	f002 fa29 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d4206:	2001      	movs	r0, #1
   d4208:	f7ff ff59 	bl	d40be <_ZN11EEPROMClass4readEi.isra.1>
   d420c:	220a      	movs	r2, #10
   d420e:	4601      	mov	r1, r0
   d4210:	4620      	mov	r0, r4
   d4212:	f001 fd6e 	bl	d5cf2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4216:	4620      	mov	r0, r4
   d4218:	f001 fd55 	bl	d5cc6 <_ZN5Print7printlnEv>
    Serial.println("Scan card to define as master card.");
   d421c:	f001 ff1e 	bl	d605c <_Z16_fetch_usbserialv>
   d4220:	495a      	ldr	r1, [pc, #360]	; (d438c <setup+0x268>)
   d4222:	f001 fd5c 	bl	d5cde <_ZN5Print7printlnEPKc>
   d4226:	462e      	mov	r6, r5
    do {
      successRead = getID();
   d4228:	f7ff ff4e 	bl	d40c8 <_Z5getIDv>
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d422c:	2400      	movs	r4, #0
  if(EEPROM.read(1) != 143) {
    Serial.println("No master card defined");
    Serial.println(EEPROM.read(1));
    Serial.println("Scan card to define as master card.");
    do {
      successRead = getID();
   d422e:	7028      	strb	r0, [r5, #0]
      for(int i=0; i<NUMPIXELS; i = i + 2){
        pixels.setPixelColor(i, pixels.Color(0,50,50));
   d4230:	2232      	movs	r2, #50	; 0x32
   d4232:	4611      	mov	r1, r2
   d4234:	2000      	movs	r0, #0
   d4236:	f001 fa50 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d423a:	b2a1      	uxth	r1, r4
   d423c:	4602      	mov	r2, r0
   d423e:	484f      	ldr	r0, [pc, #316]	; (d437c <setup+0x258>)
   d4240:	f001 fa00 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    Serial.println("No master card defined");
    Serial.println(EEPROM.read(1));
    Serial.println("Scan card to define as master card.");
    do {
      successRead = getID();
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d4244:	3402      	adds	r4, #2
        pixels.setPixelColor(i, pixels.Color(0,50,50));
        pixels.show();
   d4246:	484d      	ldr	r0, [pc, #308]	; (d437c <setup+0x258>)
   d4248:	f001 f85a 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
    Serial.println("No master card defined");
    Serial.println(EEPROM.read(1));
    Serial.println("Scan card to define as master card.");
    do {
      successRead = getID();
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d424c:	2c0c      	cmp	r4, #12
   d424e:	d1ef      	bne.n	d4230 <setup+0x10c>
        pixels.setPixelColor(i, pixels.Color(0,50,50));
        pixels.show();
      }
      delay(500);
   d4250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4254:	f001 fd80 	bl	d5d58 <delay>
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d4258:	2400      	movs	r4, #0
        pixels.setPixelColor(i, pixels.Color(0,0,50));
   d425a:	2100      	movs	r1, #0
   d425c:	2232      	movs	r2, #50	; 0x32
   d425e:	4608      	mov	r0, r1
   d4260:	f001 fa3b 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4264:	b2a1      	uxth	r1, r4
   d4266:	4602      	mov	r2, r0
   d4268:	4844      	ldr	r0, [pc, #272]	; (d437c <setup+0x258>)
   d426a:	f001 f9eb 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for(int i=0; i<NUMPIXELS; i = i + 2){
        pixels.setPixelColor(i, pixels.Color(0,50,50));
        pixels.show();
      }
      delay(500);
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d426e:	3402      	adds	r4, #2
        pixels.setPixelColor(i, pixels.Color(0,0,50));
        pixels.show();
   d4270:	4842      	ldr	r0, [pc, #264]	; (d437c <setup+0x258>)
   d4272:	f001 f845 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
      for(int i=0; i<NUMPIXELS; i = i + 2){
        pixels.setPixelColor(i, pixels.Color(0,50,50));
        pixels.show();
      }
      delay(500);
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d4276:	2c0c      	cmp	r4, #12
   d4278:	d1ef      	bne.n	d425a <setup+0x136>
        pixels.setPixelColor(i, pixels.Color(0,0,50));
        pixels.show();
      }
      delay(500);
   d427a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d427e:	f001 fd6b 	bl	d5d58 <delay>
    }
    while(!successRead);
   d4282:	7833      	ldrb	r3, [r6, #0]
   d4284:	2b00      	cmp	r3, #0
   d4286:	d0cf      	beq.n	d4228 <setup+0x104>
    successRead = false;
   d4288:	4b3f      	ldr	r3, [pc, #252]	; (d4388 <setup+0x264>)
    for(uint8_t j=0; j<4; j++){
      EEPROM.write(2+j, readCard[j]);
   d428a:	4d41      	ldr	r5, [pc, #260]	; (d4390 <setup+0x26c>)
        pixels.show();
      }
      delay(500);
    }
    while(!successRead);
    successRead = false;
   d428c:	2200      	movs	r2, #0
   d428e:	701a      	strb	r2, [r3, #0]
   d4290:	2402      	movs	r4, #2
    for(uint8_t j=0; j<4; j++){
      EEPROM.write(2+j, readCard[j]);
   d4292:	f002 f9e1 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d4296:	192b      	adds	r3, r5, r4
   d4298:	4620      	mov	r0, r4
   d429a:	f813 1c02 	ldrb.w	r1, [r3, #-2]
   d429e:	3401      	adds	r4, #1
   d42a0:	f7ff ff0f 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.2>
      }
      delay(500);
    }
    while(!successRead);
    successRead = false;
    for(uint8_t j=0; j<4; j++){
   d42a4:	2c06      	cmp	r4, #6
   d42a6:	d1f4      	bne.n	d4292 <setup+0x16e>
      EEPROM.write(2+j, readCard[j]);
    }
    for(uint8_t i=0; i<4; i++){
      masterCard[i] = EEPROM.read(2+i);
   d42a8:	4d3a      	ldr	r5, [pc, #232]	; (d4394 <setup+0x270>)
   d42aa:	2402      	movs	r4, #2
   d42ac:	f002 f9d4 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d42b0:	4620      	mov	r0, r4
   d42b2:	f7ff ff04 	bl	d40be <_ZN11EEPROMClass4readEi.isra.1>
   d42b6:	192b      	adds	r3, r5, r4
   d42b8:	3401      	adds	r4, #1
    while(!successRead);
    successRead = false;
    for(uint8_t j=0; j<4; j++){
      EEPROM.write(2+j, readCard[j]);
    }
    for(uint8_t i=0; i<4; i++){
   d42ba:	2c06      	cmp	r4, #6
      masterCard[i] = EEPROM.read(2+i);
   d42bc:	f803 0c02 	strb.w	r0, [r3, #-2]
    while(!successRead);
    successRead = false;
    for(uint8_t j=0; j<4; j++){
      EEPROM.write(2+j, readCard[j]);
    }
    for(uint8_t i=0; i<4; i++){
   d42c0:	d1f4      	bne.n	d42ac <setup+0x188>
      masterCard[i] = EEPROM.read(2+i);
    }
    EEPROM.write(1,(uint8_t)143);
   d42c2:	f002 f9c9 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d42c6:	218f      	movs	r1, #143	; 0x8f
   d42c8:	2001      	movs	r0, #1
   d42ca:	f7ff fefa 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.2>
    Serial.println("Master Card Defined");
   d42ce:	f001 fec5 	bl	d605c <_Z16_fetch_usbserialv>
   d42d2:	4931      	ldr	r1, [pc, #196]	; (d4398 <setup+0x274>)
   d42d4:	f001 fd03 	bl	d5cde <_ZN5Print7printlnEPKc>
    for(int i=0; i<NUMPIXELS; i = i + 2){
   d42d8:	2400      	movs	r4, #0
      pixels.setPixelColor(i, pixels.Color(0,50,0));
   d42da:	2200      	movs	r2, #0
   d42dc:	2132      	movs	r1, #50	; 0x32
   d42de:	4610      	mov	r0, r2
   d42e0:	f001 f9fb 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d42e4:	b2a1      	uxth	r1, r4
   d42e6:	4602      	mov	r2, r0
   d42e8:	4824      	ldr	r0, [pc, #144]	; (d437c <setup+0x258>)
   d42ea:	f001 f9ab 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for(uint8_t i=0; i<4; i++){
      masterCard[i] = EEPROM.read(2+i);
    }
    EEPROM.write(1,(uint8_t)143);
    Serial.println("Master Card Defined");
    for(int i=0; i<NUMPIXELS; i = i + 2){
   d42ee:	3402      	adds	r4, #2
      pixels.setPixelColor(i, pixels.Color(0,50,0));
      pixels.show();
   d42f0:	4822      	ldr	r0, [pc, #136]	; (d437c <setup+0x258>)
   d42f2:	f001 f805 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
    for(uint8_t i=0; i<4; i++){
      masterCard[i] = EEPROM.read(2+i);
    }
    EEPROM.write(1,(uint8_t)143);
    Serial.println("Master Card Defined");
    for(int i=0; i<NUMPIXELS; i = i + 2){
   d42f6:	2c0c      	cmp	r4, #12
   d42f8:	d1ef      	bne.n	d42da <setup+0x1b6>
      pixels.setPixelColor(i, pixels.Color(0,50,0));
      pixels.show();
    }
    delay(500);
   d42fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d42fe:	f001 fd2b 	bl	d5d58 <delay>
  }
  for(uint8_t i=0; i<4; i++){
    masterCard[i] = EEPROM.read(2+i);
   d4302:	4d24      	ldr	r5, [pc, #144]	; (d4394 <setup+0x270>)
    for(uint8_t i=0; i<4; i++){
      masterCard[i] = EEPROM.read(2+i);
    }
    EEPROM.write(1,(uint8_t)143);
    Serial.println("Master Card Defined");
    for(int i=0; i<NUMPIXELS; i = i + 2){
   d4304:	2402      	movs	r4, #2
      pixels.show();
    }
    delay(500);
  }
  for(uint8_t i=0; i<4; i++){
    masterCard[i] = EEPROM.read(2+i);
   d4306:	f002 f9a7 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d430a:	4620      	mov	r0, r4
   d430c:	f7ff fed7 	bl	d40be <_ZN11EEPROMClass4readEi.isra.1>
   d4310:	192b      	adds	r3, r5, r4
   d4312:	3401      	adds	r4, #1
      pixels.setPixelColor(i, pixels.Color(0,50,0));
      pixels.show();
    }
    delay(500);
  }
  for(uint8_t i=0; i<4; i++){
   d4314:	2c06      	cmp	r4, #6
    masterCard[i] = EEPROM.read(2+i);
   d4316:	f803 0c02 	strb.w	r0, [r3, #-2]
   d431a:	4e1e      	ldr	r6, [pc, #120]	; (d4394 <setup+0x270>)
      pixels.setPixelColor(i, pixels.Color(0,50,0));
      pixels.show();
    }
    delay(500);
  }
  for(uint8_t i=0; i<4; i++){
   d431c:	d1f3      	bne.n	d4306 <setup+0x1e2>
    masterCard[i] = EEPROM.read(2+i);
  }
  Serial.print("Master card stored: ");
   d431e:	f001 fe9d 	bl	d605c <_Z16_fetch_usbserialv>
   d4322:	491e      	ldr	r1, [pc, #120]	; (d439c <setup+0x278>)
   d4324:	f001 fcc8 	bl	d5cb8 <_ZN5Print5printEPKc>
   d4328:	2400      	movs	r4, #0
  for(uint8_t i=0; i<4; i++){
    Serial.println(masterCard[i]);
   d432a:	f001 fe97 	bl	d605c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d432e:	5d31      	ldrb	r1, [r6, r4]
   d4330:	4605      	mov	r5, r0
   d4332:	220a      	movs	r2, #10
   d4334:	f001 fcdd 	bl	d5cf2 <_ZN5Print11printNumberEmh>
   d4338:	3401      	adds	r4, #1
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d433a:	4628      	mov	r0, r5
   d433c:	f001 fcc3 	bl	d5cc6 <_ZN5Print7printlnEv>
  }
  for(uint8_t i=0; i<4; i++){
    masterCard[i] = EEPROM.read(2+i);
  }
  Serial.print("Master card stored: ");
  for(uint8_t i=0; i<4; i++){
   d4340:	2c04      	cmp	r4, #4
   d4342:	d1f2      	bne.n	d432a <setup+0x206>
    Serial.println(masterCard[i]);
  }
  Serial.println();
   d4344:	f001 fe8a 	bl	d605c <_Z16_fetch_usbserialv>
   d4348:	f001 fcbd 	bl	d5cc6 <_ZN5Print7printlnEv>
  for(int i=0; i<NUMPIXELS; i++){
   d434c:	2400      	movs	r4, #0
    pixels.setPixelColor(i, pixels.Color(0,0,0));
   d434e:	2200      	movs	r2, #0
   d4350:	4611      	mov	r1, r2
   d4352:	4610      	mov	r0, r2
   d4354:	f001 f9c1 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4358:	b2a1      	uxth	r1, r4
   d435a:	4602      	mov	r2, r0
   d435c:	4807      	ldr	r0, [pc, #28]	; (d437c <setup+0x258>)
   d435e:	f001 f971 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  Serial.print("Master card stored: ");
  for(uint8_t i=0; i<4; i++){
    Serial.println(masterCard[i]);
  }
  Serial.println();
  for(int i=0; i<NUMPIXELS; i++){
   d4362:	3401      	adds	r4, #1
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();    
   d4364:	4805      	ldr	r0, [pc, #20]	; (d437c <setup+0x258>)
   d4366:	f000 ffcb 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
  Serial.print("Master card stored: ");
  for(uint8_t i=0; i<4; i++){
    Serial.println(masterCard[i]);
  }
  Serial.println();
  for(int i=0; i<NUMPIXELS; i++){
   d436a:	2c0c      	cmp	r4, #12
   d436c:	d1ef      	bne.n	d434e <setup+0x22a>
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();    
  }
}
   d436e:	bd70      	pop	{r4, r5, r6, pc}
   d4370:	2003e384 	.word	0x2003e384
   d4374:	2003e388 	.word	0x2003e388
   d4378:	2003e3a0 	.word	0x2003e3a0
   d437c:	2003e3b8 	.word	0x2003e3b8
   d4380:	000d6a8c 	.word	0x000d6a8c
   d4384:	000d6a9c 	.word	0x000d6a9c
   d4388:	2003e391 	.word	0x2003e391
   d438c:	000d6ab3 	.word	0x000d6ab3
   d4390:	2003e3b2 	.word	0x2003e3b2
   d4394:	2003e3ae 	.word	0x2003e3ae
   d4398:	000d6ad7 	.word	0x000d6ad7
   d439c:	000d6aeb 	.word	0x000d6aeb

000d43a0 <_Z6readIDh>:
  mfrc522.PICC_HaltA(); // Stop reading
  return 1;
}

void readID( uint8_t number ) {
  uint8_t start = (number * 4 ) + 2;    // Figure out starting position
   d43a0:	0080      	lsls	r0, r0, #2
  Serial.println("");
  mfrc522.PICC_HaltA(); // Stop reading
  return 1;
}

void readID( uint8_t number ) {
   d43a2:	b570      	push	{r4, r5, r6, lr}
  uint8_t start = (number * 4 ) + 2;    // Figure out starting position
   d43a4:	1c85      	adds	r5, r0, #2
  for ( uint8_t i = 0; i < 4; i++ ) {     // Loop 4 times to get the 4 Bytes
    storedCard[i] = EEPROM.read(start + i);   // Assign values read from EEPROM to array
   d43a6:	4e06      	ldr	r6, [pc, #24]	; (d43c0 <_Z6readIDh+0x20>)
  mfrc522.PICC_HaltA(); // Stop reading
  return 1;
}

void readID( uint8_t number ) {
  uint8_t start = (number * 4 ) + 2;    // Figure out starting position
   d43a8:	b2ed      	uxtb	r5, r5
   d43aa:	2400      	movs	r4, #0
  for ( uint8_t i = 0; i < 4; i++ ) {     // Loop 4 times to get the 4 Bytes
    storedCard[i] = EEPROM.read(start + i);   // Assign values read from EEPROM to array
   d43ac:	f002 f954 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d43b0:	1928      	adds	r0, r5, r4
   d43b2:	f7ff fe84 	bl	d40be <_ZN11EEPROMClass4readEi.isra.1>
   d43b6:	5530      	strb	r0, [r6, r4]
   d43b8:	3401      	adds	r4, #1
  return 1;
}

void readID( uint8_t number ) {
  uint8_t start = (number * 4 ) + 2;    // Figure out starting position
  for ( uint8_t i = 0; i < 4; i++ ) {     // Loop 4 times to get the 4 Bytes
   d43ba:	2c04      	cmp	r4, #4
   d43bc:	d1f6      	bne.n	d43ac <_Z6readIDh+0xc>
    storedCard[i] = EEPROM.read(start + i);   // Assign values read from EEPROM to array
  }
}
   d43be:	bd70      	pop	{r4, r5, r6, pc}
   d43c0:	2003e3cc 	.word	0x2003e3cc

000d43c4 <_Z8checkTwoPhS_>:

boolean checkTwo ( byte a[], byte b[] ) {
   d43c4:	b570      	push	{r4, r5, r6, lr}
  if ( a[0] != 0 )      // Make sure there is something in the array first
   d43c6:	7803      	ldrb	r3, [r0, #0]
   d43c8:	b113      	cbz	r3, d43d0 <_Z8checkTwoPhS_+0xc>
    match = true;       // Assume they match at first
   d43ca:	4b0a      	ldr	r3, [pc, #40]	; (d43f4 <_Z8checkTwoPhS_+0x30>)
   d43cc:	2201      	movs	r2, #1
   d43ce:	701a      	strb	r2, [r3, #0]
  for ( uint8_t k = 0; k < 4; k++ ) {   // Loop 4 times
    if ( a[k] != b[k] )     // IF a != b then set match = false, one fails, all fail
      match = false;
   d43d0:	4a08      	ldr	r2, [pc, #32]	; (d43f4 <_Z8checkTwoPhS_+0x30>)
   d43d2:	1e43      	subs	r3, r0, #1
   d43d4:	3901      	subs	r1, #1
   d43d6:	3003      	adds	r0, #3
   d43d8:	2400      	movs	r4, #0

boolean checkTwo ( byte a[], byte b[] ) {
  if ( a[0] != 0 )      // Make sure there is something in the array first
    match = true;       // Assume they match at first
  for ( uint8_t k = 0; k < 4; k++ ) {   // Loop 4 times
    if ( a[k] != b[k] )     // IF a != b then set match = false, one fails, all fail
   d43da:	f813 6f01 	ldrb.w	r6, [r3, #1]!
   d43de:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   d43e2:	42ae      	cmp	r6, r5
      match = false;
   d43e4:	bf18      	it	ne
   d43e6:	7014      	strbne	r4, [r2, #0]
}

boolean checkTwo ( byte a[], byte b[] ) {
  if ( a[0] != 0 )      // Make sure there is something in the array first
    match = true;       // Assume they match at first
  for ( uint8_t k = 0; k < 4; k++ ) {   // Loop 4 times
   d43e8:	4283      	cmp	r3, r0
   d43ea:	d1f6      	bne.n	d43da <_Z8checkTwoPhS_+0x16>
    return true;      // Return true
  }
  else  {
    return false;       // Return false
  }
}
   d43ec:	4b01      	ldr	r3, [pc, #4]	; (d43f4 <_Z8checkTwoPhS_+0x30>)
   d43ee:	7818      	ldrb	r0, [r3, #0]
   d43f0:	bd70      	pop	{r4, r5, r6, pc}
   d43f2:	bf00      	nop
   d43f4:	2003e390 	.word	0x2003e390

000d43f8 <_Z6findIDPh>:

boolean findID( byte find[] ) {
   d43f8:	b570      	push	{r4, r5, r6, lr}
   d43fa:	4606      	mov	r6, r0
  uint8_t count = EEPROM.read(0);     // Read the first Byte of EEPROM that
   d43fc:	f002 f92c 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d4400:	2000      	movs	r0, #0
   d4402:	f7ff fe5c 	bl	d40be <_ZN11EEPROMClass4readEi.isra.1>
   d4406:	4605      	mov	r5, r0
  Serial.println(EEPROM.read(0));
   d4408:	f001 fe28 	bl	d605c <_Z16_fetch_usbserialv>
   d440c:	4604      	mov	r4, r0
   d440e:	f002 f923 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d4412:	2000      	movs	r0, #0
   d4414:	f7ff fe53 	bl	d40be <_ZN11EEPROMClass4readEi.isra.1>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4418:	220a      	movs	r2, #10
   d441a:	4601      	mov	r1, r0
   d441c:	4620      	mov	r0, r4
   d441e:	f001 fc68 	bl	d5cf2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4422:	4620      	mov	r0, r4
   d4424:	f001 fc4f 	bl	d5cc6 <_ZN5Print7printlnEv>
  if(count == 0){
   d4428:	b16d      	cbz	r5, d4446 <_Z6findIDPh+0x4e>
   d442a:	2401      	movs	r4, #1
    return false;
  }
  for ( uint8_t i = 1; i <= count; i++ ) {    // Loop once for each EEPROM entry
   d442c:	42ac      	cmp	r4, r5
   d442e:	d80a      	bhi.n	d4446 <_Z6findIDPh+0x4e>
    readID(i);          // Read an ID from EEPROM, it is stored in storedCard[4]
   d4430:	4620      	mov	r0, r4
   d4432:	f7ff ffb5 	bl	d43a0 <_Z6readIDh>
    if ( checkTwo( find, storedCard ) ) {   // Check to see if the storedCard read from EEPROM
   d4436:	4905      	ldr	r1, [pc, #20]	; (d444c <_Z6findIDPh+0x54>)
   d4438:	4630      	mov	r0, r6
   d443a:	f7ff ffc3 	bl	d43c4 <_Z8checkTwoPhS_>
   d443e:	b918      	cbnz	r0, d4448 <_Z6findIDPh+0x50>
  uint8_t count = EEPROM.read(0);     // Read the first Byte of EEPROM that
  Serial.println(EEPROM.read(0));
  if(count == 0){
    return false;
  }
  for ( uint8_t i = 1; i <= count; i++ ) {    // Loop once for each EEPROM entry
   d4440:	3401      	adds	r4, #1
   d4442:	b2e4      	uxtb	r4, r4
   d4444:	e7f2      	b.n	d442c <_Z6findIDPh+0x34>

boolean findID( byte find[] ) {
  uint8_t count = EEPROM.read(0);     // Read the first Byte of EEPROM that
  Serial.println(EEPROM.read(0));
  if(count == 0){
    return false;
   d4446:	2000      	movs	r0, #0
    }
    else {    // If not, return false
    }
  }
  return false;
}
   d4448:	bd70      	pop	{r4, r5, r6, pc}
   d444a:	bf00      	nop
   d444c:	2003e3cc 	.word	0x2003e3cc

000d4450 <_Z7writeIDPh>:

void writeID( byte a[] ) {
   d4450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4452:	4604      	mov	r4, r0
  if ( !findID( a ) ) {     // Before we write to the EEPROM, check to see if we have seen this card before!
   d4454:	f7ff ffd0 	bl	d43f8 <_Z6findIDPh>
   d4458:	4607      	mov	r7, r0
   d445a:	bb08      	cbnz	r0, d44a0 <_Z7writeIDPh+0x50>
    uint8_t num = EEPROM.read(0);     // Get the numer of used spaces, position 0 stores the number of ID cards
   d445c:	f002 f8fc 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d4460:	4638      	mov	r0, r7
   d4462:	f7ff fe2c 	bl	d40be <_ZN11EEPROMClass4readEi.isra.1>
   d4466:	4606      	mov	r6, r0
    uint8_t start = ( num * 4 ) + 6;  // Figure out where the next slot starts
   d4468:	0085      	lsls	r5, r0, #2
    num++;                // Increment the counter by one
    EEPROM.write( 0, num );     // Write the new count to the counter
   d446a:	f002 f8f5 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d446e:	1c71      	adds	r1, r6, #1
   d4470:	b2c9      	uxtb	r1, r1
   d4472:	4638      	mov	r0, r7
}

void writeID( byte a[] ) {
  if ( !findID( a ) ) {     // Before we write to the EEPROM, check to see if we have seen this card before!
    uint8_t num = EEPROM.read(0);     // Get the numer of used spaces, position 0 stores the number of ID cards
    uint8_t start = ( num * 4 ) + 6;  // Figure out where the next slot starts
   d4474:	3506      	adds	r5, #6
    num++;                // Increment the counter by one
    EEPROM.write( 0, num );     // Write the new count to the counter
   d4476:	f7ff fe24 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.2>
}

void writeID( byte a[] ) {
  if ( !findID( a ) ) {     // Before we write to the EEPROM, check to see if we have seen this card before!
    uint8_t num = EEPROM.read(0);     // Get the numer of used spaces, position 0 stores the number of ID cards
    uint8_t start = ( num * 4 ) + 6;  // Figure out where the next slot starts
   d447a:	b2ed      	uxtb	r5, r5
   d447c:	1d26      	adds	r6, r4, #4
   d447e:	1b2d      	subs	r5, r5, r4
    num++;                // Increment the counter by one
    EEPROM.write( 0, num );     // Write the new count to the counter
    for ( uint8_t j = 0; j < 4; j++ ) {   // Loop 4 times
      EEPROM.write( start + j, a[j] );  // Write the array values to EEPROM in the right position
   d4480:	f002 f8ea 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d4484:	1928      	adds	r0, r5, r4
   d4486:	f814 1b01 	ldrb.w	r1, [r4], #1
   d448a:	f7ff fe1a 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.2>
  if ( !findID( a ) ) {     // Before we write to the EEPROM, check to see if we have seen this card before!
    uint8_t num = EEPROM.read(0);     // Get the numer of used spaces, position 0 stores the number of ID cards
    uint8_t start = ( num * 4 ) + 6;  // Figure out where the next slot starts
    num++;                // Increment the counter by one
    EEPROM.write( 0, num );     // Write the new count to the counter
    for ( uint8_t j = 0; j < 4; j++ ) {   // Loop 4 times
   d448e:	42b4      	cmp	r4, r6
   d4490:	d1f6      	bne.n	d4480 <_Z7writeIDPh+0x30>
      EEPROM.write( start + j, a[j] );  // Write the array values to EEPROM in the right position
    }
    Serial.println(F("Succesfully added ID record to EEPROM"));
   d4492:	f001 fde3 	bl	d605c <_Z16_fetch_usbserialv>
   d4496:	4906      	ldr	r1, [pc, #24]	; (d44b0 <_Z7writeIDPh+0x60>)
  }
  else {
    Serial.println(F("Failed! There is something wrong with ID or bad EEPROM"));
  }
}
   d4498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    num++;                // Increment the counter by one
    EEPROM.write( 0, num );     // Write the new count to the counter
    for ( uint8_t j = 0; j < 4; j++ ) {   // Loop 4 times
      EEPROM.write( start + j, a[j] );  // Write the array values to EEPROM in the right position
    }
    Serial.println(F("Succesfully added ID record to EEPROM"));
   d449c:	f001 bc1f 	b.w	d5cde <_ZN5Print7printlnEPKc>
  }
  else {
    Serial.println(F("Failed! There is something wrong with ID or bad EEPROM"));
   d44a0:	f001 fddc 	bl	d605c <_Z16_fetch_usbserialv>
   d44a4:	4903      	ldr	r1, [pc, #12]	; (d44b4 <_Z7writeIDPh+0x64>)
  }
}
   d44a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      EEPROM.write( start + j, a[j] );  // Write the array values to EEPROM in the right position
    }
    Serial.println(F("Succesfully added ID record to EEPROM"));
  }
  else {
    Serial.println(F("Failed! There is something wrong with ID or bad EEPROM"));
   d44aa:	f001 bc18 	b.w	d5cde <_ZN5Print7printlnEPKc>
   d44ae:	bf00      	nop
   d44b0:	000d6b00 	.word	0x000d6b00
   d44b4:	000d6b26 	.word	0x000d6b26

000d44b8 <_Z10findIDSLOTPh>:
    }
    Serial.println(F("Succesfully removed ID record from EEPROM"));
  }
}

uint8_t findIDSLOT( byte find[] ) {
   d44b8:	b570      	push	{r4, r5, r6, lr}
   d44ba:	4606      	mov	r6, r0
  uint8_t count = EEPROM.read(0);       // Read the first Byte of EEPROM that
   d44bc:	f002 f8cc 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d44c0:	2000      	movs	r0, #0
   d44c2:	f7ff fdfc 	bl	d40be <_ZN11EEPROMClass4readEi.isra.1>
  for ( uint8_t i = 1; i <= count; i++ ) {    // Loop once for each EEPROM entry
   d44c6:	2401      	movs	r4, #1
    Serial.println(F("Succesfully removed ID record from EEPROM"));
  }
}

uint8_t findIDSLOT( byte find[] ) {
  uint8_t count = EEPROM.read(0);       // Read the first Byte of EEPROM that
   d44c8:	4605      	mov	r5, r0
  for ( uint8_t i = 1; i <= count; i++ ) {    // Loop once for each EEPROM entry
   d44ca:	42ac      	cmp	r4, r5
   d44cc:	d80c      	bhi.n	d44e8 <_Z10findIDSLOTPh+0x30>
    readID(i);                // Read an ID from EEPROM, it is stored in storedCard[4]
   d44ce:	4620      	mov	r0, r4
   d44d0:	f7ff ff66 	bl	d43a0 <_Z6readIDh>
    if ( checkTwo( find, storedCard ) ) {   // Check to see if the storedCard read from EEPROM
   d44d4:	4905      	ldr	r1, [pc, #20]	; (d44ec <_Z10findIDSLOTPh+0x34>)
   d44d6:	4630      	mov	r0, r6
   d44d8:	f7ff ff74 	bl	d43c4 <_Z8checkTwoPhS_>
   d44dc:	b108      	cbz	r0, d44e2 <_Z10findIDSLOTPh+0x2a>
      // is the same as the find[] ID card passed
      return i;         // The slot number of the card
   d44de:	4620      	mov	r0, r4
   d44e0:	bd70      	pop	{r4, r5, r6, pc}
  }
}

uint8_t findIDSLOT( byte find[] ) {
  uint8_t count = EEPROM.read(0);       // Read the first Byte of EEPROM that
  for ( uint8_t i = 1; i <= count; i++ ) {    // Loop once for each EEPROM entry
   d44e2:	3401      	adds	r4, #1
   d44e4:	b2e4      	uxtb	r4, r4
   d44e6:	e7f0      	b.n	d44ca <_Z10findIDSLOTPh+0x12>
      // is the same as the find[] ID card passed
      return i;         // The slot number of the card
      break;          // Stop looking we found it
    }
  }
}
   d44e8:	bd70      	pop	{r4, r5, r6, pc}
   d44ea:	bf00      	nop
   d44ec:	2003e3cc 	.word	0x2003e3cc

000d44f0 <_Z8deleteIDPh>:
  else {
    Serial.println(F("Failed! There is something wrong with ID or bad EEPROM"));
  }
}

void deleteID( byte a[] ) {
   d44f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44f2:	4604      	mov	r4, r0
  if ( !findID( a ) ) {     // Before we delete from the EEPROM, check to see if we have this card!
   d44f4:	f7ff ff80 	bl	d43f8 <_Z6findIDPh>
   d44f8:	b930      	cbnz	r0, d4508 <_Z8deleteIDPh+0x18>
    Serial.println(F("Failed! There is something wrong with ID or bad EEPROM"));
   d44fa:	f001 fdaf 	bl	d605c <_Z16_fetch_usbserialv>
   d44fe:	4922      	ldr	r1, [pc, #136]	; (d4588 <_Z8deleteIDPh+0x98>)
    for ( uint8_t k = 0; k < 4; k++ ) {         // Shifting loop
      EEPROM.write( start + j + k, 0);
    }
    Serial.println(F("Succesfully removed ID record from EEPROM"));
  }
}
   d4500:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  }
}

void deleteID( byte a[] ) {
  if ( !findID( a ) ) {     // Before we delete from the EEPROM, check to see if we have this card!
    Serial.println(F("Failed! There is something wrong with ID or bad EEPROM"));
   d4504:	f001 bbeb 	b.w	d5cde <_ZN5Print7printlnEPKc>
  }
  else {
    uint8_t num = EEPROM.read(0);   // Get the numer of used spaces, position 0 stores the number of ID cards
   d4508:	f002 f8a6 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d450c:	2000      	movs	r0, #0
   d450e:	f7ff fdd6 	bl	d40be <_ZN11EEPROMClass4readEi.isra.1>
   d4512:	4606      	mov	r6, r0
    uint8_t slot;       // Figure out the slot number of the card
    uint8_t start;      // = ( num * 4 ) + 6; // Figure out where the next slot starts
    uint8_t looping;    // The number of times the loop repeats
    uint8_t j;
    uint8_t count = EEPROM.read(0); // Read the first Byte of EEPROM that stores number of cards
   d4514:	f002 f8a0 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d4518:	2000      	movs	r0, #0
   d451a:	f7ff fdd0 	bl	d40be <_ZN11EEPROMClass4readEi.isra.1>
    slot = findIDSLOT( a );   // Figure out the slot number of the card to delete
   d451e:	4620      	mov	r0, r4
   d4520:	f7ff ffca 	bl	d44b8 <_Z10findIDSLOTPh>
    start = (slot * 4) + 2;
   d4524:	0084      	lsls	r4, r0, #2
    looping = ((num - slot) * 4);
   d4526:	1a30      	subs	r0, r6, r0
    uint8_t start;      // = ( num * 4 ) + 6; // Figure out where the next slot starts
    uint8_t looping;    // The number of times the loop repeats
    uint8_t j;
    uint8_t count = EEPROM.read(0); // Read the first Byte of EEPROM that stores number of cards
    slot = findIDSLOT( a );   // Figure out the slot number of the card to delete
    start = (slot * 4) + 2;
   d4528:	3402      	adds	r4, #2
    looping = ((num - slot) * 4);
   d452a:	0080      	lsls	r0, r0, #2
    uint8_t start;      // = ( num * 4 ) + 6; // Figure out where the next slot starts
    uint8_t looping;    // The number of times the loop repeats
    uint8_t j;
    uint8_t count = EEPROM.read(0); // Read the first Byte of EEPROM that stores number of cards
    slot = findIDSLOT( a );   // Figure out the slot number of the card to delete
    start = (slot * 4) + 2;
   d452c:	b2e5      	uxtb	r5, r4
    looping = ((num - slot) * 4);
   d452e:	b2c4      	uxtb	r4, r0
    num--;      // Decrement the counter by one
    EEPROM.write( 0, num );   // Write the new count to the counter
   d4530:	f002 f892 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d4534:	1e71      	subs	r1, r6, #1
   d4536:	b2c9      	uxtb	r1, r1
   d4538:	2000      	movs	r0, #0
   d453a:	f7ff fdc2 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.2>
   d453e:	2600      	movs	r6, #0
    for ( j = 0; j < looping; j++ ) {         // Loop the card shift times
      EEPROM.write( start + j, EEPROM.read(start + 4 + j));   // Shift the array values to 4 places earlier in the EEPROM
   d4540:	1d2f      	adds	r7, r5, #4
    slot = findIDSLOT( a );   // Figure out the slot number of the card to delete
    start = (slot * 4) + 2;
    looping = ((num - slot) * 4);
    num--;      // Decrement the counter by one
    EEPROM.write( 0, num );   // Write the new count to the counter
    for ( j = 0; j < looping; j++ ) {         // Loop the card shift times
   d4542:	b2f3      	uxtb	r3, r6
   d4544:	429c      	cmp	r4, r3
   d4546:	d90c      	bls.n	d4562 <_Z8deleteIDPh+0x72>
      EEPROM.write( start + j, EEPROM.read(start + 4 + j));   // Shift the array values to 4 places earlier in the EEPROM
   d4548:	f002 f886 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d454c:	f002 f884 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d4550:	19b8      	adds	r0, r7, r6
   d4552:	f7ff fdb4 	bl	d40be <_ZN11EEPROMClass4readEi.isra.1>
   d4556:	4601      	mov	r1, r0
   d4558:	1970      	adds	r0, r6, r5
   d455a:	f7ff fdb2 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.2>
   d455e:	3601      	adds	r6, #1
   d4560:	e7ef      	b.n	d4542 <_Z8deleteIDPh+0x52>
    slot = findIDSLOT( a );   // Figure out the slot number of the card to delete
    start = (slot * 4) + 2;
    looping = ((num - slot) * 4);
    num--;      // Decrement the counter by one
    EEPROM.write( 0, num );   // Write the new count to the counter
    for ( j = 0; j < looping; j++ ) {         // Loop the card shift times
   d4562:	2600      	movs	r6, #0
      EEPROM.write( start + j, EEPROM.read(start + 4 + j));   // Shift the array values to 4 places earlier in the EEPROM
    }
    for ( uint8_t k = 0; k < 4; k++ ) {         // Shifting loop
      EEPROM.write( start + j + k, 0);
   d4564:	442c      	add	r4, r5
   d4566:	f002 f877 	bl	d6658 <_Z21__fetch_global_EEPROMv>
   d456a:	19a0      	adds	r0, r4, r6
   d456c:	2100      	movs	r1, #0
   d456e:	3601      	adds	r6, #1
   d4570:	f7ff fda7 	bl	d40c2 <_ZN11EEPROMClass5writeEih.isra.2>
    num--;      // Decrement the counter by one
    EEPROM.write( 0, num );   // Write the new count to the counter
    for ( j = 0; j < looping; j++ ) {         // Loop the card shift times
      EEPROM.write( start + j, EEPROM.read(start + 4 + j));   // Shift the array values to 4 places earlier in the EEPROM
    }
    for ( uint8_t k = 0; k < 4; k++ ) {         // Shifting loop
   d4574:	2e04      	cmp	r6, #4
   d4576:	d1f6      	bne.n	d4566 <_Z8deleteIDPh+0x76>
      EEPROM.write( start + j + k, 0);
    }
    Serial.println(F("Succesfully removed ID record from EEPROM"));
   d4578:	f001 fd70 	bl	d605c <_Z16_fetch_usbserialv>
   d457c:	4903      	ldr	r1, [pc, #12]	; (d458c <_Z8deleteIDPh+0x9c>)
  }
}
   d457e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      EEPROM.write( start + j, EEPROM.read(start + 4 + j));   // Shift the array values to 4 places earlier in the EEPROM
    }
    for ( uint8_t k = 0; k < 4; k++ ) {         // Shifting loop
      EEPROM.write( start + j + k, 0);
    }
    Serial.println(F("Succesfully removed ID record from EEPROM"));
   d4582:	f001 bbac 	b.w	d5cde <_ZN5Print7printlnEPKc>
   d4586:	bf00      	nop
   d4588:	000d6b26 	.word	0x000d6b26
   d458c:	000d6b5d 	.word	0x000d6b5d

000d4590 <_Z6unlockv>:
    }
  }
}


void unlock(){
   d4590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.println("Successful card read");
  if(((uint8_t)readCard[0] == (uint8_t)masterCard[0]) && ((uint8_t)readCard[1] == (uint8_t)masterCard[1]) && ((uint8_t)readCard[2] == (uint8_t)masterCard[2]) && ((uint8_t)readCard[3] == (uint8_t)masterCard[3])){
   d4594:	4d82      	ldr	r5, [pc, #520]	; (d47a0 <_Z6unlockv+0x210>)
   d4596:	4c83      	ldr	r4, [pc, #524]	; (d47a4 <_Z6unlockv+0x214>)
  }
}


void unlock(){
  Serial.println("Successful card read");
   d4598:	f001 fd60 	bl	d605c <_Z16_fetch_usbserialv>
   d459c:	4982      	ldr	r1, [pc, #520]	; (d47a8 <_Z6unlockv+0x218>)
   d459e:	f001 fb9e 	bl	d5cde <_ZN5Print7printlnEPKc>
  if(((uint8_t)readCard[0] == (uint8_t)masterCard[0]) && ((uint8_t)readCard[1] == (uint8_t)masterCard[1]) && ((uint8_t)readCard[2] == (uint8_t)masterCard[2]) && ((uint8_t)readCard[3] == (uint8_t)masterCard[3])){
   d45a2:	782a      	ldrb	r2, [r5, #0]
   d45a4:	7823      	ldrb	r3, [r4, #0]
   d45a6:	429a      	cmp	r2, r3
   d45a8:	f040 810e 	bne.w	d47c8 <_Z6unlockv+0x238>
   d45ac:	786a      	ldrb	r2, [r5, #1]
   d45ae:	7863      	ldrb	r3, [r4, #1]
   d45b0:	429a      	cmp	r2, r3
   d45b2:	f040 8109 	bne.w	d47c8 <_Z6unlockv+0x238>
   d45b6:	78aa      	ldrb	r2, [r5, #2]
   d45b8:	78a3      	ldrb	r3, [r4, #2]
   d45ba:	429a      	cmp	r2, r3
   d45bc:	f040 8104 	bne.w	d47c8 <_Z6unlockv+0x238>
   d45c0:	78ea      	ldrb	r2, [r5, #3]
   d45c2:	78e3      	ldrb	r3, [r4, #3]
   d45c4:	429a      	cmp	r2, r3
   d45c6:	f040 80ff 	bne.w	d47c8 <_Z6unlockv+0x238>
    Serial.println("Master card detected");
   d45ca:	f001 fd47 	bl	d605c <_Z16_fetch_usbserialv>
   d45ce:	4977      	ldr	r1, [pc, #476]	; (d47ac <_Z6unlockv+0x21c>)
    do {
      successRead = getID();
   d45d0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; d47b0 <_Z6unlockv+0x220>


void unlock(){
  Serial.println("Successful card read");
  if(((uint8_t)readCard[0] == (uint8_t)masterCard[0]) && ((uint8_t)readCard[1] == (uint8_t)masterCard[1]) && ((uint8_t)readCard[2] == (uint8_t)masterCard[2]) && ((uint8_t)readCard[3] == (uint8_t)masterCard[3])){
    Serial.println("Master card detected");
   d45d4:	f001 fb83 	bl	d5cde <_ZN5Print7printlnEPKc>
   d45d8:	46c1      	mov	r9, r8
    do {
      successRead = getID();
   d45da:	f7ff fd75 	bl	d40c8 <_Z5getIDv>
   d45de:	4f74      	ldr	r7, [pc, #464]	; (d47b0 <_Z6unlockv+0x220>)
   d45e0:	f888 0000 	strb.w	r0, [r8]
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d45e4:	2600      	movs	r6, #0
        pixels.setPixelColor(i, pixels.Color(0,50,50));
   d45e6:	2232      	movs	r2, #50	; 0x32
   d45e8:	4611      	mov	r1, r2
   d45ea:	2000      	movs	r0, #0
   d45ec:	f001 f875 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d45f0:	b2b1      	uxth	r1, r6
   d45f2:	4602      	mov	r2, r0
   d45f4:	486f      	ldr	r0, [pc, #444]	; (d47b4 <_Z6unlockv+0x224>)
   d45f6:	f001 f825 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  Serial.println("Successful card read");
  if(((uint8_t)readCard[0] == (uint8_t)masterCard[0]) && ((uint8_t)readCard[1] == (uint8_t)masterCard[1]) && ((uint8_t)readCard[2] == (uint8_t)masterCard[2]) && ((uint8_t)readCard[3] == (uint8_t)masterCard[3])){
    Serial.println("Master card detected");
    do {
      successRead = getID();
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d45fa:	3602      	adds	r6, #2
        pixels.setPixelColor(i, pixels.Color(0,50,50));
        pixels.show();
   d45fc:	486d      	ldr	r0, [pc, #436]	; (d47b4 <_Z6unlockv+0x224>)
   d45fe:	f000 fe7f 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
  Serial.println("Successful card read");
  if(((uint8_t)readCard[0] == (uint8_t)masterCard[0]) && ((uint8_t)readCard[1] == (uint8_t)masterCard[1]) && ((uint8_t)readCard[2] == (uint8_t)masterCard[2]) && ((uint8_t)readCard[3] == (uint8_t)masterCard[3])){
    Serial.println("Master card detected");
    do {
      successRead = getID();
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d4602:	2e0c      	cmp	r6, #12
   d4604:	d1ef      	bne.n	d45e6 <_Z6unlockv+0x56>
        pixels.setPixelColor(i, pixels.Color(0,50,50));
        pixels.show();
      }
      delay(500);
   d4606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d460a:	f001 fba5 	bl	d5d58 <delay>
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d460e:	2600      	movs	r6, #0
        pixels.setPixelColor(i, pixels.Color(0,50,0));
   d4610:	2200      	movs	r2, #0
   d4612:	2132      	movs	r1, #50	; 0x32
   d4614:	4610      	mov	r0, r2
   d4616:	f001 f860 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d461a:	b2b1      	uxth	r1, r6
   d461c:	4602      	mov	r2, r0
   d461e:	4865      	ldr	r0, [pc, #404]	; (d47b4 <_Z6unlockv+0x224>)
   d4620:	f001 f810 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for(int i=0; i<NUMPIXELS; i = i + 2){
        pixels.setPixelColor(i, pixels.Color(0,50,50));
        pixels.show();
      }
      delay(500);
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d4624:	3602      	adds	r6, #2
        pixels.setPixelColor(i, pixels.Color(0,50,0));
        pixels.show();
   d4626:	4863      	ldr	r0, [pc, #396]	; (d47b4 <_Z6unlockv+0x224>)
   d4628:	f000 fe6a 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
      for(int i=0; i<NUMPIXELS; i = i + 2){
        pixels.setPixelColor(i, pixels.Color(0,50,50));
        pixels.show();
      }
      delay(500);
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d462c:	2e0c      	cmp	r6, #12
   d462e:	d1ef      	bne.n	d4610 <_Z6unlockv+0x80>
        pixels.setPixelColor(i, pixels.Color(0,50,0));
        pixels.show();
      }
      delay(500);
   d4630:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4634:	f001 fb90 	bl	d5d58 <delay>
    }
    while(!successRead);
   d4638:	f899 3000 	ldrb.w	r3, [r9]
   d463c:	2b00      	cmp	r3, #0
   d463e:	d0cc      	beq.n	d45da <_Z6unlockv+0x4a>
    successRead = false;
    if(((uint8_t)readCard[0] == (uint8_t)masterCard[0]) && ((uint8_t)readCard[1] == (uint8_t)masterCard[1]) && ((uint8_t)readCard[2] == (uint8_t)masterCard[2]) && ((uint8_t)readCard[3] == (uint8_t)masterCard[3])){
   d4640:	7828      	ldrb	r0, [r5, #0]
   d4642:	7821      	ldrb	r1, [r4, #0]
        pixels.show();
      }
      delay(500);
    }
    while(!successRead);
    successRead = false;
   d4644:	4b5a      	ldr	r3, [pc, #360]	; (d47b0 <_Z6unlockv+0x220>)
   d4646:	2200      	movs	r2, #0
    if(((uint8_t)readCard[0] == (uint8_t)masterCard[0]) && ((uint8_t)readCard[1] == (uint8_t)masterCard[1]) && ((uint8_t)readCard[2] == (uint8_t)masterCard[2]) && ((uint8_t)readCard[3] == (uint8_t)masterCard[3])){
   d4648:	4288      	cmp	r0, r1
        pixels.show();
      }
      delay(500);
    }
    while(!successRead);
    successRead = false;
   d464a:	701a      	strb	r2, [r3, #0]
    if(((uint8_t)readCard[0] == (uint8_t)masterCard[0]) && ((uint8_t)readCard[1] == (uint8_t)masterCard[1]) && ((uint8_t)readCard[2] == (uint8_t)masterCard[2]) && ((uint8_t)readCard[3] == (uint8_t)masterCard[3])){
   d464c:	4a54      	ldr	r2, [pc, #336]	; (d47a0 <_Z6unlockv+0x210>)
   d464e:	4b55      	ldr	r3, [pc, #340]	; (d47a4 <_Z6unlockv+0x214>)
   d4650:	d175      	bne.n	d473e <_Z6unlockv+0x1ae>
   d4652:	7850      	ldrb	r0, [r2, #1]
   d4654:	7859      	ldrb	r1, [r3, #1]
   d4656:	4288      	cmp	r0, r1
   d4658:	d171      	bne.n	d473e <_Z6unlockv+0x1ae>
   d465a:	7890      	ldrb	r0, [r2, #2]
   d465c:	7899      	ldrb	r1, [r3, #2]
   d465e:	4288      	cmp	r0, r1
   d4660:	d16d      	bne.n	d473e <_Z6unlockv+0x1ae>
   d4662:	78d2      	ldrb	r2, [r2, #3]
   d4664:	78db      	ldrb	r3, [r3, #3]
   d4666:	429a      	cmp	r2, r3
   d4668:	d169      	bne.n	d473e <_Z6unlockv+0x1ae>
      Serial.println("Master card detected again");
   d466a:	f001 fcf7 	bl	d605c <_Z16_fetch_usbserialv>
   d466e:	4952      	ldr	r1, [pc, #328]	; (d47b8 <_Z6unlockv+0x228>)
   d4670:	f001 fb35 	bl	d5cde <_ZN5Print7printlnEPKc>
      Serial.println("Next card scanned will be blacklisted");
   d4674:	f001 fcf2 	bl	d605c <_Z16_fetch_usbserialv>
   d4678:	4950      	ldr	r1, [pc, #320]	; (d47bc <_Z6unlockv+0x22c>)
   d467a:	f001 fb30 	bl	d5cde <_ZN5Print7printlnEPKc>
      do {
        successRead = getID();
   d467e:	f7ff fd23 	bl	d40c8 <_Z5getIDv>
        for(int i=0; i<NUMPIXELS; i = i + 2){
   d4682:	2400      	movs	r4, #0
    successRead = false;
    if(((uint8_t)readCard[0] == (uint8_t)masterCard[0]) && ((uint8_t)readCard[1] == (uint8_t)masterCard[1]) && ((uint8_t)readCard[2] == (uint8_t)masterCard[2]) && ((uint8_t)readCard[3] == (uint8_t)masterCard[3])){
      Serial.println("Master card detected again");
      Serial.println("Next card scanned will be blacklisted");
      do {
        successRead = getID();
   d4684:	7038      	strb	r0, [r7, #0]
        for(int i=0; i<NUMPIXELS; i = i + 2){
          pixels.setPixelColor(i, pixels.Color(0,50,50));
   d4686:	2232      	movs	r2, #50	; 0x32
   d4688:	4611      	mov	r1, r2
   d468a:	2000      	movs	r0, #0
   d468c:	f001 f825 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4690:	b2a1      	uxth	r1, r4
   d4692:	4602      	mov	r2, r0
   d4694:	4847      	ldr	r0, [pc, #284]	; (d47b4 <_Z6unlockv+0x224>)
   d4696:	f000 ffd5 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    if(((uint8_t)readCard[0] == (uint8_t)masterCard[0]) && ((uint8_t)readCard[1] == (uint8_t)masterCard[1]) && ((uint8_t)readCard[2] == (uint8_t)masterCard[2]) && ((uint8_t)readCard[3] == (uint8_t)masterCard[3])){
      Serial.println("Master card detected again");
      Serial.println("Next card scanned will be blacklisted");
      do {
        successRead = getID();
        for(int i=0; i<NUMPIXELS; i = i + 2){
   d469a:	3402      	adds	r4, #2
          pixels.setPixelColor(i, pixels.Color(0,50,50));
          pixels.show();
   d469c:	4845      	ldr	r0, [pc, #276]	; (d47b4 <_Z6unlockv+0x224>)
   d469e:	f000 fe2f 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
    if(((uint8_t)readCard[0] == (uint8_t)masterCard[0]) && ((uint8_t)readCard[1] == (uint8_t)masterCard[1]) && ((uint8_t)readCard[2] == (uint8_t)masterCard[2]) && ((uint8_t)readCard[3] == (uint8_t)masterCard[3])){
      Serial.println("Master card detected again");
      Serial.println("Next card scanned will be blacklisted");
      do {
        successRead = getID();
        for(int i=0; i<NUMPIXELS; i = i + 2){
   d46a2:	2c0c      	cmp	r4, #12
   d46a4:	d1ef      	bne.n	d4686 <_Z6unlockv+0xf6>
          pixels.setPixelColor(i, pixels.Color(0,50,50));
          pixels.show();
        }
        delay(500);
   d46a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d46aa:	f001 fb55 	bl	d5d58 <delay>
        for(int i=0; i<NUMPIXELS; i = i + 2){
   d46ae:	2400      	movs	r4, #0
          pixels.setPixelColor(i, pixels.Color(50,0,0));
   d46b0:	2200      	movs	r2, #0
   d46b2:	4611      	mov	r1, r2
   d46b4:	2032      	movs	r0, #50	; 0x32
   d46b6:	f001 f810 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d46ba:	b2a1      	uxth	r1, r4
   d46bc:	4602      	mov	r2, r0
   d46be:	483d      	ldr	r0, [pc, #244]	; (d47b4 <_Z6unlockv+0x224>)
   d46c0:	f000 ffc0 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        for(int i=0; i<NUMPIXELS; i = i + 2){
          pixels.setPixelColor(i, pixels.Color(0,50,50));
          pixels.show();
        }
        delay(500);
        for(int i=0; i<NUMPIXELS; i = i + 2){
   d46c4:	3402      	adds	r4, #2
          pixels.setPixelColor(i, pixels.Color(50,0,0));
          pixels.show();
   d46c6:	483b      	ldr	r0, [pc, #236]	; (d47b4 <_Z6unlockv+0x224>)
   d46c8:	f000 fe1a 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
        for(int i=0; i<NUMPIXELS; i = i + 2){
          pixels.setPixelColor(i, pixels.Color(0,50,50));
          pixels.show();
        }
        delay(500);
        for(int i=0; i<NUMPIXELS; i = i + 2){
   d46cc:	2c0c      	cmp	r4, #12
   d46ce:	d1ef      	bne.n	d46b0 <_Z6unlockv+0x120>
          pixels.setPixelColor(i, pixels.Color(50,0,0));
          pixels.show();
        }
        delay(500);
   d46d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d46d4:	f001 fb40 	bl	d5d58 <delay>
      }
      while(!successRead);
   d46d8:	783b      	ldrb	r3, [r7, #0]
   d46da:	2b00      	cmp	r3, #0
   d46dc:	d0cf      	beq.n	d467e <_Z6unlockv+0xee>
      deleteID(readCard);
   d46de:	4830      	ldr	r0, [pc, #192]	; (d47a0 <_Z6unlockv+0x210>)
   d46e0:	f7ff ff06 	bl	d44f0 <_Z8deleteIDPh>
      Serial.println("Card removed");
   d46e4:	f001 fcba 	bl	d605c <_Z16_fetch_usbserialv>
   d46e8:	4935      	ldr	r1, [pc, #212]	; (d47c0 <_Z6unlockv+0x230>)
   d46ea:	f001 faf8 	bl	d5cde <_ZN5Print7printlnEPKc>
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d46ee:	2400      	movs	r4, #0
        pixels.setPixelColor(i, pixels.Color(0,50,0));
   d46f0:	2200      	movs	r2, #0
   d46f2:	2132      	movs	r1, #50	; 0x32
   d46f4:	4610      	mov	r0, r2
   d46f6:	f000 fff0 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d46fa:	b2a1      	uxth	r1, r4
   d46fc:	4602      	mov	r2, r0
   d46fe:	482d      	ldr	r0, [pc, #180]	; (d47b4 <_Z6unlockv+0x224>)
   d4700:	f000 ffa0 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        delay(500);
      }
      while(!successRead);
      deleteID(readCard);
      Serial.println("Card removed");
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d4704:	3402      	adds	r4, #2
        pixels.setPixelColor(i, pixels.Color(0,50,0));
        pixels.show();
   d4706:	482b      	ldr	r0, [pc, #172]	; (d47b4 <_Z6unlockv+0x224>)
   d4708:	f000 fdfa 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
        delay(500);
      }
      while(!successRead);
      deleteID(readCard);
      Serial.println("Card removed");
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d470c:	2c0c      	cmp	r4, #12
   d470e:	d1ef      	bne.n	d46f0 <_Z6unlockv+0x160>
        pixels.setPixelColor(i, pixels.Color(0,50,0));
        pixels.show();
      }
      delay(500);
   d4710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4714:	f001 fb20 	bl	d5d58 <delay>
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d4718:	2400      	movs	r4, #0
        pixels.setPixelColor(i, pixels.Color(0,0,0));
   d471a:	2200      	movs	r2, #0
   d471c:	4611      	mov	r1, r2
   d471e:	4610      	mov	r0, r2
   d4720:	f000 ffdb 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4724:	b2a1      	uxth	r1, r4
   d4726:	4602      	mov	r2, r0
   d4728:	4822      	ldr	r0, [pc, #136]	; (d47b4 <_Z6unlockv+0x224>)
   d472a:	f000 ff8b 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for(int i=0; i<NUMPIXELS; i = i + 2){
        pixels.setPixelColor(i, pixels.Color(0,50,0));
        pixels.show();
      }
      delay(500);
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d472e:	3402      	adds	r4, #2
        pixels.setPixelColor(i, pixels.Color(0,0,0));
        pixels.show();
   d4730:	4820      	ldr	r0, [pc, #128]	; (d47b4 <_Z6unlockv+0x224>)
   d4732:	f000 fde5 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
      for(int i=0; i<NUMPIXELS; i = i + 2){
        pixels.setPixelColor(i, pixels.Color(0,50,0));
        pixels.show();
      }
      delay(500);
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d4736:	2c0c      	cmp	r4, #12
   d4738:	d1ef      	bne.n	d471a <_Z6unlockv+0x18a>
   d473a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        pixels.setPixelColor(i, pixels.Color(0,0,0));
        pixels.show();
      }
    }
    else{
      writeID(readCard);
   d473e:	4818      	ldr	r0, [pc, #96]	; (d47a0 <_Z6unlockv+0x210>)
   d4740:	f7ff fe86 	bl	d4450 <_Z7writeIDPh>
      Serial.println("Card whitelisted");
   d4744:	f001 fc8a 	bl	d605c <_Z16_fetch_usbserialv>
   d4748:	491e      	ldr	r1, [pc, #120]	; (d47c4 <_Z6unlockv+0x234>)
   d474a:	f001 fac8 	bl	d5cde <_ZN5Print7printlnEPKc>
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d474e:	2400      	movs	r4, #0
        pixels.setPixelColor(i, pixels.Color(0,50,0));
   d4750:	2200      	movs	r2, #0
   d4752:	2132      	movs	r1, #50	; 0x32
   d4754:	4610      	mov	r0, r2
   d4756:	f000 ffc0 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d475a:	b2a1      	uxth	r1, r4
   d475c:	4602      	mov	r2, r0
   d475e:	4815      	ldr	r0, [pc, #84]	; (d47b4 <_Z6unlockv+0x224>)
   d4760:	f000 ff70 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      }
    }
    else{
      writeID(readCard);
      Serial.println("Card whitelisted");
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d4764:	3402      	adds	r4, #2
        pixels.setPixelColor(i, pixels.Color(0,50,0));
        pixels.show();
   d4766:	4813      	ldr	r0, [pc, #76]	; (d47b4 <_Z6unlockv+0x224>)
   d4768:	f000 fdca 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
      }
    }
    else{
      writeID(readCard);
      Serial.println("Card whitelisted");
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d476c:	2c0c      	cmp	r4, #12
   d476e:	d1ef      	bne.n	d4750 <_Z6unlockv+0x1c0>
        pixels.setPixelColor(i, pixels.Color(0,50,0));
        pixels.show();
      }
      delay(500);
   d4770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4774:	f001 faf0 	bl	d5d58 <delay>
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d4778:	2400      	movs	r4, #0
        pixels.setPixelColor(i, pixels.Color(0,0,0));
   d477a:	2200      	movs	r2, #0
   d477c:	4611      	mov	r1, r2
   d477e:	4610      	mov	r0, r2
   d4780:	f000 ffab 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4784:	b2a1      	uxth	r1, r4
   d4786:	4602      	mov	r2, r0
   d4788:	480a      	ldr	r0, [pc, #40]	; (d47b4 <_Z6unlockv+0x224>)
   d478a:	f000 ff5b 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for(int i=0; i<NUMPIXELS; i = i + 2){
        pixels.setPixelColor(i, pixels.Color(0,50,0));
        pixels.show();
      }
      delay(500);
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d478e:	3402      	adds	r4, #2
        pixels.setPixelColor(i, pixels.Color(0,0,0));
        pixels.show();
   d4790:	4808      	ldr	r0, [pc, #32]	; (d47b4 <_Z6unlockv+0x224>)
   d4792:	f000 fdb5 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
      for(int i=0; i<NUMPIXELS; i = i + 2){
        pixels.setPixelColor(i, pixels.Color(0,50,0));
        pixels.show();
      }
      delay(500);
      for(int i=0; i<NUMPIXELS; i = i + 2){
   d4796:	2c0c      	cmp	r4, #12
   d4798:	d1ef      	bne.n	d477a <_Z6unlockv+0x1ea>
   d479a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d479e:	bf00      	nop
   d47a0:	2003e3b2 	.word	0x2003e3b2
   d47a4:	2003e3ae 	.word	0x2003e3ae
   d47a8:	000d6b87 	.word	0x000d6b87
   d47ac:	000d6b9c 	.word	0x000d6b9c
   d47b0:	2003e391 	.word	0x2003e391
   d47b4:	2003e3b8 	.word	0x2003e3b8
   d47b8:	000d6bb1 	.word	0x000d6bb1
   d47bc:	000d6bcc 	.word	0x000d6bcc
   d47c0:	000d6bf2 	.word	0x000d6bf2
   d47c4:	000d6bff 	.word	0x000d6bff
        pixels.show();
      }
    }
  }
  else{
    Serial.println("card not master");
   d47c8:	f001 fc48 	bl	d605c <_Z16_fetch_usbserialv>
   d47cc:	4970      	ldr	r1, [pc, #448]	; (d4990 <_Z6unlockv+0x400>)
   d47ce:	f001 fa86 	bl	d5cde <_ZN5Print7printlnEPKc>
    if(findID(readCard)){
   d47d2:	4870      	ldr	r0, [pc, #448]	; (d4994 <_Z6unlockv+0x404>)
   d47d4:	f7ff fe10 	bl	d43f8 <_Z6findIDPh>
   d47d8:	4604      	mov	r4, r0
   d47da:	2800      	cmp	r0, #0
   d47dc:	f000 8090 	beq.w	d4900 <_Z6unlockv+0x370>
      Serial.println("Card Known");
   d47e0:	f001 fc3c 	bl	d605c <_Z16_fetch_usbserialv>
   d47e4:	496c      	ldr	r1, [pc, #432]	; (d4998 <_Z6unlockv+0x408>)
   d47e6:	f001 fa7a 	bl	d5cde <_ZN5Print7printlnEPKc>
      //unlock animation
      digitalWrite(D3, HIGH);
   d47ea:	2101      	movs	r1, #1
   d47ec:	2003      	movs	r0, #3
   d47ee:	f001 ff06 	bl	d65fe <digitalWrite>
      for(int fade=0; fade<MAXVAL; fade++){
   d47f2:	2400      	movs	r4, #0
   d47f4:	2500      	movs	r5, #0
        for(int i=0; i<NUMPIXELS; i++){
          pixels.setPixelColor(i, pixels.Color(0,fade,0));
   d47f6:	b2e6      	uxtb	r6, r4
   d47f8:	2200      	movs	r2, #0
   d47fa:	4631      	mov	r1, r6
   d47fc:	4610      	mov	r0, r2
   d47fe:	f000 ff6c 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4802:	b2a9      	uxth	r1, r5
   d4804:	4602      	mov	r2, r0
   d4806:	4865      	ldr	r0, [pc, #404]	; (d499c <_Z6unlockv+0x40c>)
   d4808:	f000 ff1c 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    if(findID(readCard)){
      Serial.println("Card Known");
      //unlock animation
      digitalWrite(D3, HIGH);
      for(int fade=0; fade<MAXVAL; fade++){
        for(int i=0; i<NUMPIXELS; i++){
   d480c:	3501      	adds	r5, #1
          pixels.setPixelColor(i, pixels.Color(0,fade,0));
          pixels.show();
   d480e:	4863      	ldr	r0, [pc, #396]	; (d499c <_Z6unlockv+0x40c>)
   d4810:	f000 fd76 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
    if(findID(readCard)){
      Serial.println("Card Known");
      //unlock animation
      digitalWrite(D3, HIGH);
      for(int fade=0; fade<MAXVAL; fade++){
        for(int i=0; i<NUMPIXELS; i++){
   d4814:	2d0c      	cmp	r5, #12
   d4816:	d1ef      	bne.n	d47f8 <_Z6unlockv+0x268>
          pixels.setPixelColor(i, pixels.Color(0,fade,0));
          pixels.show();
        }
        delay(FADEVAL);
   d4818:	2005      	movs	r0, #5
    Serial.println("card not master");
    if(findID(readCard)){
      Serial.println("Card Known");
      //unlock animation
      digitalWrite(D3, HIGH);
      for(int fade=0; fade<MAXVAL; fade++){
   d481a:	3401      	adds	r4, #1
        for(int i=0; i<NUMPIXELS; i++){
          pixels.setPixelColor(i, pixels.Color(0,fade,0));
          pixels.show();
        }
        delay(FADEVAL);
   d481c:	f001 fa9c 	bl	d5d58 <delay>
    Serial.println("card not master");
    if(findID(readCard)){
      Serial.println("Card Known");
      //unlock animation
      digitalWrite(D3, HIGH);
      for(int fade=0; fade<MAXVAL; fade++){
   d4820:	2c32      	cmp	r4, #50	; 0x32
   d4822:	d1e7      	bne.n	d47f4 <_Z6unlockv+0x264>
          pixels.show();
        }
        delay(FADEVAL);
      }
      
      delay(DELAYVAL * 7);
   d4824:	f240 60d6 	movw	r0, #1750	; 0x6d6
   d4828:	f001 fa96 	bl	d5d58 <delay>
      for(int i=0; i<NUMPIXELS; i++){
   d482c:	2500      	movs	r5, #0
   d482e:	2432      	movs	r4, #50	; 0x32
        for(int fade=0; fade<MAXVAL; fade++){
          pixels.setPixelColor(i, pixels.Color(0,MAXVAL-fade,0));
   d4830:	b2ae      	uxth	r6, r5
   d4832:	2200      	movs	r2, #0
   d4834:	b2e1      	uxtb	r1, r4
   d4836:	4610      	mov	r0, r2
   d4838:	f000 ff4f 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d483c:	4631      	mov	r1, r6
   d483e:	4602      	mov	r2, r0
   d4840:	4856      	ldr	r0, [pc, #344]	; (d499c <_Z6unlockv+0x40c>)
   d4842:	f000 feff 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
          pixels.show();
   d4846:	4855      	ldr	r0, [pc, #340]	; (d499c <_Z6unlockv+0x40c>)
   d4848:	f000 fd5a 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
          delay(FADEVAL);
   d484c:	2005      	movs	r0, #5
   d484e:	f001 fa83 	bl	d5d58 <delay>
        delay(FADEVAL);
      }
      
      delay(DELAYVAL * 7);
      for(int i=0; i<NUMPIXELS; i++){
        for(int fade=0; fade<MAXVAL; fade++){
   d4852:	3c01      	subs	r4, #1
   d4854:	d1ed      	bne.n	d4832 <_Z6unlockv+0x2a2>
          pixels.setPixelColor(i, pixels.Color(0,MAXVAL-fade,0));
          pixels.show();
          delay(FADEVAL);
        }
        pixels.setPixelColor(i, pixels.Color(0,0,0));
   d4856:	4622      	mov	r2, r4
   d4858:	4621      	mov	r1, r4
   d485a:	4620      	mov	r0, r4
   d485c:	f000 ff3d 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4860:	4631      	mov	r1, r6
   d4862:	4602      	mov	r2, r0
   d4864:	484d      	ldr	r0, [pc, #308]	; (d499c <_Z6unlockv+0x40c>)
   d4866:	f000 feed 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        }
        delay(FADEVAL);
      }
      
      delay(DELAYVAL * 7);
      for(int i=0; i<NUMPIXELS; i++){
   d486a:	3501      	adds	r5, #1
          pixels.setPixelColor(i, pixels.Color(0,MAXVAL-fade,0));
          pixels.show();
          delay(FADEVAL);
        }
        pixels.setPixelColor(i, pixels.Color(0,0,0));
        pixels.show();
   d486c:	484b      	ldr	r0, [pc, #300]	; (d499c <_Z6unlockv+0x40c>)
   d486e:	f000 fd47 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
        }
        delay(FADEVAL);
      }
      
      delay(DELAYVAL * 7);
      for(int i=0; i<NUMPIXELS; i++){
   d4872:	2d0c      	cmp	r5, #12
   d4874:	d1db      	bne.n	d482e <_Z6unlockv+0x29e>
          delay(FADEVAL);
        }
        pixels.setPixelColor(i, pixels.Color(0,0,0));
        pixels.show();
      }
      digitalWrite(D3, LOW);
   d4876:	4621      	mov	r1, r4
   d4878:	2003      	movs	r0, #3
   d487a:	f001 fec0 	bl	d65fe <digitalWrite>
      //lock animation
      for(int fade=0; fade<MAXVAL; fade++){
   d487e:	2500      	movs	r5, #0
        for(int i=0; i<NUMPIXELS; i++){
          pixels.setPixelColor(i, pixels.Color(fade,0,0));
   d4880:	b2e6      	uxtb	r6, r4
   d4882:	2200      	movs	r2, #0
   d4884:	4611      	mov	r1, r2
   d4886:	4630      	mov	r0, r6
   d4888:	f000 ff27 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d488c:	b2a9      	uxth	r1, r5
   d488e:	4602      	mov	r2, r0
   d4890:	4842      	ldr	r0, [pc, #264]	; (d499c <_Z6unlockv+0x40c>)
   d4892:	f000 fed7 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        pixels.show();
      }
      digitalWrite(D3, LOW);
      //lock animation
      for(int fade=0; fade<MAXVAL; fade++){
        for(int i=0; i<NUMPIXELS; i++){
   d4896:	3501      	adds	r5, #1
          pixels.setPixelColor(i, pixels.Color(fade,0,0));
          pixels.show();
   d4898:	4840      	ldr	r0, [pc, #256]	; (d499c <_Z6unlockv+0x40c>)
   d489a:	f000 fd31 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
        pixels.show();
      }
      digitalWrite(D3, LOW);
      //lock animation
      for(int fade=0; fade<MAXVAL; fade++){
        for(int i=0; i<NUMPIXELS; i++){
   d489e:	2d0c      	cmp	r5, #12
   d48a0:	d1ef      	bne.n	d4882 <_Z6unlockv+0x2f2>
          pixels.setPixelColor(i, pixels.Color(fade,0,0));
          pixels.show();
        }
        delay(FADEVAL-3);
   d48a2:	2002      	movs	r0, #2
        pixels.setPixelColor(i, pixels.Color(0,0,0));
        pixels.show();
      }
      digitalWrite(D3, LOW);
      //lock animation
      for(int fade=0; fade<MAXVAL; fade++){
   d48a4:	3401      	adds	r4, #1
        for(int i=0; i<NUMPIXELS; i++){
          pixels.setPixelColor(i, pixels.Color(fade,0,0));
          pixels.show();
        }
        delay(FADEVAL-3);
   d48a6:	f001 fa57 	bl	d5d58 <delay>
        pixels.setPixelColor(i, pixels.Color(0,0,0));
        pixels.show();
      }
      digitalWrite(D3, LOW);
      //lock animation
      for(int fade=0; fade<MAXVAL; fade++){
   d48aa:	2c32      	cmp	r4, #50	; 0x32
   d48ac:	d1e7      	bne.n	d487e <_Z6unlockv+0x2ee>
   d48ae:	2500      	movs	r5, #0
        }
        delay(FADEVAL-3);
      }
      for(int fade=0; fade<MAXVAL; fade++){
        for(int i=0; i<NUMPIXELS; i++){
          pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
   d48b0:	b2e6      	uxtb	r6, r4
   d48b2:	2200      	movs	r2, #0
   d48b4:	4611      	mov	r1, r2
   d48b6:	4630      	mov	r0, r6
   d48b8:	f000 ff0f 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d48bc:	b2a9      	uxth	r1, r5
   d48be:	4602      	mov	r2, r0
   d48c0:	4836      	ldr	r0, [pc, #216]	; (d499c <_Z6unlockv+0x40c>)
   d48c2:	f000 febf 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
          pixels.show();
        }
        delay(FADEVAL-3);
      }
      for(int fade=0; fade<MAXVAL; fade++){
        for(int i=0; i<NUMPIXELS; i++){
   d48c6:	3501      	adds	r5, #1
          pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
          pixels.show();
   d48c8:	4834      	ldr	r0, [pc, #208]	; (d499c <_Z6unlockv+0x40c>)
   d48ca:	f000 fd19 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
          pixels.show();
        }
        delay(FADEVAL-3);
      }
      for(int fade=0; fade<MAXVAL; fade++){
        for(int i=0; i<NUMPIXELS; i++){
   d48ce:	2d0c      	cmp	r5, #12
   d48d0:	d1ef      	bne.n	d48b2 <_Z6unlockv+0x322>
          pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
          pixels.show();
        }
        delay(FADEVAL-3);
   d48d2:	2002      	movs	r0, #2
   d48d4:	f001 fa40 	bl	d5d58 <delay>
          pixels.setPixelColor(i, pixels.Color(fade,0,0));
          pixels.show();
        }
        delay(FADEVAL-3);
      }
      for(int fade=0; fade<MAXVAL; fade++){
   d48d8:	3c01      	subs	r4, #1
   d48da:	d1e8      	bne.n	d48ae <_Z6unlockv+0x31e>
          pixels.show();
        }
        delay(FADEVAL-3);
      }
      for(int i=0; i<NUMPIXELS; i++){
        pixels.setPixelColor(i, pixels.Color(0,0,0));
   d48dc:	2200      	movs	r2, #0
   d48de:	4611      	mov	r1, r2
   d48e0:	4610      	mov	r0, r2
   d48e2:	f000 fefa 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d48e6:	b2a1      	uxth	r1, r4
   d48e8:	4602      	mov	r2, r0
   d48ea:	482c      	ldr	r0, [pc, #176]	; (d499c <_Z6unlockv+0x40c>)
   d48ec:	f000 feaa 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
          pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
          pixels.show();
        }
        delay(FADEVAL-3);
      }
      for(int i=0; i<NUMPIXELS; i++){
   d48f0:	3401      	adds	r4, #1
        pixels.setPixelColor(i, pixels.Color(0,0,0));
        pixels.show();
   d48f2:	482a      	ldr	r0, [pc, #168]	; (d499c <_Z6unlockv+0x40c>)
   d48f4:	f000 fd04 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
          pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
          pixels.show();
        }
        delay(FADEVAL-3);
      }
      for(int i=0; i<NUMPIXELS; i++){
   d48f8:	2c0c      	cmp	r4, #12
   d48fa:	d1ef      	bne.n	d48dc <_Z6unlockv+0x34c>
   d48fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        pixels.setPixelColor(i, pixels.Color(0,0,0));
        pixels.show();
      }
    }
    else{
      Serial.println("Card unkown");
   d4900:	f001 fbac 	bl	d605c <_Z16_fetch_usbserialv>
   d4904:	4926      	ldr	r1, [pc, #152]	; (d49a0 <_Z6unlockv+0x410>)
   d4906:	f001 f9ea 	bl	d5cde <_ZN5Print7printlnEPKc>
      match = false;
   d490a:	4b26      	ldr	r3, [pc, #152]	; (d49a4 <_Z6unlockv+0x414>)
   d490c:	701c      	strb	r4, [r3, #0]
      successRead = false;
   d490e:	4b26      	ldr	r3, [pc, #152]	; (d49a8 <_Z6unlockv+0x418>)
   d4910:	701c      	strb	r4, [r3, #0]
      for(int fade=0; fade<MAXVAL; fade++){
   d4912:	2500      	movs	r5, #0
        for(int i=0; i<NUMPIXELS; i++){
          pixels.setPixelColor(i, pixels.Color(fade,0,0));
   d4914:	b2e6      	uxtb	r6, r4
   d4916:	2200      	movs	r2, #0
   d4918:	4611      	mov	r1, r2
   d491a:	4630      	mov	r0, r6
   d491c:	f000 fedd 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4920:	b2a9      	uxth	r1, r5
   d4922:	4602      	mov	r2, r0
   d4924:	481d      	ldr	r0, [pc, #116]	; (d499c <_Z6unlockv+0x40c>)
   d4926:	f000 fe8d 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    else{
      Serial.println("Card unkown");
      match = false;
      successRead = false;
      for(int fade=0; fade<MAXVAL; fade++){
        for(int i=0; i<NUMPIXELS; i++){
   d492a:	3501      	adds	r5, #1
          pixels.setPixelColor(i, pixels.Color(fade,0,0));
          pixels.show();
   d492c:	481b      	ldr	r0, [pc, #108]	; (d499c <_Z6unlockv+0x40c>)
   d492e:	f000 fce7 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
    else{
      Serial.println("Card unkown");
      match = false;
      successRead = false;
      for(int fade=0; fade<MAXVAL; fade++){
        for(int i=0; i<NUMPIXELS; i++){
   d4932:	2d0c      	cmp	r5, #12
   d4934:	d1ef      	bne.n	d4916 <_Z6unlockv+0x386>
          pixels.setPixelColor(i, pixels.Color(fade,0,0));
          pixels.show();
        }
        delay(FADEVAL-3);
   d4936:	2002      	movs	r0, #2
    }
    else{
      Serial.println("Card unkown");
      match = false;
      successRead = false;
      for(int fade=0; fade<MAXVAL; fade++){
   d4938:	3401      	adds	r4, #1
        for(int i=0; i<NUMPIXELS; i++){
          pixels.setPixelColor(i, pixels.Color(fade,0,0));
          pixels.show();
        }
        delay(FADEVAL-3);
   d493a:	f001 fa0d 	bl	d5d58 <delay>
    }
    else{
      Serial.println("Card unkown");
      match = false;
      successRead = false;
      for(int fade=0; fade<MAXVAL; fade++){
   d493e:	2c32      	cmp	r4, #50	; 0x32
   d4940:	d1e7      	bne.n	d4912 <_Z6unlockv+0x382>
   d4942:	2500      	movs	r5, #0
   d4944:	2432      	movs	r4, #50	; 0x32
        }
        delay(FADEVAL-3);
      }
      for(int i=0; i<NUMPIXELS; i++){
        for(int fade=0; fade<MAXVAL; fade++){
          pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
   d4946:	b2ae      	uxth	r6, r5
   d4948:	2200      	movs	r2, #0
   d494a:	4611      	mov	r1, r2
   d494c:	b2e0      	uxtb	r0, r4
   d494e:	f000 fec4 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4952:	4631      	mov	r1, r6
   d4954:	4602      	mov	r2, r0
   d4956:	4811      	ldr	r0, [pc, #68]	; (d499c <_Z6unlockv+0x40c>)
   d4958:	f000 fe74 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
          pixels.show();
   d495c:	480f      	ldr	r0, [pc, #60]	; (d499c <_Z6unlockv+0x40c>)
   d495e:	f000 fccf 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
          pixels.show();
        }
        delay(FADEVAL-3);
      }
      for(int i=0; i<NUMPIXELS; i++){
        for(int fade=0; fade<MAXVAL; fade++){
   d4962:	3c01      	subs	r4, #1
   d4964:	d1f0      	bne.n	d4948 <_Z6unlockv+0x3b8>
          pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
          pixels.show();
        }
        delay(FADEVAL-3);
   d4966:	2002      	movs	r0, #2
   d4968:	f001 f9f6 	bl	d5d58 <delay>
        pixels.setPixelColor(i, pixels.Color(0,0,0));
   d496c:	4622      	mov	r2, r4
   d496e:	4621      	mov	r1, r4
   d4970:	4620      	mov	r0, r4
   d4972:	f000 feb2 	bl	d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4976:	4631      	mov	r1, r6
   d4978:	4602      	mov	r2, r0
   d497a:	4808      	ldr	r0, [pc, #32]	; (d499c <_Z6unlockv+0x40c>)
   d497c:	f000 fe62 	bl	d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
          pixels.setPixelColor(i, pixels.Color(fade,0,0));
          pixels.show();
        }
        delay(FADEVAL-3);
      }
      for(int i=0; i<NUMPIXELS; i++){
   d4980:	3501      	adds	r5, #1
          pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
          pixels.show();
        }
        delay(FADEVAL-3);
        pixels.setPixelColor(i, pixels.Color(0,0,0));
        pixels.show();
   d4982:	4806      	ldr	r0, [pc, #24]	; (d499c <_Z6unlockv+0x40c>)
   d4984:	f000 fcbc 	bl	d5300 <_ZN17Adafruit_NeoPixel4showEv>
          pixels.setPixelColor(i, pixels.Color(fade,0,0));
          pixels.show();
        }
        delay(FADEVAL-3);
      }
      for(int i=0; i<NUMPIXELS; i++){
   d4988:	2d0c      	cmp	r5, #12
   d498a:	d1db      	bne.n	d4944 <_Z6unlockv+0x3b4>
   d498c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4990:	000d6c10 	.word	0x000d6c10
   d4994:	2003e3b2 	.word	0x2003e3b2
   d4998:	000d6c20 	.word	0x000d6c20
   d499c:	2003e3b8 	.word	0x2003e3b8
   d49a0:	000d6c2b 	.word	0x000d6c2b
   d49a4:	2003e390 	.word	0x2003e390
   d49a8:	2003e391 	.word	0x2003e391

000d49ac <loop>:
}



// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d49ac:	b510      	push	{r4, lr}
  do {
    successRead = getID();
   d49ae:	4c06      	ldr	r4, [pc, #24]	; (d49c8 <loop+0x1c>)
   d49b0:	f7ff fb8a 	bl	d40c8 <_Z5getIDv>
   d49b4:	7020      	strb	r0, [r4, #0]
  }
  while(!successRead);
   d49b6:	2800      	cmp	r0, #0
   d49b8:	d0fa      	beq.n	d49b0 <loop+0x4>
  successRead = false;
   d49ba:	4b03      	ldr	r3, [pc, #12]	; (d49c8 <loop+0x1c>)
   d49bc:	2200      	movs	r2, #0
   d49be:	701a      	strb	r2, [r3, #0]
  unlock();
   d49c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  do {
    successRead = getID();
  }
  while(!successRead);
  successRead = false;
  unlock();
   d49c4:	f7ff bde4 	b.w	d4590 <_Z6unlockv>
   d49c8:	2003e391 	.word	0x2003e391

000d49cc <_GLOBAL__sub_I_SystemMode>:
   d49cc:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d49ce:	4c13      	ldr	r4, [pc, #76]	; (d4a1c <_GLOBAL__sub_I_SystemMode+0x50>)
SYSTEM_MODE(MANUAL);
   d49d0:	4d13      	ldr	r5, [pc, #76]	; (d4a20 <_GLOBAL__sub_I_SystemMode+0x54>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d49d2:	f000 fea1 	bl	d5718 <HAL_Pin_Map>
   d49d6:	2300      	movs	r3, #0
   d49d8:	6023      	str	r3, [r4, #0]
   d49da:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d49dc:	71a3      	strb	r3, [r4, #6]
   d49de:	8123      	strh	r3, [r4, #8]
   d49e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d49e4:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d49e6:	2003      	movs	r0, #3
   d49e8:	f001 f816 	bl	d5a18 <set_system_mode>
   d49ec:	4620      	mov	r0, r4
#define NUMPIXELS 12
#define DELAYVAL 250
#define FADEVAL 5
#define MAXVAL 50

Adafruit_NeoPixel pixels(NUMPIXELS, LED_PIN, WS2812B);
   d49ee:	4c0d      	ldr	r4, [pc, #52]	; (d4a24 <_GLOBAL__sub_I_SystemMode+0x58>)
SYSTEM_MODE(MANUAL);
   d49f0:	490d      	ldr	r1, [pc, #52]	; (d4a28 <_GLOBAL__sub_I_SystemMode+0x5c>)
   d49f2:	462a      	mov	r2, r5
   d49f4:	f001 fe84 	bl	d6700 <__aeabi_atexit>
#define NUMPIXELS 12
#define DELAYVAL 250
#define FADEVAL 5
#define MAXVAL 50

Adafruit_NeoPixel pixels(NUMPIXELS, LED_PIN, WS2812B);
   d49f8:	2302      	movs	r3, #2
   d49fa:	2206      	movs	r2, #6
   d49fc:	210c      	movs	r1, #12
   d49fe:	4620      	mov	r0, r4
   d4a00:	f000 fc6d 	bl	d52de <_ZN17Adafruit_NeoPixelC1Ethh>
   d4a04:	462a      	mov	r2, r5
   d4a06:	4909      	ldr	r1, [pc, #36]	; (d4a2c <_GLOBAL__sub_I_SystemMode+0x60>)
   d4a08:	4620      	mov	r0, r4
   d4a0a:	f001 fe79 	bl	d6700 <__aeabi_atexit>

#define RST_PIN         D5         
#define SS_PIN          D4

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance
   d4a0e:	2205      	movs	r2, #5
   d4a10:	2104      	movs	r1, #4
   d4a12:	4807      	ldr	r0, [pc, #28]	; (d4a30 <_GLOBAL__sub_I_SystemMode+0x64>)
    successRead = getID();
  }
  while(!successRead);
  successRead = false;
  unlock();
   d4a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
Adafruit_NeoPixel pixels(NUMPIXELS, LED_PIN, WS2812B);

#define RST_PIN         D5         
#define SS_PIN          D4

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance
   d4a18:	f000 b80c 	b.w	d4a34 <_ZN7MFRC522C1Ehh>
   d4a1c:	2003e394 	.word	0x2003e394
   d4a20:	2003e380 	.word	0x2003e380
   d4a24:	2003e3b8 	.word	0x2003e3b8
   d4a28:	000d40af 	.word	0x000d40af
   d4a2c:	000d523f 	.word	0x000d523f
   d4a30:	2003e3a0 	.word	0x2003e3a0

000d4a34 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   d4a34:	b538      	push	{r3, r4, r5, lr}
   d4a36:	4604      	mov	r4, r0
   d4a38:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   d4a3a:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   d4a3c:	2101      	movs	r1, #1

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   d4a3e:	4615      	mov	r5, r2
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
	pinMode(_chipSelectPin, OUTPUT);
   d4a40:	f001 fdcc 	bl	d65dc <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   d4a44:	7b20      	ldrb	r0, [r4, #12]
   d4a46:	2101      	movs	r1, #1
   d4a48:	f001 fdd9 	bl	d65fe <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   d4a4c:	4628      	mov	r0, r5
	_chipSelectPin = chipSelectPin;
	pinMode(_chipSelectPin, OUTPUT);
	digitalWrite(_chipSelectPin, HIGH);
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
   d4a4e:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   d4a50:	2101      	movs	r1, #1
   d4a52:	f001 fdc3 	bl	d65dc <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   d4a56:	7b60      	ldrb	r0, [r4, #13]
   d4a58:	2100      	movs	r1, #0
   d4a5a:	f001 fdd0 	bl	d65fe <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   d4a5e:	4620      	mov	r0, r4
   d4a60:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4a64 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4a64:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4a66:	4d09      	ldr	r5, [pc, #36]	; (d4a8c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4a68:	6829      	ldr	r1, [r5, #0]
   d4a6a:	f011 0401 	ands.w	r4, r1, #1
   d4a6e:	d10a      	bne.n	d4a86 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4a70:	4628      	mov	r0, r5
   d4a72:	f7ff fb14 	bl	d409e <__cxa_guard_acquire>
   d4a76:	b130      	cbz	r0, d4a86 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4a78:	4621      	mov	r1, r4
   d4a7a:	4805      	ldr	r0, [pc, #20]	; (d4a90 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4a7c:	f001 f89c 	bl	d5bb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4a80:	4628      	mov	r0, r5
   d4a82:	f7ff fb11 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }
   d4a86:	4802      	ldr	r0, [pc, #8]	; (d4a90 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4a88:	bd38      	pop	{r3, r4, r5, pc}
   d4a8a:	bf00      	nop
   d4a8c:	2003e384 	.word	0x2003e384
   d4a90:	2003e388 	.word	0x2003e388

000d4a94 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d4a94:	b510      	push	{r4, lr}
   d4a96:	4604      	mov	r4, r0
        return instance().transfer(data);
   d4a98:	f7ff ffe4 	bl	d4a64 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4a9c:	4621      	mov	r1, r4
    }
   d4a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4aa2:	f001 b8a4 	b.w	d5bee <_ZN8SPIClass8transferEh>

000d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
   d4aa6:	b570      	push	{r4, r5, r6, lr}
   d4aa8:	4604      	mov	r4, r0
   d4aaa:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   d4aac:	7b00      	ldrb	r0, [r0, #12]
   d4aae:	2100      	movs	r1, #0
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
   d4ab0:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   d4ab2:	f001 fda4 	bl	d65fe <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   d4ab6:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   d4aba:	f7ff ffeb 	bl	d4a94 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	SPI.transfer(value);
   d4abe:	4628      	mov	r0, r5
   d4ac0:	f7ff ffe8 	bl	d4a94 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   d4ac4:	7b20      	ldrb	r0, [r4, #12]
   d4ac6:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   d4ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
									byte value		///< The value to write.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	SPI.transfer(value);
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   d4acc:	f001 bd97 	b.w	d65fe <digitalWrite>

000d4ad0 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
   d4ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ad2:	460d      	mov	r5, r1
   d4ad4:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   d4ad6:	2100      	movs	r1, #0
   d4ad8:	7b00      	ldrb	r0, [r0, #12]
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
   d4ada:	461f      	mov	r7, r3
   d4adc:	4614      	mov	r4, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   d4ade:	f001 fd8e 	bl	d65fe <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   d4ae2:	f005 007e 	and.w	r0, r5, #126	; 0x7e
   d4ae6:	f7ff ffd5 	bl	d4a94 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
   d4aea:	3c01      	subs	r4, #1
   d4aec:	1e7d      	subs	r5, r7, #1
   d4aee:	443c      	add	r4, r7
	for (byte index = 0; index < count; index++) {
   d4af0:	42a5      	cmp	r5, r4
   d4af2:	d004      	beq.n	d4afe <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2e>
		SPI.transfer(values[index]);
   d4af4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   d4af8:	f7ff ffcc 	bl	d4a94 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
   d4afc:	e7f8      	b.n	d4af0 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x20>
		SPI.transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   d4afe:	7b30      	ldrb	r0, [r6, #12]
   d4b00:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   d4b02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
		SPI.transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   d4b06:	f001 bd7a 	b.w	d65fe <digitalWrite>

000d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
   d4b0a:	b538      	push	{r3, r4, r5, lr}
   d4b0c:	4605      	mov	r5, r0
   d4b0e:	460c      	mov	r4, r1
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   d4b10:	7b00      	ldrb	r0, [r0, #12]
   d4b12:	2100      	movs	r1, #0
   d4b14:	f001 fd73 	bl	d65fe <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   d4b18:	f004 007e 	and.w	r0, r4, #126	; 0x7e
   d4b1c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   d4b20:	f7ff ffb8 	bl	d4a94 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   d4b24:	2000      	movs	r0, #0
   d4b26:	f7ff ffb5 	bl	d4a94 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   d4b2a:	2101      	movs	r1, #1
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   d4b2c:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   d4b2e:	7b28      	ldrb	r0, [r5, #12]
   d4b30:	f001 fd65 	bl	d65fe <digitalWrite>
	return value;
} // End PCD_ReadRegister()
   d4b34:	4620      	mov	r0, r4
   d4b36:	bd38      	pop	{r3, r4, r5, pc}

000d4b38 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
   d4b38:	b570      	push	{r4, r5, r6, lr}
   d4b3a:	4605      	mov	r5, r0
   d4b3c:	460e      	mov	r6, r1
   d4b3e:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
   d4b40:	f7ff ffe3 	bl	d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   d4b44:	ea40 0204 	orr.w	r2, r0, r4
   d4b48:	4631      	mov	r1, r6
   d4b4a:	4628      	mov	r0, r5
   d4b4c:	b2d2      	uxtb	r2, r2
} // End PCD_SetRegisterBitMask()
   d4b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   d4b52:	f7ff bfa8 	b.w	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000d4b56 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
   d4b56:	b570      	push	{r4, r5, r6, lr}
   d4b58:	4605      	mov	r5, r0
   d4b5a:	460e      	mov	r6, r1
   d4b5c:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
   d4b5e:	f7ff ffd4 	bl	d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   d4b62:	ea20 0204 	bic.w	r2, r0, r4
   d4b66:	4631      	mov	r1, r6
   d4b68:	4628      	mov	r0, r5
   d4b6a:	b2d2      	uxtb	r2, r2
} // End PCD_ClearRegisterBitMask()
   d4b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   d4b70:	f7ff bf99 	b.w	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000d4b74 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
   d4b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b76:	4604      	mov	r4, r0
   d4b78:	4615      	mov	r5, r2
   d4b7a:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   d4b7c:	2200      	movs	r2, #0
   d4b7e:	2102      	movs	r1, #2
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
   d4b80:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   d4b82:	f7ff ff90 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   d4b86:	2204      	movs	r2, #4
   d4b88:	210a      	movs	r1, #10
   d4b8a:	4620      	mov	r0, r4
   d4b8c:	f7ff ff8b 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   d4b90:	2280      	movs	r2, #128	; 0x80
   d4b92:	2114      	movs	r1, #20
   d4b94:	4620      	mov	r0, r4
   d4b96:	f7ff ffcf 	bl	d4b38 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   d4b9a:	462a      	mov	r2, r5
   d4b9c:	463b      	mov	r3, r7
   d4b9e:	2112      	movs	r1, #18
   d4ba0:	4620      	mov	r0, r4
   d4ba2:	f7ff ff95 	bl	d4ad0 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   d4ba6:	2203      	movs	r2, #3
   d4ba8:	2102      	movs	r1, #2
   d4baa:	4620      	mov	r0, r4
   d4bac:	f7ff ff7b 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   d4bb0:	f241 3588 	movw	r5, #5000	; 0x1388
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73�s.
	word i = 5000;
	byte n;
	while (1) {
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   d4bb4:	210a      	movs	r1, #10
   d4bb6:	4620      	mov	r0, r4
   d4bb8:	f7ff ffa7 	bl	d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   d4bbc:	0743      	lsls	r3, r0, #29
   d4bbe:	d405      	bmi.n	d4bcc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
   d4bc0:	3d01      	subs	r5, #1
   d4bc2:	b2ad      	uxth	r5, r5
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   d4bc4:	2d00      	cmp	r5, #0
   d4bc6:	d1f5      	bne.n	d4bb4 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   d4bc8:	2004      	movs	r0, #4
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
	result[1] = PCD_ReadRegister(CRCResultRegH);
	return STATUS_OK;
} // End PCD_CalculateCRC()
   d4bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
			return STATUS_TIMEOUT;
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   d4bcc:	2200      	movs	r2, #0
   d4bce:	4620      	mov	r0, r4
   d4bd0:	2102      	movs	r1, #2
   d4bd2:	f7ff ff68 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
   d4bd6:	2144      	movs	r1, #68	; 0x44
   d4bd8:	4620      	mov	r0, r4
   d4bda:	f7ff ff96 	bl	d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   d4bde:	2142      	movs	r1, #66	; 0x42
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
   d4be0:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   d4be2:	4620      	mov	r0, r4
   d4be4:	f7ff ff91 	bl	d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>
   d4be8:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   d4bea:	2001      	movs	r0, #1
   d4bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bee <_ZN7MFRC5229PCD_ResetEv>:
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
   d4bee:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   d4bf0:	220f      	movs	r2, #15
   d4bf2:	2102      	movs	r1, #2
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
   d4bf4:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   d4bf6:	f7ff ff56 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
	delay(50);
   d4bfa:	2032      	movs	r0, #50	; 0x32
   d4bfc:	f001 f8ac 	bl	d5d58 <delay>
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   d4c00:	2102      	movs	r1, #2
   d4c02:	4620      	mov	r0, r4
   d4c04:	f7ff ff81 	bl	d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>
   d4c08:	06c3      	lsls	r3, r0, #27
   d4c0a:	d4f9      	bmi.n	d4c00 <_ZN7MFRC5229PCD_ResetEv+0x12>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
} // End PCD_Reset()
   d4c0c:	bd10      	pop	{r4, pc}

000d4c0e <_ZN7MFRC52213PCD_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
   d4c0e:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   d4c10:	2128      	movs	r1, #40	; 0x28

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
   d4c12:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   d4c14:	f7ff ff79 	bl	d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   d4c18:	f000 0303 	and.w	r3, r0, #3
   d4c1c:	2b03      	cmp	r3, #3
   d4c1e:	d008      	beq.n	d4c32 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   d4c20:	f040 0203 	orr.w	r2, r0, #3
   d4c24:	b2d2      	uxtb	r2, r2
   d4c26:	4620      	mov	r0, r4
   d4c28:	2128      	movs	r1, #40	; 0x28
	}
} // End PCD_AntennaOn()
   d4c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
	byte value = PCD_ReadRegister(TxControlReg);
	if ((value & 0x03) != 0x03) {
		PCD_WriteRegister(TxControlReg, value | 0x03);
   d4c2e:	f7ff bf3a 	b.w	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   d4c32:	bd10      	pop	{r4, pc}

000d4c34 <_ZN7MFRC5228PCD_InitEv>:
/////////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MFRC522 chip.
 */
void MFRC522::PCD_Init() {
   d4c34:	b510      	push	{r4, lr}
   d4c36:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   d4c38:	7b40      	ldrb	r0, [r0, #13]
   d4c3a:	f001 fcf9 	bl	d6630 <digitalRead>
   d4c3e:	b938      	cbnz	r0, d4c50 <_ZN7MFRC5228PCD_InitEv+0x1c>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   d4c40:	7b60      	ldrb	r0, [r4, #13]
   d4c42:	2101      	movs	r1, #1
   d4c44:	f001 fcdb 	bl	d65fe <digitalWrite>
		// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
		delay(50);
   d4c48:	2032      	movs	r0, #50	; 0x32
   d4c4a:	f001 f885 	bl	d5d58 <delay>
   d4c4e:	e002      	b.n	d4c56 <_ZN7MFRC5228PCD_InitEv+0x22>
	}
	else { // Perform a soft reset
		PCD_Reset();
   d4c50:	4620      	mov	r0, r4
   d4c52:	f7ff ffcc 	bl	d4bee <_ZN7MFRC5229PCD_ResetEv>
	}
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   d4c56:	4620      	mov	r0, r4
   d4c58:	2280      	movs	r2, #128	; 0x80
   d4c5a:	2154      	movs	r1, #84	; 0x54
   d4c5c:	f7ff ff23 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   d4c60:	4620      	mov	r0, r4
   d4c62:	22a9      	movs	r2, #169	; 0xa9
   d4c64:	2156      	movs	r1, #86	; 0x56
   d4c66:	f7ff ff1e 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	2203      	movs	r2, #3
   d4c6e:	2158      	movs	r1, #88	; 0x58
   d4c70:	f7ff ff19 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   d4c74:	4620      	mov	r0, r4
   d4c76:	22e8      	movs	r2, #232	; 0xe8
   d4c78:	215a      	movs	r1, #90	; 0x5a
   d4c7a:	f7ff ff14 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   d4c7e:	4620      	mov	r0, r4
   d4c80:	2240      	movs	r2, #64	; 0x40
   d4c82:	212a      	movs	r1, #42	; 0x2a
   d4c84:	f7ff ff0f 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   d4c88:	4620      	mov	r0, r4
   d4c8a:	223d      	movs	r2, #61	; 0x3d
   d4c8c:	2122      	movs	r1, #34	; 0x22
   d4c8e:	f7ff ff0a 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   d4c92:	4620      	mov	r0, r4
} // End PCD_Init()
   d4c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
    PCD_WriteRegister(TReloadRegL, 0xE8);
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   d4c98:	f7ff bfb9 	b.w	d4c0e <_ZN7MFRC52213PCD_AntennaOnEv>

000d4c9c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
 */
void MFRC522::PCD_ReadRegister(	byte reg,		///< The register to read from. One of the PCD_Register enums.
								byte count,		///< The number of bytes to read
								byte *values,	///< Byte array to store the values in.
								byte rxAlign	///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
   d4c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ca0:	4680      	mov	r8, r0
   d4ca2:	461f      	mov	r7, r3
   d4ca4:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	if (count == 0) {
   d4ca8:	4615      	mov	r5, r2
   d4caa:	2a00      	cmp	r2, #0
   d4cac:	d03f      	beq.n	d4d2e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x92>
		return;
	}
	//Serial.print("Reading "); 	Serial.print(count); Serial.println(" bytes from register.");
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   d4cae:	f001 017e 	and.w	r1, r1, #126	; 0x7e
   d4cb2:	f041 0680 	orr.w	r6, r1, #128	; 0x80
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   d4cb6:	7b00      	ldrb	r0, [r0, #12]
   d4cb8:	2100      	movs	r1, #0
   d4cba:	f001 fca0 	bl	d65fe <digitalWrite>
	count--;								// One read is performed outside of the loop
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   d4cbe:	4630      	mov	r0, r6
   d4cc0:	f7ff fee8 	bl	d4a94 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	}
	//Serial.print("Reading "); 	Serial.print(count); Serial.println(" bytes from register.");
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	count--;								// One read is performed outside of the loop
   d4cc4:	3d01      	subs	r5, #1
   d4cc6:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   d4cc8:	f04f 0b00 	mov.w	fp, #0
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
				mask |= (1 << i);
   d4ccc:	f04f 0a01 	mov.w	sl, #1
   d4cd0:	fa5f f48b 	uxtb.w	r4, fp
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	count--;								// One read is performed outside of the loop
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
   d4cd4:	42a5      	cmp	r5, r4
   d4cd6:	d91f      	bls.n	d4d18 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x7c>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   d4cd8:	b9b4      	cbnz	r4, d4d08 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x6c>
   d4cda:	f1b9 0f00 	cmp.w	r9, #0
   d4cde:	d013      	beq.n	d4d08 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x6c>
   d4ce0:	464b      	mov	r3, r9
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
   d4ce2:	2b07      	cmp	r3, #7
   d4ce4:	d806      	bhi.n	d4cf4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x58>
				mask |= (1 << i);
   d4ce6:	fa0a f003 	lsl.w	r0, sl, r3
   d4cea:	4304      	orrs	r4, r0
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
   d4cec:	3301      	adds	r3, #1
				mask |= (1 << i);
   d4cee:	b2e4      	uxtb	r4, r4
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
   d4cf0:	b2db      	uxtb	r3, r3
   d4cf2:	e7f6      	b.n	d4ce2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
				mask |= (1 << i);
			}
			// Read value and tell that we want to read the same address again.
			byte value = SPI.transfer(address);	
   d4cf4:	4630      	mov	r0, r6
   d4cf6:	f7ff fecd 	bl	d4a94 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
			// Apply mask to both current value of values[0] and the new data in value.
			values[0] = (values[index] & ~mask) | (value & mask);
   d4cfa:	783b      	ldrb	r3, [r7, #0]
   d4cfc:	4020      	ands	r0, r4
   d4cfe:	ea23 0304 	bic.w	r3, r3, r4
   d4d02:	4318      	orrs	r0, r3
   d4d04:	7038      	strb	r0, [r7, #0]
   d4d06:	e004      	b.n	d4d12 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
		}
		else { // Normal case
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   d4d08:	4630      	mov	r0, r6
   d4d0a:	f7ff fec3 	bl	d4a94 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
   d4d0e:	f807 000b 	strb.w	r0, [r7, fp]
   d4d12:	f10b 0b01 	add.w	fp, fp, #1
   d4d16:	e7db      	b.n	d4cd0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
		}
		index++;
	}
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   d4d18:	2000      	movs	r0, #0
   d4d1a:	f7ff febb 	bl	d4a94 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
   d4d1e:	5578      	strb	r0, [r7, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   d4d20:	2101      	movs	r1, #1
   d4d22:	f898 000c 	ldrb.w	r0, [r8, #12]
} // End PCD_ReadRegister()
   d4d26:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
		}
		index++;
	}
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   d4d2a:	f001 bc68 	b.w	d65fe <digitalWrite>
   d4d2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4d32 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
										byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
										byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
										byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
										byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
										bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
   d4d32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d36:	b087      	sub	sp, #28
   d4d38:	4604      	mov	r4, r0
   d4d3a:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   d4d3e:	9202      	str	r2, [sp, #8]
   d4d40:	468b      	mov	fp, r1
   d4d42:	9f11      	ldr	r7, [sp, #68]	; 0x44
   d4d44:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d4d46:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
   d4d4a:	f1b8 0f00 	cmp.w	r8, #0
   d4d4e:	d002      	beq.n	d4d56 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24>
   d4d50:	f898 6000 	ldrb.w	r6, [r8]
   d4d54:	e000      	b.n	d4d58 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x26>
   d4d56:	4646      	mov	r6, r8
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   d4d58:	2200      	movs	r2, #0
   d4d5a:	2102      	movs	r1, #2
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	9303      	str	r3, [sp, #12]
   d4d60:	f7ff fea1 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   d4d64:	227f      	movs	r2, #127	; 0x7f
   d4d66:	2108      	movs	r1, #8
   d4d68:	4620      	mov	r0, r4
   d4d6a:	f7ff fe9c 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   d4d6e:	eb06 160a 	add.w	r6, r6, sl, lsl #4
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   d4d72:	2280      	movs	r2, #128	; 0x80
   d4d74:	2114      	movs	r1, #20
   d4d76:	4620      	mov	r0, r4
   d4d78:	f7ff fede 	bl	d4b38 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   d4d7c:	b2f6      	uxtb	r6, r6
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   d4d7e:	9b03      	ldr	r3, [sp, #12]
   d4d80:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d4d84:	2112      	movs	r1, #18
   d4d86:	4620      	mov	r0, r4
   d4d88:	f7ff fea2 	bl	d4ad0 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   d4d8c:	4632      	mov	r2, r6
   d4d8e:	211a      	movs	r1, #26
   d4d90:	4620      	mov	r0, r4
   d4d92:	f7ff fe88 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   d4d96:	465a      	mov	r2, fp
   d4d98:	2102      	movs	r1, #2
   d4d9a:	4620      	mov	r0, r4
   d4d9c:	f7ff fe83 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   d4da0:	f1bb 0f0c 	cmp.w	fp, #12
   d4da4:	d104      	bne.n	d4db0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x7e>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   d4da6:	2280      	movs	r2, #128	; 0x80
   d4da8:	211a      	movs	r1, #26
   d4daa:	4620      	mov	r0, r4
   d4dac:	f7ff fec4 	bl	d4b38 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
									 ) {
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
   d4db0:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86�s.
	i = 2000;
	while (1) {
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   d4db4:	2108      	movs	r1, #8
   d4db6:	4620      	mov	r0, r4
   d4db8:	f7ff fea7 	bl	d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   d4dbc:	9b02      	ldr	r3, [sp, #8]
   d4dbe:	4218      	tst	r0, r3
   d4dc0:	d104      	bne.n	d4dcc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9a>
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   d4dc2:	07c2      	lsls	r2, r0, #31
   d4dc4:	d452      	bmi.n	d4e6c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13a>
			return STATUS_TIMEOUT;
		}
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   d4dc6:	3e01      	subs	r6, #1
   d4dc8:	d1f4      	bne.n	d4db4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x82>
   d4dca:	e04f      	b.n	d4e6c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13a>
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   d4dcc:	210c      	movs	r1, #12
   d4dce:	4620      	mov	r0, r4
   d4dd0:	f7ff fe9b 	bl	d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   d4dd4:	f010 0f13 	tst.w	r0, #19
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   d4dd8:	4606      	mov	r6, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   d4dda:	d149      	bne.n	d4e70 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13e>
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
   d4ddc:	b1df      	cbz	r7, d4e16 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
   d4dde:	b1d5      	cbz	r5, d4e16 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   d4de0:	2114      	movs	r1, #20
   d4de2:	4620      	mov	r0, r4
   d4de4:	f7ff fe91 	bl	d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   d4de8:	782b      	ldrb	r3, [r5, #0]
   d4dea:	4283      	cmp	r3, r0
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   d4dec:	4602      	mov	r2, r0
		if (n > *backLen) {
   d4dee:	d341      	bcc.n	d4e74 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x142>
			return STATUS_NO_ROOM;
		}
		*backLen = n;												// Number of bytes returned
   d4df0:	7028      	strb	r0, [r5, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   d4df2:	463b      	mov	r3, r7
   d4df4:	2112      	movs	r1, #18
   d4df6:	4620      	mov	r0, r4
   d4df8:	f8cd a000 	str.w	sl, [sp]
   d4dfc:	f7ff ff4e 	bl	d4c9c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   d4e00:	2118      	movs	r1, #24
   d4e02:	4620      	mov	r0, r4
   d4e04:	f7ff fe81 	bl	d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>
   d4e08:	f000 0907 	and.w	r9, r0, #7
		if (validBits) {
   d4e0c:	f1b8 0f00 	cmp.w	r8, #0
   d4e10:	d001      	beq.n	d4e16 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
			*validBits = _validBits;
   d4e12:	f888 9000 	strb.w	r9, [r8]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
   d4e16:	0733      	lsls	r3, r6, #28
   d4e18:	d42e      	bmi.n	d4e78 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
		return STATUS_COLLISION;
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
   d4e1a:	b37f      	cbz	r7, d4e7c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
   d4e1c:	b375      	cbz	r5, d4e7c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
   d4e1e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d4e22:	b35b      	cbz	r3, d4e7c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
   d4e24:	782a      	ldrb	r2, [r5, #0]
   d4e26:	2a01      	cmp	r2, #1
   d4e28:	d104      	bne.n	d4e34 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x102>
   d4e2a:	f1b9 0f04 	cmp.w	r9, #4
   d4e2e:	d127      	bne.n	d4e80 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
			return STATUS_MIFARE_NACK;
   d4e30:	2009      	movs	r0, #9
   d4e32:	e026      	b.n	d4e82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
   d4e34:	d924      	bls.n	d4e80 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
   d4e36:	f1b9 0f00 	cmp.w	r9, #0
   d4e3a:	d121      	bne.n	d4e80 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
			return STATUS_CRC_WRONG;
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		byte controlBuffer[2]; 
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   d4e3c:	3a02      	subs	r2, #2
   d4e3e:	ab05      	add	r3, sp, #20
   d4e40:	b2d2      	uxtb	r2, r2
   d4e42:	4639      	mov	r1, r7
   d4e44:	4620      	mov	r0, r4
   d4e46:	f7ff fe95 	bl	d4b74 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   d4e4a:	2801      	cmp	r0, #1
   d4e4c:	d119      	bne.n	d4e82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
			return n;
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   d4e4e:	782b      	ldrb	r3, [r5, #0]
   d4e50:	441f      	add	r7, r3
   d4e52:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d4e56:	f817 2c02 	ldrb.w	r2, [r7, #-2]
   d4e5a:	429a      	cmp	r2, r3
   d4e5c:	d110      	bne.n	d4e80 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
   d4e5e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   d4e62:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d4e66:	429a      	cmp	r2, r3
   d4e68:	d10a      	bne.n	d4e80 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
   d4e6a:	e00a      	b.n	d4e82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
			return STATUS_TIMEOUT;
   d4e6c:	2004      	movs	r0, #4
   d4e6e:	e008      	b.n	d4e82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
		return STATUS_ERROR;
   d4e70:	2002      	movs	r0, #2
   d4e72:	e006      	b.n	d4e82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
		if (n > *backLen) {
			return STATUS_NO_ROOM;
   d4e74:	2005      	movs	r0, #5
   d4e76:	e004      	b.n	d4e82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
		return STATUS_COLLISION;
   d4e78:	2003      	movs	r0, #3
   d4e7a:	e002      	b.n	d4e82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
   d4e7c:	2001      	movs	r0, #1
   d4e7e:	e000      	b.n	d4e82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		if (*backLen == 1 && _validBits == 4) {
			return STATUS_MIFARE_NACK;
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
			return STATUS_CRC_WRONG;
   d4e80:	2008      	movs	r0, #8
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
} // End PCD_CommunicateWithPICC()
   d4e82:	b007      	add	sp, #28
   d4e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4e88 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
									byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
									byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
									byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits. Default NULL.
									byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
									bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
								 ) {
   d4e88:	b510      	push	{r4, lr}
   d4e8a:	b086      	sub	sp, #24
	byte waitIRq = 0x30;		// RxIRq and IdleIRq
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   d4e8c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d4e90:	9405      	str	r4, [sp, #20]
   d4e92:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   d4e96:	9404      	str	r4, [sp, #16]
   d4e98:	9c09      	ldr	r4, [sp, #36]	; 0x24
   d4e9a:	9403      	str	r4, [sp, #12]
   d4e9c:	9c08      	ldr	r4, [sp, #32]
   d4e9e:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
   d4ea2:	460b      	mov	r3, r1
   d4ea4:	2230      	movs	r2, #48	; 0x30
   d4ea6:	210c      	movs	r1, #12
   d4ea8:	f7ff ff43 	bl	d4d32 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   d4eac:	b006      	add	sp, #24
   d4eae:	bd10      	pop	{r4, pc}

000d4eb0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
									byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
									byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							   ) {
   d4eb0:	b570      	push	{r4, r5, r6, lr}
   d4eb2:	b088      	sub	sp, #32
   d4eb4:	4606      	mov	r6, r0
   d4eb6:	461c      	mov	r4, r3
   d4eb8:	f88d 1017 	strb.w	r1, [sp, #23]
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   d4ebc:	4615      	mov	r5, r2
   d4ebe:	b312      	cbz	r2, d4f06 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
   d4ec0:	781b      	ldrb	r3, [r3, #0]
   d4ec2:	2b01      	cmp	r3, #1
   d4ec4:	d91f      	bls.n	d4f06 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   d4ec6:	2280      	movs	r2, #128	; 0x80
   d4ec8:	211c      	movs	r1, #28
   d4eca:	f7ff fe44 	bl	d4b56 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   d4ece:	2307      	movs	r3, #7
   d4ed0:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   d4ed4:	2300      	movs	r3, #0
   d4ed6:	9303      	str	r3, [sp, #12]
   d4ed8:	9302      	str	r3, [sp, #8]
   d4eda:	f10d 031f 	add.w	r3, sp, #31
   d4ede:	9301      	str	r3, [sp, #4]
   d4ee0:	9400      	str	r4, [sp, #0]
   d4ee2:	462b      	mov	r3, r5
   d4ee4:	2201      	movs	r2, #1
   d4ee6:	f10d 0117 	add.w	r1, sp, #23
   d4eea:	4630      	mov	r0, r6
   d4eec:	f7ff ffcc 	bl	d4e88 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   d4ef0:	2801      	cmp	r0, #1
   d4ef2:	d10b      	bne.n	d4f0c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   d4ef4:	7820      	ldrb	r0, [r4, #0]
   d4ef6:	2802      	cmp	r0, #2
   d4ef8:	d107      	bne.n	d4f0a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5a>
   d4efa:	f89d 301f 	ldrb.w	r3, [sp, #31]
   d4efe:	2b00      	cmp	r3, #0
		return STATUS_ERROR;
	}
	return STATUS_OK;
   d4f00:	bf08      	it	eq
   d4f02:	2001      	moveq	r0, #1
   d4f04:	e002      	b.n	d4f0c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
							   ) {
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
		return STATUS_NO_ROOM;
   d4f06:	2005      	movs	r0, #5
   d4f08:	e000      	b.n	d4f0c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
	if (status != STATUS_OK) {
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
		return STATUS_ERROR;
   d4f0a:	2002      	movs	r0, #2
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
   d4f0c:	b008      	add	sp, #32
   d4f0e:	bd70      	pop	{r4, r5, r6, pc}

000d4f10 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_RequestA(byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
							byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							) {
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   d4f10:	4613      	mov	r3, r2
   d4f12:	460a      	mov	r2, r1
   d4f14:	2126      	movs	r1, #38	; 0x26
   d4f16:	f7ff bfcb 	b.w	d4eb0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000d4f1a <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   d4f1a:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   d4f1c:	aa02      	add	r2, sp, #8
   d4f1e:	2302      	movs	r3, #2
   d4f20:	f802 3d05 	strb.w	r3, [r2, #-5]!
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   d4f24:	a901      	add	r1, sp, #4
   d4f26:	f7ff fff3 	bl	d4f10 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   d4f2a:	2801      	cmp	r0, #1
   d4f2c:	d002      	beq.n	d4f34 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x1a>
   d4f2e:	1ec3      	subs	r3, r0, #3
   d4f30:	4258      	negs	r0, r3
   d4f32:	4158      	adcs	r0, r3
} // End PICC_IsNewCardPresent()
   d4f34:	b003      	add	sp, #12
   d4f36:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f3a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
   d4f3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
   d4f3e:	2a50      	cmp	r2, #80	; 0x50
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
   d4f40:	b08b      	sub	sp, #44	; 0x2c
   d4f42:	4683      	mov	fp, r0
   d4f44:	468a      	mov	sl, r1
   d4f46:	4617      	mov	r7, r2
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
   d4f48:	f200 80f5 	bhi.w	d5136 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fc>
		return STATUS_INVALID;
	}

	// Prepare MFRC522
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   d4f4c:	2280      	movs	r2, #128	; 0x80
   d4f4e:	211c      	movs	r1, #28
   d4f50:	f7ff fe01 	bl	d4b56 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
	bool uidComplete;
	bool selectDone;
	bool useCascadeTag;
	byte cascadeLevel	= 1; 
   d4f54:	2501      	movs	r5, #1

	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
   d4f56:	2d02      	cmp	r5, #2
   d4f58:	d010      	beq.n	d4f7c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x42>
   d4f5a:	2d03      	cmp	r5, #3
   d4f5c:	d01b      	beq.n	d4f96 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x5c>
   d4f5e:	2d01      	cmp	r5, #1
   d4f60:	f040 80eb 	bne.w	d513a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
   d4f64:	2393      	movs	r3, #147	; 0x93
   d4f66:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 0;
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   d4f6a:	b1d7      	cbz	r7, d4fa2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
   d4f6c:	f89a 3000 	ldrb.w	r3, [sl]
   d4f70:	2b04      	cmp	r3, #4
   d4f72:	bf94      	ite	ls
   d4f74:	2300      	movls	r3, #0
   d4f76:	2301      	movhi	r3, #1
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
				uidIndex = 0;
   d4f78:	2600      	movs	r6, #0
   d4f7a:	e016      	b.n	d4faa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
   d4f7c:	f06f 036a 	mvn.w	r3, #106	; 0x6a
   d4f80:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 3;
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   d4f84:	b17f      	cbz	r7, d4fa6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6c>
   d4f86:	f89a 3000 	ldrb.w	r3, [sl]
   d4f8a:	2b07      	cmp	r3, #7
   d4f8c:	bf94      	ite	ls
   d4f8e:	2300      	movls	r3, #0
   d4f90:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
				uidIndex = 3;
   d4f92:	2603      	movs	r6, #3
   d4f94:	e009      	b.n	d4faa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
				break;
			
			case 3:
				buffer[0] = PICC_CMD_SEL_CL3;
   d4f96:	2397      	movs	r3, #151	; 0x97
   d4f98:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   d4f9c:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   d4f9e:	2300      	movs	r3, #0
				break;
   d4fa0:	e003      	b.n	d4faa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
				uidIndex = 0;
   d4fa2:	463e      	mov	r6, r7
   d4fa4:	e000      	b.n	d4fa8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6e>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
				uidIndex = 3;
   d4fa6:	2603      	movs	r6, #3
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   d4fa8:	463b      	mov	r3, r7
				return STATUS_INTERNAL_ERROR;
				break;
		}
		
		// How many UID bits are known in this Cascade Level?
		currentLevelKnownBits = validBits - (8 * uidIndex);
   d4faa:	eba7 04c6 	sub.w	r4, r7, r6, lsl #3
   d4fae:	b264      	sxtb	r4, r4
   d4fb0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (currentLevelKnownBits < 0) {
			currentLevelKnownBits = 0;
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
		if (useCascadeTag) {
   d4fb4:	b12b      	cbz	r3, d4fc2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x88>
			buffer[index++] = PICC_CMD_CT;
   d4fb6:	2288      	movs	r2, #136	; 0x88
   d4fb8:	f88d 201e 	strb.w	r2, [sp, #30]
   d4fbc:	f04f 0803 	mov.w	r8, #3
   d4fc0:	e001      	b.n	d4fc6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8c>
		currentLevelKnownBits = validBits - (8 * uidIndex);
		if (currentLevelKnownBits < 0) {
			currentLevelKnownBits = 0;
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
   d4fc2:	f04f 0802 	mov.w	r8, #2
		if (useCascadeTag) {
			buffer[index++] = PICC_CMD_CT;
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   d4fc6:	b2e1      	uxtb	r1, r4
   d4fc8:	f011 0207 	ands.w	r2, r1, #7
   d4fcc:	bf18      	it	ne
   d4fce:	2201      	movne	r2, #1
   d4fd0:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   d4fd4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   d4fd8:	d106      	bne.n	d4fe8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xae>
			for (count = 0; count < bytesToCopy; count++) {
				buffer[index++] = uid->uidByte[uidIndex + count];
			}
		}
		// Now that the data has been copied we need to include the 8 bits in CT in currentLevelKnownBits
		if (useCascadeTag) {
   d4fda:	2b00      	cmp	r3, #0
   d4fdc:	f000 808b 	beq.w	d50f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1bc>
			currentLevelKnownBits += 8;
   d4fe0:	f101 0408 	add.w	r4, r1, #8
   d4fe4:	b264      	sxtb	r4, r4
   d4fe6:	e086      	b.n	d50f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1bc>
		if (useCascadeTag) {
			buffer[index++] = PICC_CMD_CT;
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   d4fe8:	2b00      	cmp	r3, #0
   d4fea:	bf14      	ite	ne
   d4fec:	2003      	movne	r0, #3
   d4fee:	2004      	moveq	r0, #4
   d4ff0:	4282      	cmp	r2, r0
   d4ff2:	bf28      	it	cs
   d4ff4:	4602      	movcs	r2, r0
   d4ff6:	2000      	movs	r0, #0
			if (bytesToCopy > maxBytes) { 
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
				buffer[index++] = uid->uidByte[uidIndex + count];
   d4ff8:	eb08 0e00 	add.w	lr, r8, r0
   d4ffc:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   d5000:	fa5c fe8e 	uxtab	lr, ip, lr
   d5004:	eb06 0c00 	add.w	ip, r6, r0
   d5008:	44d4      	add	ip, sl
   d500a:	3001      	adds	r0, #1
   d500c:	f89c c001 	ldrb.w	ip, [ip, #1]
   d5010:	f80e cc0c 	strb.w	ip, [lr, #-12]
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
			if (bytesToCopy > maxBytes) { 
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
   d5014:	fa5f fe80 	uxtb.w	lr, r0
   d5018:	4596      	cmp	lr, r2
   d501a:	d3ed      	bcc.n	d4ff8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
   d501c:	e7dd      	b.n	d4fda <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
				currentLevelKnownBits = collisionPos;
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
				buffer[index]	|= (1 << count); 
			}
			else if (result != STATUS_OK) {
   d501e:	2801      	cmp	r0, #1
   d5020:	f040 808d 	bne.w	d513e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x204>
				return result;
			}
			else { // STATUS_OK
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   d5024:	2c1f      	cmp	r4, #31
   d5026:	f300 808c 	bgt.w	d5142 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
					selectDone = true; // No more anticollision 
					// We continue below outside the while.
				}
				else { // This was an ANTICOLLISION.
					// We now have all 32 bits of the UID in this Cascade Level
					currentLevelKnownBits = 32;
   d502a:	2420      	movs	r4, #32
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   d502c:	f04f 0370 	mov.w	r3, #112	; 0x70
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   d5030:	f89d 201e 	ldrb.w	r2, [sp, #30]
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   d5034:	f88d 301d 	strb.w	r3, [sp, #29]
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   d5038:	f89d 301f 	ldrb.w	r3, [sp, #31]
   d503c:	4053      	eors	r3, r2
   d503e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   d5042:	405a      	eors	r2, r3
   d5044:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d5048:	4053      	eors	r3, r2
   d504a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   d504e:	2207      	movs	r2, #7
   d5050:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d5054:	a907      	add	r1, sp, #28
   d5056:	4658      	mov	r0, fp
   d5058:	f7ff fd8c 	bl	d4b74 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   d505c:	2801      	cmp	r0, #1
   d505e:	f040 80b7 	bne.w	d51d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
   d5062:	f04f 0300 	mov.w	r3, #0
   d5066:	f88d 301a 	strb.w	r3, [sp, #26]
				bufferUsed		= 9;
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
				responseLength	= 3;
   d506a:	2303      	movs	r3, #3
   d506c:	f88d 301b 	strb.w	r3, [sp, #27]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
				if (result != STATUS_OK) {
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
				bufferUsed		= 9;
   d5070:	2309      	movs	r3, #9
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
   d5072:	f10d 0922 	add.w	r9, sp, #34	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
				if (result != STATUS_OK) {
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
				bufferUsed		= 9;
   d5076:	9304      	str	r3, [sp, #16]
				responseBuffer	= &buffer[index];
				responseLength	= sizeof(buffer) - index;
			}

			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   d5078:	f10d 0828 	add.w	r8, sp, #40	; 0x28
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   d507c:	211a      	movs	r1, #26
				responseBuffer	= &buffer[index];
				responseLength	= sizeof(buffer) - index;
			}

			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   d507e:	f818 3d0e 	ldrb.w	r3, [r8, #-14]!
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   d5082:	9305      	str	r3, [sp, #20]
   d5084:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   d5088:	b2d2      	uxtb	r2, r2
   d508a:	4658      	mov	r0, fp
   d508c:	f7ff fd0b 	bl	d4aa6 <_ZN7MFRC52217PCD_WriteRegisterEhh>

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   d5090:	2300      	movs	r3, #0
   d5092:	9303      	str	r3, [sp, #12]
   d5094:	9b05      	ldr	r3, [sp, #20]
   d5096:	9302      	str	r3, [sp, #8]
   d5098:	f10d 031b 	add.w	r3, sp, #27
   d509c:	f8cd 8004 	str.w	r8, [sp, #4]
   d50a0:	9300      	str	r3, [sp, #0]
   d50a2:	9a04      	ldr	r2, [sp, #16]
   d50a4:	464b      	mov	r3, r9
   d50a6:	a907      	add	r1, sp, #28
   d50a8:	4658      	mov	r0, fp
   d50aa:	f7ff feed 	bl	d4e88 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   d50ae:	2803      	cmp	r0, #3
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   d50b0:	4680      	mov	r8, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   d50b2:	d1b4      	bne.n	d501e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   d50b4:	211c      	movs	r1, #28
   d50b6:	4658      	mov	r0, fp
   d50b8:	f7ff fd27 	bl	d4b0a <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   d50bc:	0681      	lsls	r1, r0, #26
   d50be:	d43e      	bmi.n	d513e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x204>
					return STATUS_COLLISION; // Without a valid collision position we cannot continue
				}
				byte collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
				if (collisionPos == 0) {
					collisionPos = 32;
   d50c0:	f010 001f 	ands.w	r0, r0, #31
   d50c4:	bf08      	it	eq
   d50c6:	2020      	moveq	r0, #32
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   d50c8:	42a0      	cmp	r0, r4
   d50ca:	dd36      	ble.n	d513a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
					return STATUS_INTERNAL_ERROR;
				}
				// Choose the PICC with the bit set.
				currentLevelKnownBits = collisionPos;
   d50cc:	b244      	sxtb	r4, r0
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   d50ce:	3801      	subs	r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
				buffer[index]	|= (1 << count); 
   d50d0:	f000 0307 	and.w	r3, r0, #7
   d50d4:	f010 0007 	ands.w	r0, r0, #7
   d50d8:	bf18      	it	ne
   d50da:	2001      	movne	r0, #1
   d50dc:	eb00 00e4 	add.w	r0, r0, r4, asr #3
   d50e0:	aa0a      	add	r2, sp, #40	; 0x28
   d50e2:	3001      	adds	r0, #1
   d50e4:	4410      	add	r0, r2
   d50e6:	2201      	movs	r2, #1
   d50e8:	fa02 f303 	lsl.w	r3, r2, r3
   d50ec:	f810 2c0c 	ldrb.w	r2, [r0, #-12]
   d50f0:	4313      	orrs	r3, r2
   d50f2:	f800 3c0c 	strb.w	r3, [r0, #-12]
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   d50f6:	2c1f      	cmp	r4, #31
   d50f8:	dc98      	bgt.n	d502c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf2>
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   d50fa:	10e3      	asrs	r3, r4, #3
				responseBuffer	= &buffer[6];
				responseLength	= 3;
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
   d50fc:	f004 0807 	and.w	r8, r4, #7
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   d5100:	3302      	adds	r3, #2
   d5102:	b2db      	uxtb	r3, r3
				responseBuffer	= &buffer[6];
				responseLength	= 3;
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
   d5104:	fa5f f288 	uxtb.w	r2, r8
   d5108:	f88d 201a 	strb.w	r2, [sp, #26]
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
				bufferUsed		= index + (txLastBits ? 1 : 0);
   d510c:	f1b8 0f00 	cmp.w	r8, #0
   d5110:	bf0c      	ite	eq
   d5112:	4698      	moveq	r8, r3
   d5114:	f103 0801 	addne.w	r8, r3, #1
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   d5118:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   d511c:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   d5120:	fa5f f288 	uxtb.w	r2, r8
   d5124:	9204      	str	r2, [sp, #16]
				// Store response in the unused part of buffer
				responseBuffer	= &buffer[index];
   d5126:	aa07      	add	r2, sp, #28
   d5128:	eb02 0903 	add.w	r9, r2, r3
				responseLength	= sizeof(buffer) - index;
   d512c:	f1c3 0309 	rsb	r3, r3, #9
   d5130:	f88d 301b 	strb.w	r3, [sp, #27]
   d5134:	e7a0      	b.n	d5078 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13e>
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
		return STATUS_INVALID;
   d5136:	2007      	movs	r0, #7
   d5138:	e04a      	b.n	d51d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
				byte collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
				if (collisionPos == 0) {
					collisionPos = 32;
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
					return STATUS_INTERNAL_ERROR;
   d513a:	2006      	movs	r0, #6
   d513c:	e048      	b.n	d51d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   d513e:	4640      	mov	r0, r8
   d5140:	e046      	b.n	d51d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
		} // End of while ( ! selectDone)

		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   d5142:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d5146:	2b88      	cmp	r3, #136	; 0x88
   d5148:	d03f      	beq.n	d51ca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x290>
   d514a:	2202      	movs	r2, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   d514c:	2404      	movs	r4, #4
   d514e:	2300      	movs	r3, #0
		for (count = 0; count < bytesToCopy; count++) {
			uid->uidByte[uidIndex + count] = buffer[index++];
   d5150:	18d0      	adds	r0, r2, r3
   d5152:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   d5156:	18f1      	adds	r1, r6, r3
   d5158:	fa5e f080 	uxtab	r0, lr, r0
   d515c:	4451      	add	r1, sl
   d515e:	f810 0c0c 	ldrb.w	r0, [r0, #-12]
   d5162:	7048      	strb	r0, [r1, #1]
   d5164:	3301      	adds	r3, #1
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
		for (count = 0; count < bytesToCopy; count++) {
   d5166:	b2d9      	uxtb	r1, r3
   d5168:	428c      	cmp	r4, r1
   d516a:	d8f1      	bhi.n	d5150 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x216>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   d516c:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d5170:	2b03      	cmp	r3, #3
   d5172:	d126      	bne.n	d51c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x288>
   d5174:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d5178:	bb1b      	cbnz	r3, d51c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x288>
			return STATUS_ERROR;
		}
		// Verify CRC_A - do our own calculation and store the control in buffer[2..3] - those bytes are not needed anymore.
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   d517a:	f10d 031e 	add.w	r3, sp, #30
   d517e:	2201      	movs	r2, #1
   d5180:	4649      	mov	r1, r9
   d5182:	4658      	mov	r0, fp
   d5184:	f7ff fcf6 	bl	d4b74 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   d5188:	2801      	cmp	r0, #1
   d518a:	d121      	bne.n	d51d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
			return result;
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   d518c:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d5190:	f899 3001 	ldrb.w	r3, [r9, #1]
   d5194:	429a      	cmp	r2, r3
   d5196:	d116      	bne.n	d51c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28c>
   d5198:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d519c:	f899 3002 	ldrb.w	r3, [r9, #2]
   d51a0:	429a      	cmp	r2, r3
   d51a2:	d110      	bne.n	d51c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28c>
			return STATUS_CRC_WRONG;
		}
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   d51a4:	f899 3000 	ldrb.w	r3, [r9]
   d51a8:	075a      	lsls	r2, r3, #29
   d51aa:	d502      	bpl.n	d51b2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x278>
			cascadeLevel++;
   d51ac:	3501      	adds	r5, #1
   d51ae:	b2ed      	uxtb	r5, r5
   d51b0:	e6d1      	b.n	d4f56 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1c>
			uid->sak = responseBuffer[0];
		}
	} // End of while ( ! uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
   d51b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   d51b6:	3501      	adds	r5, #1
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
			cascadeLevel++;
		}
		else {
			uidComplete = true;
			uid->sak = responseBuffer[0];
   d51b8:	f88a 300b 	strb.w	r3, [sl, #11]
		}
	} // End of while ( ! uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
   d51bc:	f88a 5000 	strb.w	r5, [sl]

	return STATUS_OK;
   d51c0:	e006      	b.n	d51d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
			return STATUS_ERROR;
   d51c2:	2002      	movs	r0, #2
   d51c4:	e004      	b.n	d51d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
		if (result != STATUS_OK) {
			return result;
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
			return STATUS_CRC_WRONG;
   d51c6:	2008      	movs	r0, #8
   d51c8:	e002      	b.n	d51d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
		} // End of while ( ! selectDone)

		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   d51ca:	2203      	movs	r2, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   d51cc:	4614      	mov	r4, r2
   d51ce:	e7be      	b.n	d514e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x214>
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;

	return STATUS_OK;
} // End PICC_Select()
   d51d0:	b00b      	add	sp, #44	; 0x2c
   d51d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d51d6 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   d51d6:	b508      	push	{r3, lr}
	byte result = PICC_Select(&uid);
   d51d8:	2200      	movs	r2, #0
   d51da:	4601      	mov	r1, r0
   d51dc:	f7ff fead 	bl	d4f3a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   d51e0:	1e43      	subs	r3, r0, #1
   d51e2:	4258      	negs	r0, r3
   d51e4:	4158      	adcs	r0, r3
   d51e6:	bd08      	pop	{r3, pc}

000d51e8 <_ZN7MFRC52210PICC_HaltAEv>:
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_HaltA() {
   d51e8:	b570      	push	{r4, r5, r6, lr}
   d51ea:	b086      	sub	sp, #24
	byte result;
	byte buffer[4]; 

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
   d51ec:	2350      	movs	r3, #80	; 0x50
   d51ee:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   d51f2:	2500      	movs	r5, #0
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   d51f4:	f10d 0316 	add.w	r3, sp, #22
   d51f8:	2202      	movs	r2, #2
   d51fa:	a905      	add	r1, sp, #20
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_HaltA() {
   d51fc:	4606      	mov	r6, r0
	byte result;
	byte buffer[4]; 

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
	buffer[1] = 0;
   d51fe:	f88d 5015 	strb.w	r5, [sp, #21]
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   d5202:	f7ff fcb7 	bl	d4b74 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   d5206:	2801      	cmp	r0, #1

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
	buffer[1] = 0;
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   d5208:	4604      	mov	r4, r0
	if (result != STATUS_OK) {
   d520a:	d10f      	bne.n	d522c <_ZN7MFRC52210PICC_HaltAEv+0x44>
	// Send the command.
	// The standard says:
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is an success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   d520c:	9503      	str	r5, [sp, #12]
   d520e:	9502      	str	r5, [sp, #8]
   d5210:	9501      	str	r5, [sp, #4]
   d5212:	9500      	str	r5, [sp, #0]
   d5214:	462b      	mov	r3, r5
   d5216:	2204      	movs	r2, #4
   d5218:	a905      	add	r1, sp, #20
   d521a:	4630      	mov	r0, r6
   d521c:	f7ff fe34 	bl	d4e88 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   d5220:	2804      	cmp	r0, #4
   d5222:	d003      	beq.n	d522c <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_OK;
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
   d5224:	2801      	cmp	r0, #1
   d5226:	bf08      	it	eq
   d5228:	2002      	moveq	r0, #2
   d522a:	e000      	b.n	d522e <_ZN7MFRC52210PICC_HaltAEv+0x46>
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is an success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
	if (result == STATUS_TIMEOUT) {
		return STATUS_OK;
   d522c:	4620      	mov	r0, r4
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
		return STATUS_ERROR;
	}
	return result;
} // End PICC_HaltA()
   d522e:	b006      	add	sp, #24
   d5230:	bd70      	pop	{r4, r5, r6, pc}

000d5232 <_GLOBAL__sub_I__ZN7MFRC522C2Ehh>:
   d5232:	f000 ba71 	b.w	d5718 <HAL_Pin_Map>

000d5236 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5236:	f000 bad7 	b.w	d57e8 <HAL_Timer_Get_Micro_Seconds>

000d523a <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d523a:	f000 bacd 	b.w	d57d8 <HAL_Delay_Microseconds>

000d523e <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d523e:	b510      	push	{r4, lr}
   d5240:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d5242:	68c0      	ldr	r0, [r0, #12]
   d5244:	b108      	cbz	r0, d524a <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d5246:	f000 fc6b 	bl	d5b20 <free>
  if (begun) pinMode(pin, INPUT);
   d524a:	7823      	ldrb	r3, [r4, #0]
   d524c:	b11b      	cbz	r3, d5256 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d524e:	2100      	movs	r1, #0
   d5250:	79e0      	ldrb	r0, [r4, #7]
   d5252:	f001 f9c3 	bl	d65dc <pinMode>
}
   d5256:	4620      	mov	r0, r4
   d5258:	bd10      	pop	{r4, pc}

000d525a <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d525a:	b538      	push	{r3, r4, r5, lr}
   d525c:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d525e:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d5260:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d5262:	b108      	cbz	r0, d5268 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d5264:	f000 fc5c 	bl	d5b20 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d5268:	79a3      	ldrb	r3, [r4, #6]
   d526a:	2b06      	cmp	r3, #6
   d526c:	bf0c      	ite	eq
   d526e:	2004      	moveq	r0, #4
   d5270:	2003      	movne	r0, #3
   d5272:	fb10 f005 	smulbb	r0, r0, r5
   d5276:	b280      	uxth	r0, r0
   d5278:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d527a:	f000 fc49 	bl	d5b10 <malloc>
   d527e:	60e0      	str	r0, [r4, #12]
   d5280:	b128      	cbz	r0, d528e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d5282:	88a2      	ldrh	r2, [r4, #4]
   d5284:	2100      	movs	r1, #0
   d5286:	f001 fbbe 	bl	d6a06 <memset>
    numLEDs = n;
   d528a:	8065      	strh	r5, [r4, #2]
   d528c:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d528e:	80a0      	strh	r0, [r4, #4]
   d5290:	8060      	strh	r0, [r4, #2]
   d5292:	bd38      	pop	{r3, r4, r5, pc}

000d5294 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d5294:	b510      	push	{r4, lr}
   d5296:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d5298:	2101      	movs	r1, #1
   d529a:	79c0      	ldrb	r0, [r0, #7]
   d529c:	f001 f99e 	bl	d65dc <pinMode>
  digitalWrite(pin, LOW);
   d52a0:	2100      	movs	r1, #0
   d52a2:	79e0      	ldrb	r0, [r4, #7]
   d52a4:	f001 f9ab 	bl	d65fe <digitalWrite>
  begun = true;
   d52a8:	2301      	movs	r3, #1
   d52aa:	7023      	strb	r3, [r4, #0]
   d52ac:	bd10      	pop	{r4, pc}

000d52ae <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d52ae:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d52b0:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d52b2:	4605      	mov	r5, r0
   d52b4:	460c      	mov	r4, r1
    if (begun) {
   d52b6:	b11b      	cbz	r3, d52c0 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d52b8:	2100      	movs	r1, #0
   d52ba:	79c0      	ldrb	r0, [r0, #7]
   d52bc:	f001 f98e 	bl	d65dc <pinMode>
    }
    pin = p;
    if (begun) {
   d52c0:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d52c2:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d52c4:	b153      	cbz	r3, d52dc <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d52c6:	b2a4      	uxth	r4, r4
   d52c8:	4620      	mov	r0, r4
   d52ca:	2101      	movs	r1, #1
   d52cc:	f001 f986 	bl	d65dc <pinMode>
        digitalWrite(p, LOW);
   d52d0:	4620      	mov	r0, r4
   d52d2:	2100      	movs	r1, #0
    }
}
   d52d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d52d8:	f001 b991 	b.w	d65fe <digitalWrite>
   d52dc:	bd38      	pop	{r3, r4, r5, pc}

000d52de <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d52de:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d52e0:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d52e2:	4604      	mov	r4, r0
   d52e4:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d52e6:	7183      	strb	r3, [r0, #6]
   d52e8:	7005      	strb	r5, [r0, #0]
   d52ea:	7205      	strb	r5, [r0, #8]
   d52ec:	60c5      	str	r5, [r0, #12]
   d52ee:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d52f0:	f7ff ffb3 	bl	d525a <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d52f4:	4620      	mov	r0, r4
   d52f6:	4631      	mov	r1, r6
   d52f8:	f7ff ffd9 	bl	d52ae <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d52fc:	4620      	mov	r0, r4
   d52fe:	bd70      	pop	{r4, r5, r6, pc}

000d5300 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d5300:	68c3      	ldr	r3, [r0, #12]
   d5302:	2b00      	cmp	r3, #0
   d5304:	f000 818b 	beq.w	d561e <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d5308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d530c:	7983      	ldrb	r3, [r0, #6]
   d530e:	3b02      	subs	r3, #2
   d5310:	b2db      	uxtb	r3, r3
   d5312:	2b04      	cmp	r3, #4
   d5314:	bf9c      	itt	ls
   d5316:	4ac4      	ldrls	r2, [pc, #784]	; (d5628 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d5318:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d531c:	b087      	sub	sp, #28
   d531e:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d5320:	bf88      	it	hi
   d5322:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d5324:	f7ff ff87 	bl	d5236 <micros>
   d5328:	692b      	ldr	r3, [r5, #16]
   d532a:	1ac0      	subs	r0, r0, r3
   d532c:	42a0      	cmp	r0, r4
   d532e:	d3f9      	bcc.n	d5324 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d5330:	4abe      	ldr	r2, [pc, #760]	; (d562c <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d5332:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d5334:	ca07      	ldmia	r2, {r0, r1, r2}
   d5336:	ac06      	add	r4, sp, #24
   d5338:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d533c:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d533e:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d5340:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d5344:	3304      	adds	r3, #4
   d5346:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5348:	b922      	cbnz	r2, d5354 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d534a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d534e:	2b00      	cmp	r3, #0
   d5350:	f2c0 8155 	blt.w	d55fe <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d5354:	9c04      	ldr	r4, [sp, #16]
   d5356:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d535a:	b923      	cbnz	r3, d5366 <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d535c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d5360:	2b00      	cmp	r3, #0
   d5362:	f2c0 813c 	blt.w	d55de <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d5366:	9c05      	ldr	r4, [sp, #20]
   d5368:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d536c:	b91b      	cbnz	r3, d5376 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d536e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d5372:	2b00      	cmp	r3, #0
   d5374:	db6e      	blt.n	d5454 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d5376:	4bae      	ldr	r3, [pc, #696]	; (d5630 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d5378:	79ea      	ldrb	r2, [r5, #7]
   d537a:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d537c:	4cad      	ldr	r4, [pc, #692]	; (d5634 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d537e:	49ae      	ldr	r1, [pc, #696]	; (d5638 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d5380:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d5382:	0112      	lsls	r2, r2, #4
   d5384:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d5386:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d538a:	785b      	ldrb	r3, [r3, #1]
   d538c:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d538e:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d5390:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d5392:	f003 031f 	and.w	r3, r3, #31
   d5396:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d539a:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d539c:	433a      	orrs	r2, r7
   d539e:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d53a0:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d53a2:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d53a4:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d53a8:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d53ac:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d53ae:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d53b0:	2800      	cmp	r0, #0
   d53b2:	d044      	beq.n	d543e <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d53b4:	46cc      	mov	ip, r9
   d53b6:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d53b8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d53bc:	f81c eb01 	ldrb.w	lr, [ip], #1
   d53c0:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d53c2:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d53c4:	6863      	ldr	r3, [r4, #4]
   d53c6:	1a9b      	subs	r3, r3, r2
   d53c8:	2b46      	cmp	r3, #70	; 0x46
   d53ca:	d9fb      	bls.n	d53c4 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d53cc:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d53d0:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d53d4:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d53d8:	ea43 0307 	orr.w	r3, r3, r7
   d53dc:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d53e0:	d02f      	beq.n	d5442 <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d53e2:	6863      	ldr	r3, [r4, #4]
   d53e4:	1a9b      	subs	r3, r3, r2
   d53e6:	2b28      	cmp	r3, #40	; 0x28
   d53e8:	d9fb      	bls.n	d53e2 <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d53ea:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d53ee:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d53f0:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d53f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d53f8:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d53fc:	d1e2      	bne.n	d53c4 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d53fe:	ebc9 030c 	rsb	r3, r9, ip
   d5402:	88a8      	ldrh	r0, [r5, #4]
   d5404:	b29b      	uxth	r3, r3
   d5406:	4298      	cmp	r0, r3
   d5408:	d8d8      	bhi.n	d53bc <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d540a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d540e:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d5412:	6863      	ldr	r3, [r4, #4]
   d5414:	1a9b      	subs	r3, r3, r2
   d5416:	2b46      	cmp	r3, #70	; 0x46
   d5418:	d9fb      	bls.n	d5412 <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d541a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d541e:	ebca 0a03 	rsb	sl, sl, r3
   d5422:	4582      	cmp	sl, r0
   d5424:	f0c0 80d5 	bcc.w	d55d2 <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d5428:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d542c:	f7ff ff05 	bl	d523a <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d5430:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d5432:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d5436:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d543a:	2800      	cmp	r0, #0
   d543c:	d1ba      	bne.n	d53b4 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d543e:	4602      	mov	r2, r0
   d5440:	e7e7      	b.n	d5412 <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d5442:	6863      	ldr	r3, [r4, #4]
   d5444:	1a9b      	subs	r3, r3, r2
   d5446:	2b11      	cmp	r3, #17
   d5448:	d8cf      	bhi.n	d53ea <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d544a:	6863      	ldr	r3, [r4, #4]
   d544c:	1a9b      	subs	r3, r3, r2
   d544e:	2b11      	cmp	r3, #17
   d5450:	d9f7      	bls.n	d5442 <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d5452:	e7ca      	b.n	d53ea <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5454:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5458:	2b00      	cmp	r3, #0
   d545a:	da8c      	bge.n	d5376 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d545c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5460:	2b00      	cmp	r3, #0
   d5462:	da88      	bge.n	d5376 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d5464:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5468:	2b00      	cmp	r3, #0
   d546a:	da84      	bge.n	d5376 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d546c:	9801      	ldr	r0, [sp, #4]
   d546e:	f000 fb4f 	bl	d5b10 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d5472:	2800      	cmp	r0, #0
   d5474:	f43f af7f 	beq.w	d5376 <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d5478:	88ab      	ldrh	r3, [r5, #4]
   d547a:	2b00      	cmp	r3, #0
   d547c:	f000 80d0 	beq.w	d5620 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d5480:	2700      	movs	r7, #0
   d5482:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5484:	4e6d      	ldr	r6, [pc, #436]	; (d563c <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d5486:	496e      	ldr	r1, [pc, #440]	; (d5640 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d5488:	e000      	b.n	d548c <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d548a:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d548c:	68ea      	ldr	r2, [r5, #12]
   d548e:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d5490:	f103 0e01 	add.w	lr, r3, #1
   d5494:	f012 0f80 	tst.w	r2, #128	; 0x80
   d5498:	bf14      	ite	ne
   d549a:	46b0      	movne	r8, r6
   d549c:	4688      	moveq	r8, r1
   d549e:	fa1f fe8e 	uxth.w	lr, lr
   d54a2:	f012 0f40 	tst.w	r2, #64	; 0x40
   d54a6:	bf14      	ite	ne
   d54a8:	46b1      	movne	r9, r6
   d54aa:	4689      	moveq	r9, r1
   d54ac:	f012 0f20 	tst.w	r2, #32
   d54b0:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d54b4:	bf18      	it	ne
   d54b6:	46b2      	movne	sl, r6
   d54b8:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d54bc:	bf08      	it	eq
   d54be:	468a      	moveq	sl, r1
   d54c0:	f103 0802 	add.w	r8, r3, #2
   d54c4:	f012 0f10 	tst.w	r2, #16
   d54c8:	f103 0e03 	add.w	lr, r3, #3
   d54cc:	bf14      	ite	ne
   d54ce:	46b4      	movne	ip, r6
   d54d0:	468c      	moveq	ip, r1
   d54d2:	fa1f f888 	uxth.w	r8, r8
   d54d6:	f012 0f08 	tst.w	r2, #8
   d54da:	fa1f fe8e 	uxth.w	lr, lr
   d54de:	f103 0904 	add.w	r9, r3, #4
   d54e2:	fa1f f989 	uxth.w	r9, r9
   d54e6:	bf14      	ite	ne
   d54e8:	46b3      	movne	fp, r6
   d54ea:	468b      	moveq	fp, r1
   d54ec:	f012 0f04 	tst.w	r2, #4
   d54f0:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d54f4:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d54f8:	bf14      	ite	ne
   d54fa:	46b2      	movne	sl, r6
   d54fc:	468a      	moveq	sl, r1
   d54fe:	f103 0805 	add.w	r8, r3, #5
   d5502:	f012 0f02 	tst.w	r2, #2
   d5506:	f103 0c06 	add.w	ip, r3, #6
   d550a:	f103 0e07 	add.w	lr, r3, #7
   d550e:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d5512:	fa1f fe8e 	uxth.w	lr, lr
   d5516:	bf14      	ite	ne
   d5518:	46b1      	movne	r9, r6
   d551a:	4689      	moveq	r9, r1
   d551c:	fa1f f888 	uxth.w	r8, r8
   d5520:	f012 0f01 	tst.w	r2, #1
   d5524:	fa1f fc8c 	uxth.w	ip, ip
   d5528:	bf14      	ite	ne
   d552a:	4632      	movne	r2, r6
   d552c:	460a      	moveq	r2, r1
   d552e:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d5532:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d5536:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d553a:	3701      	adds	r7, #1
   d553c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d5540:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d5542:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d5546:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d5548:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d554a:	d89e      	bhi.n	d548a <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d554c:	f103 0209 	add.w	r2, r3, #9
   d5550:	330a      	adds	r3, #10
   d5552:	b292      	uxth	r2, r2
   d5554:	b29b      	uxth	r3, r3
   d5556:	0052      	lsls	r2, r2, #1
   d5558:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d555a:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d555c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d5560:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d5562:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d5564:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d5566:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d5568:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d556a:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d556e:	4e30      	ldr	r6, [pc, #192]	; (d5630 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d5570:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d5574:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d5578:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d557c:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d5580:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d5584:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d5588:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d558c:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d5590:	79eb      	ldrb	r3, [r5, #7]
   d5592:	6831      	ldr	r1, [r6, #0]
   d5594:	011b      	lsls	r3, r3, #4
   d5596:	18ce      	adds	r6, r1, r3
   d5598:	5cc9      	ldrb	r1, [r1, r3]
   d559a:	7873      	ldrb	r3, [r6, #1]
   d559c:	f003 031f 	and.w	r3, r3, #31
   d55a0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d55a4:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d55a6:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d55aa:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d55ae:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d55b2:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d55b4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d55b8:	2b00      	cmp	r3, #0
   d55ba:	d0fb      	beq.n	d55b4 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d55bc:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d55be:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d55c2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d55c6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d55ca:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d55ce:	f000 faa7 	bl	d5b20 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d55d2:	f7ff fe30 	bl	d5236 <micros>
   d55d6:	6128      	str	r0, [r5, #16]
}
   d55d8:	b007      	add	sp, #28
   d55da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d55de:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d55e2:	2b00      	cmp	r3, #0
   d55e4:	f6bf aebf 	bge.w	d5366 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d55e8:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d55ec:	2b00      	cmp	r3, #0
   d55ee:	f6bf aeba 	bge.w	d5366 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d55f2:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d55f6:	2b00      	cmp	r3, #0
   d55f8:	f6bf aeb5 	bge.w	d5366 <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d55fc:	e736      	b.n	d546c <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d55fe:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5602:	2b00      	cmp	r3, #0
   d5604:	f6bf aea6 	bge.w	d5354 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5608:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d560c:	2b00      	cmp	r3, #0
   d560e:	f6bf aea1 	bge.w	d5354 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d5612:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5616:	2b00      	cmp	r3, #0
   d5618:	f6bf ae9c 	bge.w	d5354 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d561c:	e726      	b.n	d546c <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d561e:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d5620:	2304      	movs	r3, #4
   d5622:	2202      	movs	r2, #2
   d5624:	e799      	b.n	d555a <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d5626:	bf00      	nop
   d5628:	000d6c48 	.word	0x000d6c48
   d562c:	000d6c3c 	.word	0x000d6c3c
   d5630:	2003e3d0 	.word	0x2003e3d0
   d5634:	e000edf0 	.word	0xe000edf0
   d5638:	e0001000 	.word	0xe0001000
   d563c:	ffff800d 	.word	0xffff800d
   d5640:	ffff8006 	.word	0xffff8006

000d5644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d5644:	8843      	ldrh	r3, [r0, #2]
   d5646:	428b      	cmp	r3, r1
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d5648:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d564a:	d945      	bls.n	d56d8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d564c:	7a05      	ldrb	r5, [r0, #8]
   d564e:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d5652:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d5656:	b2d6      	uxtb	r6, r2
   d5658:	b145      	cbz	r5, d566c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
   d565a:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d565c:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d565e:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d5660:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d5664:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d5668:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d566c:	f890 c006 	ldrb.w	ip, [r0, #6]
   d5670:	68c7      	ldr	r7, [r0, #12]
   d5672:	f1bc 0f06 	cmp.w	ip, #6
   d5676:	bf0c      	ite	eq
   d5678:	2504      	moveq	r5, #4
   d567a:	2503      	movne	r5, #3
   d567c:	4369      	muls	r1, r5
   d567e:	f1bc 0f08 	cmp.w	ip, #8
   d5682:	eb07 0501 	add.w	r5, r7, r1
   d5686:	d824      	bhi.n	d56d2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
   d5688:	f04f 0e01 	mov.w	lr, #1
   d568c:	fa0e fe0c 	lsl.w	lr, lr, ip
   d5690:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
   d5694:	d10c      	bne.n	d56b0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
   d5696:	f01e 0f40 	tst.w	lr, #64	; 0x40
   d569a:	d10d      	bne.n	d56b8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
   d569c:	f01e 0f10 	tst.w	lr, #16
   d56a0:	d017      	beq.n	d56d2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d56a2:	2bff      	cmp	r3, #255	; 0xff
   d56a4:	bf08      	it	eq
   d56a6:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
   d56a8:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d56aa:	706e      	strb	r6, [r5, #1]
          *p = g;
   d56ac:	70ac      	strb	r4, [r5, #2]
        } break;
   d56ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d56b0:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d56b2:	706b      	strb	r3, [r5, #1]
          *p = b;
   d56b4:	70ae      	strb	r6, [r5, #2]
        } break;
   d56b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
   d56b8:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d56ba:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d56bc:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d56be:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d56c0:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d56c2:	b90b      	cbnz	r3, d56c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d56c4:	b2d2      	uxtb	r2, r2
   d56c6:	e002      	b.n	d56ce <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d56c8:	435a      	muls	r2, r3
   d56ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d56ce:	70ea      	strb	r2, [r5, #3]
        } break;
   d56d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d56d2:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d56d4:	706c      	strb	r4, [r5, #1]
          *p = b;
   d56d6:	70ae      	strb	r6, [r5, #2]
   d56d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d56da <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   d56da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
   d56de:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
   d56e2:	4770      	bx	lr

000d56e4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d56e4:	b508      	push	{r3, lr}
   d56e6:	f000 f817 	bl	d5718 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d56ea:	f000 f815 	bl	d5718 <HAL_Pin_Map>
   d56ee:	4b01      	ldr	r3, [pc, #4]	; (d56f4 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d56f0:	6018      	str	r0, [r3, #0]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	2003e3d0 	.word	0x2003e3d0

000d56f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <netdb_freeaddrinfo+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	689b      	ldr	r3, [r3, #8]
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	00030268 	.word	0x00030268

000d5708 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <netdb_getaddrinfo+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	68db      	ldr	r3, [r3, #12]
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	00030268 	.word	0x00030268

000d5718 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <HAL_Pin_Map+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	681b      	ldr	r3, [r3, #0]
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	0003022c 	.word	0x0003022c

000d5728 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <HAL_Pin_Mode+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	689b      	ldr	r3, [r3, #8]
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	0003022c 	.word	0x0003022c

000d5738 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <HAL_Get_Pin_Mode+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	68db      	ldr	r3, [r3, #12]
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	0003022c 	.word	0x0003022c

000d5748 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <HAL_GPIO_Write+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	691b      	ldr	r3, [r3, #16]
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	0003022c 	.word	0x0003022c

000d5758 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <HAL_GPIO_Read+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	695b      	ldr	r3, [r3, #20]
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	0003022c 	.word	0x0003022c

000d5768 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <HAL_SPI_Begin+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	681b      	ldr	r3, [r3, #0]
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	00030230 	.word	0x00030230

000d5778 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <HAL_SPI_Send_Receive_Data+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	695b      	ldr	r3, [r3, #20]
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030230 	.word	0x00030230

000d5788 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <HAL_SPI_Init+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	69db      	ldr	r3, [r3, #28]
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	00030230 	.word	0x00030230

000d5798 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <HAL_SPI_Is_Enabled+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	6a1b      	ldr	r3, [r3, #32]
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	00030230 	.word	0x00030230

000d57a8 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <HAL_SPI_Acquire+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	00030230 	.word	0x00030230

000d57b8 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d57b8:	b508      	push	{r3, lr}
   d57ba:	4b02      	ldr	r3, [pc, #8]	; (d57c4 <HAL_SPI_Release+0xc>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57c0:	9301      	str	r3, [sp, #4]
   d57c2:	bd08      	pop	{r3, pc}
   d57c4:	00030230 	.word	0x00030230

000d57c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d57c8:	b508      	push	{r3, lr}
   d57ca:	4b02      	ldr	r3, [pc, #8]	; (d57d4 <HAL_RNG_GetRandomNumber+0xc>)
   d57cc:	681b      	ldr	r3, [r3, #0]
   d57ce:	685b      	ldr	r3, [r3, #4]
   d57d0:	9301      	str	r3, [sp, #4]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	00030218 	.word	0x00030218

000d57d8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d57d8:	b508      	push	{r3, lr}
   d57da:	4b02      	ldr	r3, [pc, #8]	; (d57e4 <HAL_Delay_Microseconds+0xc>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	68db      	ldr	r3, [r3, #12]
   d57e0:	9301      	str	r3, [sp, #4]
   d57e2:	bd08      	pop	{r3, pc}
   d57e4:	00030218 	.word	0x00030218

000d57e8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d57e8:	b508      	push	{r3, lr}
   d57ea:	4b02      	ldr	r3, [pc, #8]	; (d57f4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d57ec:	681b      	ldr	r3, [r3, #0]
   d57ee:	691b      	ldr	r3, [r3, #16]
   d57f0:	9301      	str	r3, [sp, #4]
   d57f2:	bd08      	pop	{r3, pc}
   d57f4:	00030218 	.word	0x00030218

000d57f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d57f8:	b508      	push	{r3, lr}
   d57fa:	4b02      	ldr	r3, [pc, #8]	; (d5804 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d57fc:	681b      	ldr	r3, [r3, #0]
   d57fe:	695b      	ldr	r3, [r3, #20]
   d5800:	9301      	str	r3, [sp, #4]
   d5802:	bd08      	pop	{r3, pc}
   d5804:	00030218 	.word	0x00030218

000d5808 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5808:	b508      	push	{r3, lr}
   d580a:	4b02      	ldr	r3, [pc, #8]	; (d5814 <HAL_EEPROM_Init+0xc>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5810:	9301      	str	r3, [sp, #4]
   d5812:	bd08      	pop	{r3, pc}
   d5814:	00030218 	.word	0x00030218

000d5818 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b02      	ldr	r3, [pc, #8]	; (d5824 <HAL_EEPROM_Read+0xc>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5820:	9301      	str	r3, [sp, #4]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	00030218 	.word	0x00030218

000d5828 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d5828:	b508      	push	{r3, lr}
   d582a:	4b02      	ldr	r3, [pc, #8]	; (d5834 <HAL_EEPROM_Write+0xc>)
   d582c:	681b      	ldr	r3, [r3, #0]
   d582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5830:	9301      	str	r3, [sp, #4]
   d5832:	bd08      	pop	{r3, pc}
   d5834:	00030218 	.word	0x00030218

000d5838 <HAL_EEPROM_Clear>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b02      	ldr	r3, [pc, #8]	; (d5844 <HAL_EEPROM_Clear+0xc>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5840:	9301      	str	r3, [sp, #4]
   d5842:	bd08      	pop	{r3, pc}
   d5844:	00030218 	.word	0x00030218

000d5848 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b02      	ldr	r3, [pc, #8]	; (d5854 <os_thread_is_current+0xc>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	689b      	ldr	r3, [r3, #8]
   d5850:	9301      	str	r3, [sp, #4]
   d5852:	bd08      	pop	{r3, pc}
   d5854:	00030248 	.word	0x00030248

000d5858 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b02      	ldr	r3, [pc, #8]	; (d5864 <os_thread_join+0xc>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	691b      	ldr	r3, [r3, #16]
   d5860:	9301      	str	r3, [sp, #4]
   d5862:	bd08      	pop	{r3, pc}
   d5864:	00030248 	.word	0x00030248

000d5868 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5868:	b508      	push	{r3, lr}
   d586a:	4b02      	ldr	r3, [pc, #8]	; (d5874 <os_thread_cleanup+0xc>)
   d586c:	681b      	ldr	r3, [r3, #0]
   d586e:	695b      	ldr	r3, [r3, #20]
   d5870:	9301      	str	r3, [sp, #4]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	00030248 	.word	0x00030248

000d5878 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b02      	ldr	r3, [pc, #8]	; (d5884 <os_mutex_recursive_create+0xc>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	bd08      	pop	{r3, pc}
   d5884:	00030248 	.word	0x00030248

000d5888 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5888:	b508      	push	{r3, lr}
   d588a:	4b02      	ldr	r3, [pc, #8]	; (d5894 <os_mutex_recursive_destroy+0xc>)
   d588c:	681b      	ldr	r3, [r3, #0]
   d588e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5890:	9301      	str	r3, [sp, #4]
   d5892:	bd08      	pop	{r3, pc}
   d5894:	00030248 	.word	0x00030248

000d5898 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <inet_inet_ntop+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	695b      	ldr	r3, [r3, #20]
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	00030264 	.word	0x00030264

000d58a8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <HAL_USART_Init+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	681b      	ldr	r3, [r3, #0]
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	0003023c 	.word	0x0003023c

000d58b8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d58b8:	b508      	push	{r3, lr}
   d58ba:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <HAL_USART_Write_Data+0xc>)
   d58bc:	681b      	ldr	r3, [r3, #0]
   d58be:	68db      	ldr	r3, [r3, #12]
   d58c0:	9301      	str	r3, [sp, #4]
   d58c2:	bd08      	pop	{r3, pc}
   d58c4:	0003023c 	.word	0x0003023c

000d58c8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d58c8:	b508      	push	{r3, lr}
   d58ca:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <HAL_USART_Available_Data+0xc>)
   d58cc:	681b      	ldr	r3, [r3, #0]
   d58ce:	691b      	ldr	r3, [r3, #16]
   d58d0:	9301      	str	r3, [sp, #4]
   d58d2:	bd08      	pop	{r3, pc}
   d58d4:	0003023c 	.word	0x0003023c

000d58d8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d58d8:	b508      	push	{r3, lr}
   d58da:	4b02      	ldr	r3, [pc, #8]	; (d58e4 <HAL_USART_Read_Data+0xc>)
   d58dc:	681b      	ldr	r3, [r3, #0]
   d58de:	695b      	ldr	r3, [r3, #20]
   d58e0:	9301      	str	r3, [sp, #4]
   d58e2:	bd08      	pop	{r3, pc}
   d58e4:	0003023c 	.word	0x0003023c

000d58e8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d58e8:	b508      	push	{r3, lr}
   d58ea:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <HAL_USART_Peek_Data+0xc>)
   d58ec:	681b      	ldr	r3, [r3, #0]
   d58ee:	699b      	ldr	r3, [r3, #24]
   d58f0:	9301      	str	r3, [sp, #4]
   d58f2:	bd08      	pop	{r3, pc}
   d58f4:	0003023c 	.word	0x0003023c

000d58f8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b02      	ldr	r3, [pc, #8]	; (d5904 <HAL_USART_Flush_Data+0xc>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	69db      	ldr	r3, [r3, #28]
   d5900:	9301      	str	r3, [sp, #4]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	0003023c 	.word	0x0003023c

000d5908 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5908:	b508      	push	{r3, lr}
   d590a:	4b02      	ldr	r3, [pc, #8]	; (d5914 <HAL_USART_Is_Enabled+0xc>)
   d590c:	681b      	ldr	r3, [r3, #0]
   d590e:	6a1b      	ldr	r3, [r3, #32]
   d5910:	9301      	str	r3, [sp, #4]
   d5912:	bd08      	pop	{r3, pc}
   d5914:	0003023c 	.word	0x0003023c

000d5918 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5918:	b508      	push	{r3, lr}
   d591a:	4b02      	ldr	r3, [pc, #8]	; (d5924 <HAL_USART_Available_Data_For_Write+0xc>)
   d591c:	681b      	ldr	r3, [r3, #0]
   d591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5920:	9301      	str	r3, [sp, #4]
   d5922:	bd08      	pop	{r3, pc}
   d5924:	0003023c 	.word	0x0003023c

000d5928 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5928:	b508      	push	{r3, lr}
   d592a:	4b02      	ldr	r3, [pc, #8]	; (d5934 <HAL_I2C_Write_Data+0xc>)
   d592c:	681b      	ldr	r3, [r3, #0]
   d592e:	6a1b      	ldr	r3, [r3, #32]
   d5930:	9301      	str	r3, [sp, #4]
   d5932:	bd08      	pop	{r3, pc}
   d5934:	00030228 	.word	0x00030228

000d5938 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5938:	b508      	push	{r3, lr}
   d593a:	4b02      	ldr	r3, [pc, #8]	; (d5944 <HAL_I2C_Available_Data+0xc>)
   d593c:	681b      	ldr	r3, [r3, #0]
   d593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5940:	9301      	str	r3, [sp, #4]
   d5942:	bd08      	pop	{r3, pc}
   d5944:	00030228 	.word	0x00030228

000d5948 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5948:	b508      	push	{r3, lr}
   d594a:	4b02      	ldr	r3, [pc, #8]	; (d5954 <HAL_I2C_Read_Data+0xc>)
   d594c:	681b      	ldr	r3, [r3, #0]
   d594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5950:	9301      	str	r3, [sp, #4]
   d5952:	bd08      	pop	{r3, pc}
   d5954:	00030228 	.word	0x00030228

000d5958 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5958:	b508      	push	{r3, lr}
   d595a:	4b02      	ldr	r3, [pc, #8]	; (d5964 <HAL_I2C_Peek_Data+0xc>)
   d595c:	681b      	ldr	r3, [r3, #0]
   d595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5960:	9301      	str	r3, [sp, #4]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	00030228 	.word	0x00030228

000d5968 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5968:	b508      	push	{r3, lr}
   d596a:	4b02      	ldr	r3, [pc, #8]	; (d5974 <HAL_I2C_Flush_Data+0xc>)
   d596c:	681b      	ldr	r3, [r3, #0]
   d596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5970:	9301      	str	r3, [sp, #4]
   d5972:	bd08      	pop	{r3, pc}
   d5974:	00030228 	.word	0x00030228

000d5978 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <HAL_I2C_Is_Enabled+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	00030228 	.word	0x00030228

000d5988 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <HAL_I2C_Init+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	00030228 	.word	0x00030228

000d5998 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <HAL_USB_USART_Init+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	681b      	ldr	r3, [r3, #0]
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	0003024c 	.word	0x0003024c

000d59a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <HAL_USB_USART_Begin+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	685b      	ldr	r3, [r3, #4]
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	0003024c 	.word	0x0003024c

000d59b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <HAL_USB_USART_Available_Data+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	691b      	ldr	r3, [r3, #16]
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	0003024c 	.word	0x0003024c

000d59c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b02      	ldr	r3, [pc, #8]	; (d59d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	695b      	ldr	r3, [r3, #20]
   d59d0:	9301      	str	r3, [sp, #4]
   d59d2:	bd08      	pop	{r3, pc}
   d59d4:	0003024c 	.word	0x0003024c

000d59d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <HAL_USB_USART_Receive_Data+0xc>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	699b      	ldr	r3, [r3, #24]
   d59e0:	9301      	str	r3, [sp, #4]
   d59e2:	bd08      	pop	{r3, pc}
   d59e4:	0003024c 	.word	0x0003024c

000d59e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d59e8:	b508      	push	{r3, lr}
   d59ea:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <HAL_USB_USART_Send_Data+0xc>)
   d59ec:	681b      	ldr	r3, [r3, #0]
   d59ee:	69db      	ldr	r3, [r3, #28]
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	0003024c 	.word	0x0003024c

000d59f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d59f8:	b508      	push	{r3, lr}
   d59fa:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <HAL_USB_USART_Flush_Data+0xc>)
   d59fc:	681b      	ldr	r3, [r3, #0]
   d59fe:	6a1b      	ldr	r3, [r3, #32]
   d5a00:	9301      	str	r3, [sp, #4]
   d5a02:	bd08      	pop	{r3, pc}
   d5a04:	0003024c 	.word	0x0003024c

000d5a08 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <HAL_USB_USART_Is_Enabled+0xc>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a10:	9301      	str	r3, [sp, #4]
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	0003024c 	.word	0x0003024c

000d5a18 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5a18:	b508      	push	{r3, lr}
   d5a1a:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <set_system_mode+0xc>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	685b      	ldr	r3, [r3, #4]
   d5a20:	9301      	str	r3, [sp, #4]
   d5a22:	bd08      	pop	{r3, pc}
   d5a24:	00030220 	.word	0x00030220

000d5a28 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <system_delay_ms+0xc>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	695b      	ldr	r3, [r3, #20]
   d5a30:	9301      	str	r3, [sp, #4]
   d5a32:	bd08      	pop	{r3, pc}
   d5a34:	00030220 	.word	0x00030220

000d5a38 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5a38:	b508      	push	{r3, lr}
   d5a3a:	4b03      	ldr	r3, [pc, #12]	; (d5a48 <system_ctrl_set_app_request_handler+0x10>)
   d5a3c:	681b      	ldr	r3, [r3, #0]
   d5a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5a42:	9301      	str	r3, [sp, #4]
   d5a44:	bd08      	pop	{r3, pc}
   d5a46:	0000      	.short	0x0000
   d5a48:	00030220 	.word	0x00030220

000d5a4c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5a4c:	b508      	push	{r3, lr}
   d5a4e:	4b03      	ldr	r3, [pc, #12]	; (d5a5c <system_ctrl_set_result+0x10>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5a56:	9301      	str	r3, [sp, #4]
   d5a58:	bd08      	pop	{r3, pc}
   d5a5a:	0000      	.short	0x0000
   d5a5c:	00030220 	.word	0x00030220

000d5a60 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <network_connect+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	685b      	ldr	r3, [r3, #4]
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030240 	.word	0x00030240

000d5a70 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <network_connecting+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	689b      	ldr	r3, [r3, #8]
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030240 	.word	0x00030240

000d5a80 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <network_disconnect+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	68db      	ldr	r3, [r3, #12]
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030240 	.word	0x00030240

000d5a90 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <network_ready+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	691b      	ldr	r3, [r3, #16]
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	00030240 	.word	0x00030240

000d5aa0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <network_on+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	695b      	ldr	r3, [r3, #20]
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	00030240 	.word	0x00030240

000d5ab0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <network_off+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	699b      	ldr	r3, [r3, #24]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	00030240 	.word	0x00030240

000d5ac0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <network_listen+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	69db      	ldr	r3, [r3, #28]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	00030240 	.word	0x00030240

000d5ad0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <network_listening+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	6a1b      	ldr	r3, [r3, #32]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	00030240 	.word	0x00030240

000d5ae0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <network_set_listen_timeout+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	00030240 	.word	0x00030240

000d5af0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <network_get_listen_timeout+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	00030240 	.word	0x00030240

000d5b00 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	00030244 	.word	0x00030244

000d5b10 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <malloc+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	681b      	ldr	r3, [r3, #0]
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	0003021c 	.word	0x0003021c

000d5b20 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <free+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	685b      	ldr	r3, [r3, #4]
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	0003021c 	.word	0x0003021c

000d5b30 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b30:	2200      	movs	r2, #0
   d5b32:	4611      	mov	r1, r2
   d5b34:	6840      	ldr	r0, [r0, #4]
   d5b36:	f7ff bfcb 	b.w	d5ad0 <network_listening>

000d5b3a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b3a:	2200      	movs	r2, #0
   d5b3c:	4611      	mov	r1, r2
   d5b3e:	6840      	ldr	r0, [r0, #4]
   d5b40:	f7ff bfd6 	b.w	d5af0 <network_get_listen_timeout>

000d5b44 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b44:	2200      	movs	r2, #0
   d5b46:	6840      	ldr	r0, [r0, #4]
   d5b48:	f7ff bfca 	b.w	d5ae0 <network_set_listen_timeout>

000d5b4c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b4c:	2200      	movs	r2, #0
   d5b4e:	f081 0101 	eor.w	r1, r1, #1
   d5b52:	6840      	ldr	r0, [r0, #4]
   d5b54:	f7ff bfb4 	b.w	d5ac0 <network_listen>

000d5b58 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5b58:	2300      	movs	r3, #0
   d5b5a:	461a      	mov	r2, r3
   d5b5c:	4619      	mov	r1, r3
   d5b5e:	6840      	ldr	r0, [r0, #4]
   d5b60:	f7ff bfa6 	b.w	d5ab0 <network_off>

000d5b64 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b64:	2300      	movs	r3, #0
   d5b66:	461a      	mov	r2, r3
   d5b68:	4619      	mov	r1, r3
   d5b6a:	6840      	ldr	r0, [r0, #4]
   d5b6c:	f7ff bf98 	b.w	d5aa0 <network_on>

000d5b70 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b70:	2200      	movs	r2, #0
   d5b72:	4611      	mov	r1, r2
   d5b74:	6840      	ldr	r0, [r0, #4]
   d5b76:	f7ff bf8b 	b.w	d5a90 <network_ready>

000d5b7a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b7a:	2200      	movs	r2, #0
   d5b7c:	4611      	mov	r1, r2
   d5b7e:	6840      	ldr	r0, [r0, #4]
   d5b80:	f7ff bf76 	b.w	d5a70 <network_connecting>

000d5b84 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b84:	2200      	movs	r2, #0
   d5b86:	2102      	movs	r1, #2
   d5b88:	6840      	ldr	r0, [r0, #4]
   d5b8a:	f7ff bf79 	b.w	d5a80 <network_disconnect>

000d5b8e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b8e:	2300      	movs	r3, #0
   d5b90:	461a      	mov	r2, r3
   d5b92:	6840      	ldr	r0, [r0, #4]
   d5b94:	f7ff bf64 	b.w	d5a60 <network_connect>

000d5b98 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5b98:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5b9a:	2203      	movs	r2, #3
   d5b9c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5b9e:	4a02      	ldr	r2, [pc, #8]	; (d5ba8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5ba0:	601a      	str	r2, [r3, #0]
   d5ba2:	4770      	bx	lr
   d5ba4:	2003e3d4 	.word	0x2003e3d4
   d5ba8:	000d6c64 	.word	0x000d6c64

000d5bac <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5bac:	2100      	movs	r1, #0
   d5bae:	f7ff bdfb 	b.w	d57a8 <HAL_SPI_Acquire>

000d5bb2 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5bb2:	2100      	movs	r1, #0
   d5bb4:	f7ff be00 	b.w	d57b8 <HAL_SPI_Release>

000d5bb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5bb8:	b510      	push	{r4, lr}
   d5bba:	4604      	mov	r4, r0
{
    _spi = spi;
   d5bbc:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5bbe:	4608      	mov	r0, r1
   d5bc0:	f7ff fde2 	bl	d5788 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5bc4:	2300      	movs	r3, #0
   d5bc6:	6063      	str	r3, [r4, #4]
}
   d5bc8:	4620      	mov	r0, r4
   d5bca:	bd10      	pop	{r4, pc}

000d5bcc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5bcc:	b510      	push	{r4, lr}
   d5bce:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5bd0:	7800      	ldrb	r0, [r0, #0]
   d5bd2:	f7ff ffeb 	bl	d5bac <_ZN8SPIClass4lockEv.isra.0>
   d5bd6:	b948      	cbnz	r0, d5bec <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5bd8:	7820      	ldrb	r0, [r4, #0]
   d5bda:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5bde:	f7ff fdc3 	bl	d5768 <HAL_SPI_Begin>
        unlock();
   d5be2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5be8:	f7ff bfe3 	b.w	d5bb2 <_ZN8SPIClass6unlockEv.isra.1>
   d5bec:	bd10      	pop	{r4, pc}

000d5bee <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5bee:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d5bf0:	7800      	ldrb	r0, [r0, #0]
   d5bf2:	f7ff fdc1 	bl	d5778 <HAL_SPI_Send_Receive_Data>
}
   d5bf6:	b2c0      	uxtb	r0, r0
   d5bf8:	bd08      	pop	{r3, pc}

000d5bfa <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5bfa:	7800      	ldrb	r0, [r0, #0]
   d5bfc:	f7ff bdcc 	b.w	d5798 <HAL_SPI_Is_Enabled>

000d5c00 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5c00:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5c02:	4c09      	ldr	r4, [pc, #36]	; (d5c28 <_GLOBAL__sub_I_System+0x28>)
   d5c04:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5c06:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5c0a:	6020      	str	r0, [r4, #0]
   d5c0c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5c0e:	71a0      	strb	r0, [r4, #6]
   d5c10:	8120      	strh	r0, [r4, #8]
   d5c12:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5c14:	f7ff ff00 	bl	d5a18 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5c18:	4620      	mov	r0, r4
   d5c1a:	4a04      	ldr	r2, [pc, #16]	; (d5c2c <_GLOBAL__sub_I_System+0x2c>)
   d5c1c:	4904      	ldr	r1, [pc, #16]	; (d5c30 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5c22:	f000 bd6d 	b.w	d6700 <__aeabi_atexit>
   d5c26:	bf00      	nop
   d5c28:	2003e3dc 	.word	0x2003e3dc
   d5c2c:	2003e380 	.word	0x2003e380
   d5c30:	000d40af 	.word	0x000d40af

000d5c34 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5c34:	b510      	push	{r4, lr}
   d5c36:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5c38:	6800      	ldr	r0, [r0, #0]
   d5c3a:	b108      	cbz	r0, d5c40 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5c3c:	f7ff fe24 	bl	d5888 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5c40:	4620      	mov	r0, r4
   d5c42:	bd10      	pop	{r4, pc}

000d5c44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5c44:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c46:	4c06      	ldr	r4, [pc, #24]	; (d5c60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5c48:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5c4a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c4c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5c4e:	f7ff fe13 	bl	d5878 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5c52:	4620      	mov	r0, r4
   d5c54:	4a03      	ldr	r2, [pc, #12]	; (d5c64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5c56:	4904      	ldr	r1, [pc, #16]	; (d5c68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5c5c:	f000 bd50 	b.w	d6700 <__aeabi_atexit>
   d5c60:	2003e3e8 	.word	0x2003e3e8
   d5c64:	2003e380 	.word	0x2003e380
   d5c68:	000d5c35 	.word	0x000d5c35

000d5c6c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c6e:	4606      	mov	r6, r0
   d5c70:	460d      	mov	r5, r1
   d5c72:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5c74:	2400      	movs	r4, #0
  while (size--) {
   d5c76:	42bd      	cmp	r5, r7
   d5c78:	d00c      	beq.n	d5c94 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c7a:	6833      	ldr	r3, [r6, #0]
   d5c7c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c80:	689b      	ldr	r3, [r3, #8]
   d5c82:	4630      	mov	r0, r6
   d5c84:	4798      	blx	r3
     if (chunk>=0)
   d5c86:	2800      	cmp	r0, #0
   d5c88:	db01      	blt.n	d5c8e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c8a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5c8c:	e7f3      	b.n	d5c76 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c8e:	2c00      	cmp	r4, #0
   d5c90:	bf08      	it	eq
   d5c92:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c94:	4620      	mov	r0, r4
   d5c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c98 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c98:	b570      	push	{r4, r5, r6, lr}
   d5c9a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c9c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c9e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5ca0:	b149      	cbz	r1, d5cb6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5ca2:	f000 fee1 	bl	d6a68 <strlen>
   d5ca6:	682b      	ldr	r3, [r5, #0]
   d5ca8:	4602      	mov	r2, r0
   d5caa:	4621      	mov	r1, r4
   d5cac:	4628      	mov	r0, r5
   d5cae:	68db      	ldr	r3, [r3, #12]
    }
   d5cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5cb4:	4718      	bx	r3
    }
   d5cb6:	bd70      	pop	{r4, r5, r6, pc}

000d5cb8 <_ZN5Print5printEPKc>:
   d5cb8:	b508      	push	{r3, lr}
   d5cba:	f7ff ffed 	bl	d5c98 <_ZN5Print5writeEPKc>
   d5cbe:	bd08      	pop	{r3, pc}

000d5cc0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5cc0:	6803      	ldr	r3, [r0, #0]
   d5cc2:	689b      	ldr	r3, [r3, #8]
   d5cc4:	4718      	bx	r3

000d5cc6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5cc6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5cc8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5cca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5ccc:	f7ff fff8 	bl	d5cc0 <_ZN5Print5printEc>
  n += print('\n');
   d5cd0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5cd2:	4604      	mov	r4, r0
  n += print('\n');
   d5cd4:	4628      	mov	r0, r5
   d5cd6:	f7ff fff3 	bl	d5cc0 <_ZN5Print5printEc>
  return n;
}
   d5cda:	4420      	add	r0, r4
   d5cdc:	bd38      	pop	{r3, r4, r5, pc}

000d5cde <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5cde:	b538      	push	{r3, r4, r5, lr}
   d5ce0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5ce2:	f7ff ffd9 	bl	d5c98 <_ZN5Print5writeEPKc>
   d5ce6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5ce8:	4628      	mov	r0, r5
   d5cea:	f7ff ffec 	bl	d5cc6 <_ZN5Print7printlnEv>
  return n;
}
   d5cee:	4420      	add	r0, r4
   d5cf0:	bd38      	pop	{r3, r4, r5, pc}

000d5cf2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5cf2:	b530      	push	{r4, r5, lr}
   d5cf4:	b08b      	sub	sp, #44	; 0x2c
   d5cf6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5cf8:	2100      	movs	r1, #0
   d5cfa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5cfe:	2a01      	cmp	r2, #1
   d5d00:	bf98      	it	ls
   d5d02:	220a      	movls	r2, #10
   d5d04:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5d08:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5d0c:	fb05 3312 	mls	r3, r5, r2, r3
   d5d10:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5d14:	2b09      	cmp	r3, #9
   d5d16:	bf94      	ite	ls
   d5d18:	3330      	addls	r3, #48	; 0x30
   d5d1a:	3337      	addhi	r3, #55	; 0x37
   d5d1c:	b2db      	uxtb	r3, r3
   d5d1e:	4621      	mov	r1, r4
   d5d20:	f804 3901 	strb.w	r3, [r4], #-1
   d5d24:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5d26:	2d00      	cmp	r5, #0
   d5d28:	d1ee      	bne.n	d5d08 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5d2a:	f7ff ffb5 	bl	d5c98 <_ZN5Print5writeEPKc>
}
   d5d2e:	b00b      	add	sp, #44	; 0x2c
   d5d30:	bd30      	pop	{r4, r5, pc}
	...

000d5d34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5d34:	4b01      	ldr	r3, [pc, #4]	; (d5d3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5d36:	4a02      	ldr	r2, [pc, #8]	; (d5d40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5d38:	601a      	str	r2, [r3, #0]
   d5d3a:	4770      	bx	lr
   d5d3c:	2003e3ec 	.word	0x2003e3ec
   d5d40:	000d6d03 	.word	0x000d6d03

000d5d44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5d44:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5d46:	681a      	ldr	r2, [r3, #0]
   d5d48:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5d4a:	601a      	str	r2, [r3, #0]
   d5d4c:	4770      	bx	lr
   d5d4e:	bf00      	nop
   d5d50:	2003e318 	.word	0x2003e318
   d5d54:	2003e3f0 	.word	0x2003e3f0

000d5d58 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5d58:	2100      	movs	r1, #0
   d5d5a:	f7ff be65 	b.w	d5a28 <system_delay_ms>

000d5d5e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d5e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5d60:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d62:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5d64:	b113      	cbz	r3, d5d6c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d66:	2203      	movs	r2, #3
   d5d68:	4601      	mov	r1, r0
   d5d6a:	4798      	blx	r3
    }
   d5d6c:	4620      	mov	r0, r4
   d5d6e:	bd10      	pop	{r4, pc}

000d5d70 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5d70:	b510      	push	{r4, lr}
   d5d72:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d74:	f7ff fff3 	bl	d5d5e <_ZNSt14_Function_baseD1Ev>
   d5d78:	4620      	mov	r0, r4
   d5d7a:	bd10      	pop	{r4, pc}

000d5d7c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5d7c:	4803      	ldr	r0, [pc, #12]	; (d5d8c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5d7e:	4a04      	ldr	r2, [pc, #16]	; (d5d90 <_GLOBAL__sub_I_RGB+0x14>)
   d5d80:	4904      	ldr	r1, [pc, #16]	; (d5d94 <_GLOBAL__sub_I_RGB+0x18>)
   d5d82:	2300      	movs	r3, #0
   d5d84:	6083      	str	r3, [r0, #8]
   d5d86:	f000 bcbb 	b.w	d6700 <__aeabi_atexit>
   d5d8a:	bf00      	nop
   d5d8c:	2003e3f4 	.word	0x2003e3f4
   d5d90:	2003e380 	.word	0x2003e380
   d5d94:	000d5d71 	.word	0x000d5d71

000d5d98 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5d98:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5d9a:	4b0c      	ldr	r3, [pc, #48]	; (d5dcc <serialEventRun+0x34>)
   d5d9c:	b133      	cbz	r3, d5dac <serialEventRun+0x14>
   d5d9e:	f000 f95d 	bl	d605c <_Z16_fetch_usbserialv>
   d5da2:	6803      	ldr	r3, [r0, #0]
   d5da4:	691b      	ldr	r3, [r3, #16]
   d5da6:	4798      	blx	r3
   d5da8:	2800      	cmp	r0, #0
   d5daa:	dc09      	bgt.n	d5dc0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5dac:	4b08      	ldr	r3, [pc, #32]	; (d5dd0 <serialEventRun+0x38>)
   d5dae:	b163      	cbz	r3, d5dca <serialEventRun+0x32>
   d5db0:	f000 f9d6 	bl	d6160 <_Z22__fetch_global_Serial1v>
   d5db4:	6803      	ldr	r3, [r0, #0]
   d5db6:	691b      	ldr	r3, [r3, #16]
   d5db8:	4798      	blx	r3
   d5dba:	2800      	cmp	r0, #0
   d5dbc:	dc03      	bgt.n	d5dc6 <serialEventRun+0x2e>
   d5dbe:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5dc0:	f3af 8000 	nop.w
   d5dc4:	e7f2      	b.n	d5dac <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5dc6:	f3af 8000 	nop.w
   d5dca:	bd08      	pop	{r3, pc}
	...

000d5dd4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5dd4:	b508      	push	{r3, lr}
	serialEventRun();
   d5dd6:	f7ff ffdf 	bl	d5d98 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5dda:	f7ff fd0d 	bl	d57f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5dde:	4b01      	ldr	r3, [pc, #4]	; (d5de4 <_post_loop+0x10>)
   d5de0:	6018      	str	r0, [r3, #0]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	2003e728 	.word	0x2003e728

000d5de8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5de8:	4802      	ldr	r0, [pc, #8]	; (d5df4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5dea:	4a03      	ldr	r2, [pc, #12]	; (d5df8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5dec:	4903      	ldr	r1, [pc, #12]	; (d5dfc <_Z33system_initialize_user_backup_ramv+0x14>)
   d5dee:	1a12      	subs	r2, r2, r0
   d5df0:	f000 bdfe 	b.w	d69f0 <memcpy>
   d5df4:	2003f400 	.word	0x2003f400
   d5df8:	2003f404 	.word	0x2003f404
   d5dfc:	000d6f80 	.word	0x000d6f80

000d5e00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5e00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e02:	2300      	movs	r3, #0
   d5e04:	9300      	str	r3, [sp, #0]
   d5e06:	461a      	mov	r2, r3
   d5e08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e0c:	f7ff fe1e 	bl	d5a4c <system_ctrl_set_result>
}
   d5e10:	b003      	add	sp, #12
   d5e12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5e18 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5e18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5e1a:	8843      	ldrh	r3, [r0, #2]
   d5e1c:	2b0a      	cmp	r3, #10
   d5e1e:	d008      	beq.n	d5e32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5e20:	2b50      	cmp	r3, #80	; 0x50
   d5e22:	d109      	bne.n	d5e38 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5e24:	4b09      	ldr	r3, [pc, #36]	; (d5e4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5e26:	681b      	ldr	r3, [r3, #0]
   d5e28:	b13b      	cbz	r3, d5e3a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5e2a:	b003      	add	sp, #12
   d5e2c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5e30:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5e32:	f7ff ffe5 	bl	d5e00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5e36:	e006      	b.n	d5e46 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e38:	2300      	movs	r3, #0
   d5e3a:	9300      	str	r3, [sp, #0]
   d5e3c:	461a      	mov	r2, r3
   d5e3e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e42:	f7ff fe03 	bl	d5a4c <system_ctrl_set_result>
        break;
    }
}
   d5e46:	b003      	add	sp, #12
   d5e48:	f85d fb04 	ldr.w	pc, [sp], #4
   d5e4c:	2003e404 	.word	0x2003e404

000d5e50 <module_user_init_hook>:

void module_user_init_hook()
{
   d5e50:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e52:	4c10      	ldr	r4, [pc, #64]	; (d5e94 <module_user_init_hook+0x44>)
   d5e54:	4d10      	ldr	r5, [pc, #64]	; (d5e98 <module_user_init_hook+0x48>)
   d5e56:	6823      	ldr	r3, [r4, #0]
   d5e58:	42ab      	cmp	r3, r5
   d5e5a:	4b10      	ldr	r3, [pc, #64]	; (d5e9c <module_user_init_hook+0x4c>)
   d5e5c:	bf0c      	ite	eq
   d5e5e:	2201      	moveq	r2, #1
   d5e60:	2200      	movne	r2, #0
   d5e62:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5e64:	d002      	beq.n	d5e6c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5e66:	f7ff ffbf 	bl	d5de8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5e6a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5e6c:	f7ff fcac 	bl	d57c8 <HAL_RNG_GetRandomNumber>
   d5e70:	4604      	mov	r4, r0
    srand(seed);
   d5e72:	f000 fdd1 	bl	d6a18 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5e76:	4b0a      	ldr	r3, [pc, #40]	; (d5ea0 <module_user_init_hook+0x50>)
   d5e78:	b113      	cbz	r3, d5e80 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5e80:	2100      	movs	r1, #0
   d5e82:	4807      	ldr	r0, [pc, #28]	; (d5ea0 <module_user_init_hook+0x50>)
   d5e84:	f7ff fe3c 	bl	d5b00 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e88:	2100      	movs	r1, #0
   d5e8a:	4806      	ldr	r0, [pc, #24]	; (d5ea4 <module_user_init_hook+0x54>)
}
   d5e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e90:	f7ff bdd2 	b.w	d5a38 <system_ctrl_set_app_request_handler>
   d5e94:	2003f400 	.word	0x2003f400
   d5e98:	9a271c1e 	.word	0x9a271c1e
   d5e9c:	2003e408 	.word	0x2003e408
   d5ea0:	00000000 	.word	0x00000000
   d5ea4:	000d5e19 	.word	0x000d5e19

000d5ea8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5ea8:	4770      	bx	lr

000d5eaa <_ZN9IPAddressD0Ev>:
   d5eaa:	b510      	push	{r4, lr}
   d5eac:	2118      	movs	r1, #24
   d5eae:	4604      	mov	r4, r0
   d5eb0:	f000 fc34 	bl	d671c <_ZdlPvj>
   d5eb4:	4620      	mov	r0, r4
   d5eb6:	bd10      	pop	{r4, pc}

000d5eb8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5eba:	7d03      	ldrb	r3, [r0, #20]
   d5ebc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ebe:	b08d      	sub	sp, #52	; 0x34
   d5ec0:	460e      	mov	r6, r1
   d5ec2:	f100 0704 	add.w	r7, r0, #4
   d5ec6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5eca:	d002      	beq.n	d5ed2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5ecc:	f100 0508 	add.w	r5, r0, #8
   d5ed0:	e018      	b.n	d5f04 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ed2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ed4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ed6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5eda:	232f      	movs	r3, #47	; 0x2f
   d5edc:	462a      	mov	r2, r5
   d5ede:	200a      	movs	r0, #10
   d5ee0:	f7ff fcda 	bl	d5898 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5ee4:	4628      	mov	r0, r5
   d5ee6:	f000 fdbf 	bl	d6a68 <strlen>
   d5eea:	6833      	ldr	r3, [r6, #0]
   d5eec:	4602      	mov	r2, r0
   d5eee:	68db      	ldr	r3, [r3, #12]
   d5ef0:	4629      	mov	r1, r5
   d5ef2:	4630      	mov	r0, r6
   d5ef4:	4798      	blx	r3
   d5ef6:	e00f      	b.n	d5f18 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5ef8:	b124      	cbz	r4, d5f04 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5efa:	212e      	movs	r1, #46	; 0x2e
   d5efc:	4630      	mov	r0, r6
   d5efe:	f7ff fedf 	bl	d5cc0 <_ZN5Print5printEc>
   d5f02:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5f04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5f08:	220a      	movs	r2, #10
   d5f0a:	4630      	mov	r0, r6
   d5f0c:	f7ff fef1 	bl	d5cf2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5f10:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5f12:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5f14:	d1f0      	bne.n	d5ef8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5f16:	4620      	mov	r0, r4
    }
    return n;
}
   d5f18:	b00d      	add	sp, #52	; 0x34
   d5f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5f1c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5f1c:	b510      	push	{r4, lr}
   d5f1e:	4b05      	ldr	r3, [pc, #20]	; (d5f34 <_ZN9IPAddressC1Ev+0x18>)
   d5f20:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5f22:	2211      	movs	r2, #17
   d5f24:	f840 3b04 	str.w	r3, [r0], #4
   d5f28:	2100      	movs	r1, #0
   d5f2a:	f000 fd6c 	bl	d6a06 <memset>
{
    clear();
}
   d5f2e:	4620      	mov	r0, r4
   d5f30:	bd10      	pop	{r4, pc}
   d5f32:	bf00      	nop
   d5f34:	000d6da4 	.word	0x000d6da4

000d5f38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5f38:	4603      	mov	r3, r0
   d5f3a:	4a07      	ldr	r2, [pc, #28]	; (d5f58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5f3c:	b510      	push	{r4, lr}
   d5f3e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5f42:	f101 0210 	add.w	r2, r1, #16
   d5f46:	f851 4b04 	ldr.w	r4, [r1], #4
   d5f4a:	f843 4b04 	str.w	r4, [r3], #4
   d5f4e:	4291      	cmp	r1, r2
   d5f50:	d1f9      	bne.n	d5f46 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5f52:	780a      	ldrb	r2, [r1, #0]
   d5f54:	701a      	strb	r2, [r3, #0]
}
   d5f56:	bd10      	pop	{r4, pc}
   d5f58:	000d6da4 	.word	0x000d6da4

000d5f5c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5f5c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5f5e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5f62:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5f66:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5f6a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5f6e:	2304      	movs	r3, #4
   d5f70:	6041      	str	r1, [r0, #4]
   d5f72:	7503      	strb	r3, [r0, #20]
   d5f74:	bd10      	pop	{r4, pc}

000d5f76 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5f76:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5f78:	780d      	ldrb	r5, [r1, #0]
   d5f7a:	788b      	ldrb	r3, [r1, #2]
   d5f7c:	784a      	ldrb	r2, [r1, #1]
   d5f7e:	78c9      	ldrb	r1, [r1, #3]
   d5f80:	9100      	str	r1, [sp, #0]
   d5f82:	4629      	mov	r1, r5
   d5f84:	f7ff ffea 	bl	d5f5c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5f88:	b003      	add	sp, #12
   d5f8a:	bd30      	pop	{r4, r5, pc}

000d5f8c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f8c:	7441      	strb	r1, [r0, #17]
   d5f8e:	4770      	bx	lr

000d5f90 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5f90:	4770      	bx	lr

000d5f92 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5f92:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5f94:	2100      	movs	r1, #0
   d5f96:	7c00      	ldrb	r0, [r0, #16]
   d5f98:	f7ff fd1e 	bl	d59d8 <HAL_USB_USART_Receive_Data>
}
   d5f9c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5fa0:	bf28      	it	cs
   d5fa2:	f04f 30ff 	movcs.w	r0, #4294967295
   d5fa6:	bd08      	pop	{r3, pc}

000d5fa8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5fa8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5faa:	2101      	movs	r1, #1
   d5fac:	7c00      	ldrb	r0, [r0, #16]
   d5fae:	f7ff fd13 	bl	d59d8 <HAL_USB_USART_Receive_Data>
}
   d5fb2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5fb6:	bf28      	it	cs
   d5fb8:	f04f 30ff 	movcs.w	r0, #4294967295
   d5fbc:	bd08      	pop	{r3, pc}

000d5fbe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5fbe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5fc0:	7c00      	ldrb	r0, [r0, #16]
   d5fc2:	f7ff fd01 	bl	d59c8 <HAL_USB_USART_Available_Data_For_Write>
}
   d5fc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fca:	bd08      	pop	{r3, pc}

000d5fcc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5fcc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5fce:	7c00      	ldrb	r0, [r0, #16]
   d5fd0:	f7ff fcf2 	bl	d59b8 <HAL_USB_USART_Available_Data>
}
   d5fd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fd8:	bd08      	pop	{r3, pc}

000d5fda <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5fda:	7c00      	ldrb	r0, [r0, #16]
   d5fdc:	f7ff bd0c 	b.w	d59f8 <HAL_USB_USART_Flush_Data>

000d5fe0 <_ZN9USBSerialD0Ev>:
   d5fe0:	b510      	push	{r4, lr}
   d5fe2:	2114      	movs	r1, #20
   d5fe4:	4604      	mov	r4, r0
   d5fe6:	f000 fb99 	bl	d671c <_ZdlPvj>
   d5fea:	4620      	mov	r0, r4
   d5fec:	bd10      	pop	{r4, pc}

000d5fee <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5fee:	b538      	push	{r3, r4, r5, lr}
   d5ff0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ff2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5ff4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ff6:	f7ff fce7 	bl	d59c8 <HAL_USB_USART_Available_Data_For_Write>
   d5ffa:	2800      	cmp	r0, #0
   d5ffc:	dc01      	bgt.n	d6002 <_ZN9USBSerial5writeEh+0x14>
   d5ffe:	7c60      	ldrb	r0, [r4, #17]
   d6000:	b128      	cbz	r0, d600e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6002:	4629      	mov	r1, r5
   d6004:	7c20      	ldrb	r0, [r4, #16]
   d6006:	f7ff fcef 	bl	d59e8 <HAL_USB_USART_Send_Data>
   d600a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d600e:	bd38      	pop	{r3, r4, r5, pc}

000d6010 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6010:	b510      	push	{r4, lr}
   d6012:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6014:	2300      	movs	r3, #0
   d6016:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d601c:	60a3      	str	r3, [r4, #8]
   d601e:	4b05      	ldr	r3, [pc, #20]	; (d6034 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6020:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6022:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6024:	4608      	mov	r0, r1
{
  _serial = serial;
   d6026:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6028:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d602a:	4611      	mov	r1, r2
   d602c:	f7ff fcb4 	bl	d5998 <HAL_USB_USART_Init>
}
   d6030:	4620      	mov	r0, r4
   d6032:	bd10      	pop	{r4, pc}
   d6034:	000d6db8 	.word	0x000d6db8

000d6038 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6038:	2200      	movs	r2, #0
   d603a:	7c00      	ldrb	r0, [r0, #16]
   d603c:	f7ff bcb4 	b.w	d59a8 <HAL_USB_USART_Begin>

000d6040 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d6040:	7c00      	ldrb	r0, [r0, #16]
   d6042:	f7ff bce1 	b.w	d5a08 <HAL_USB_USART_Is_Enabled>

000d6046 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
   d6046:	f7ff bffb 	b.w	d6040 <_ZN9USBSerial9isEnabledEv>

000d604a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d604a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d604c:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d604e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6050:	2100      	movs	r1, #0
   d6052:	f000 fcd8 	bl	d6a06 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6056:	4620      	mov	r0, r4
   d6058:	bd10      	pop	{r4, pc}
	...

000d605c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d605c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d605e:	4d0e      	ldr	r5, [pc, #56]	; (d6098 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6060:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6062:	a801      	add	r0, sp, #4
   d6064:	f7ff fff1 	bl	d604a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6068:	6829      	ldr	r1, [r5, #0]
   d606a:	f011 0401 	ands.w	r4, r1, #1
   d606e:	d110      	bne.n	d6092 <_Z16_fetch_usbserialv+0x36>
   d6070:	4628      	mov	r0, r5
   d6072:	f7fe f814 	bl	d409e <__cxa_guard_acquire>
   d6076:	b160      	cbz	r0, d6092 <_Z16_fetch_usbserialv+0x36>
   d6078:	aa01      	add	r2, sp, #4
   d607a:	4621      	mov	r1, r4
   d607c:	4807      	ldr	r0, [pc, #28]	; (d609c <_Z16_fetch_usbserialv+0x40>)
   d607e:	f7ff ffc7 	bl	d6010 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6082:	4628      	mov	r0, r5
   d6084:	f7fe f810 	bl	d40a8 <__cxa_guard_release>
   d6088:	4a05      	ldr	r2, [pc, #20]	; (d60a0 <_Z16_fetch_usbserialv+0x44>)
   d608a:	4906      	ldr	r1, [pc, #24]	; (d60a4 <_Z16_fetch_usbserialv+0x48>)
   d608c:	4803      	ldr	r0, [pc, #12]	; (d609c <_Z16_fetch_usbserialv+0x40>)
   d608e:	f000 fb37 	bl	d6700 <__aeabi_atexit>
	return _usbserial;
}
   d6092:	4802      	ldr	r0, [pc, #8]	; (d609c <_Z16_fetch_usbserialv+0x40>)
   d6094:	b007      	add	sp, #28
   d6096:	bd30      	pop	{r4, r5, pc}
   d6098:	2003e40c 	.word	0x2003e40c
   d609c:	2003e410 	.word	0x2003e410
   d60a0:	2003e380 	.word	0x2003e380
   d60a4:	000d5f91 	.word	0x000d5f91

000d60a8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d60a8:	4770      	bx	lr

000d60aa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d60aa:	7441      	strb	r1, [r0, #17]
   d60ac:	4770      	bx	lr

000d60ae <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d60ae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d60b0:	7c00      	ldrb	r0, [r0, #16]
   d60b2:	f7ff fc31 	bl	d5918 <HAL_USART_Available_Data_For_Write>
}
   d60b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60ba:	bd08      	pop	{r3, pc}

000d60bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d60bc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d60be:	7c00      	ldrb	r0, [r0, #16]
   d60c0:	f7ff fc02 	bl	d58c8 <HAL_USART_Available_Data>
}
   d60c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60c8:	bd08      	pop	{r3, pc}

000d60ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d60ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d60cc:	7c00      	ldrb	r0, [r0, #16]
   d60ce:	f7ff fc0b 	bl	d58e8 <HAL_USART_Peek_Data>
}
   d60d2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d60d6:	bf28      	it	cs
   d60d8:	f04f 30ff 	movcs.w	r0, #4294967295
   d60dc:	bd08      	pop	{r3, pc}

000d60de <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d60de:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d60e0:	7c00      	ldrb	r0, [r0, #16]
   d60e2:	f7ff fbf9 	bl	d58d8 <HAL_USART_Read_Data>
}
   d60e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d60ea:	bf28      	it	cs
   d60ec:	f04f 30ff 	movcs.w	r0, #4294967295
   d60f0:	bd08      	pop	{r3, pc}

000d60f2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d60f2:	7c00      	ldrb	r0, [r0, #16]
   d60f4:	f7ff bc00 	b.w	d58f8 <HAL_USART_Flush_Data>

000d60f8 <_ZN11USARTSerialD0Ev>:
   d60f8:	b510      	push	{r4, lr}
   d60fa:	2114      	movs	r1, #20
   d60fc:	4604      	mov	r4, r0
   d60fe:	f000 fb0d 	bl	d671c <_ZdlPvj>
   d6102:	4620      	mov	r0, r4
   d6104:	bd10      	pop	{r4, pc}

000d6106 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6106:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6108:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d610a:	4604      	mov	r4, r0
   d610c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d610e:	b925      	cbnz	r5, d611a <_ZN11USARTSerial5writeEh+0x14>
   d6110:	7c00      	ldrb	r0, [r0, #16]
   d6112:	f7ff fc01 	bl	d5918 <HAL_USART_Available_Data_For_Write>
   d6116:	2800      	cmp	r0, #0
   d6118:	dd05      	ble.n	d6126 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d611a:	4631      	mov	r1, r6
   d611c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d611e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6122:	f7ff bbc9 	b.w	d58b8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6126:	4628      	mov	r0, r5
   d6128:	bd70      	pop	{r4, r5, r6, pc}
	...

000d612c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d612c:	b510      	push	{r4, lr}
   d612e:	4604      	mov	r4, r0
   d6130:	4608      	mov	r0, r1
   d6132:	4611      	mov	r1, r2
   d6134:	2200      	movs	r2, #0
   d6136:	6062      	str	r2, [r4, #4]
   d6138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d613c:	60a2      	str	r2, [r4, #8]
   d613e:	4a05      	ldr	r2, [pc, #20]	; (d6154 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6140:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6142:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6144:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6146:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6148:	461a      	mov	r2, r3
   d614a:	f7ff fbad 	bl	d58a8 <HAL_USART_Init>
}
   d614e:	4620      	mov	r0, r4
   d6150:	bd10      	pop	{r4, pc}
   d6152:	bf00      	nop
   d6154:	000d6de8 	.word	0x000d6de8

000d6158 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6158:	7c00      	ldrb	r0, [r0, #16]
   d615a:	f7ff bbd5 	b.w	d5908 <HAL_USART_Is_Enabled>
	...

000d6160 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6160:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6162:	4d0c      	ldr	r5, [pc, #48]	; (d6194 <_Z22__fetch_global_Serial1v+0x34>)
   d6164:	6829      	ldr	r1, [r5, #0]
   d6166:	f011 0401 	ands.w	r4, r1, #1
   d616a:	d111      	bne.n	d6190 <_Z22__fetch_global_Serial1v+0x30>
   d616c:	4628      	mov	r0, r5
   d616e:	f7fd ff96 	bl	d409e <__cxa_guard_acquire>
   d6172:	b168      	cbz	r0, d6190 <_Z22__fetch_global_Serial1v+0x30>
   d6174:	4a08      	ldr	r2, [pc, #32]	; (d6198 <_Z22__fetch_global_Serial1v+0x38>)
   d6176:	4b09      	ldr	r3, [pc, #36]	; (d619c <_Z22__fetch_global_Serial1v+0x3c>)
   d6178:	4809      	ldr	r0, [pc, #36]	; (d61a0 <_Z22__fetch_global_Serial1v+0x40>)
   d617a:	4621      	mov	r1, r4
   d617c:	f7ff ffd6 	bl	d612c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6180:	4628      	mov	r0, r5
   d6182:	f7fd ff91 	bl	d40a8 <__cxa_guard_release>
   d6186:	4a07      	ldr	r2, [pc, #28]	; (d61a4 <_Z22__fetch_global_Serial1v+0x44>)
   d6188:	4907      	ldr	r1, [pc, #28]	; (d61a8 <_Z22__fetch_global_Serial1v+0x48>)
   d618a:	4805      	ldr	r0, [pc, #20]	; (d61a0 <_Z22__fetch_global_Serial1v+0x40>)
   d618c:	f000 fab8 	bl	d6700 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6190:	4803      	ldr	r0, [pc, #12]	; (d61a0 <_Z22__fetch_global_Serial1v+0x40>)
   d6192:	bd38      	pop	{r3, r4, r5, pc}
   d6194:	2003e4bc 	.word	0x2003e4bc
   d6198:	2003e4c0 	.word	0x2003e4c0
   d619c:	2003e438 	.word	0x2003e438
   d61a0:	2003e424 	.word	0x2003e424
   d61a4:	2003e380 	.word	0x2003e380
   d61a8:	000d60a9 	.word	0x000d60a9

000d61ac <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d61ac:	4770      	bx	lr

000d61ae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d61ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61b0:	4606      	mov	r6, r0
   d61b2:	4615      	mov	r5, r2
   d61b4:	460c      	mov	r4, r1
   d61b6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d61b8:	42bc      	cmp	r4, r7
   d61ba:	d006      	beq.n	d61ca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d61bc:	6833      	ldr	r3, [r6, #0]
   d61be:	f814 1b01 	ldrb.w	r1, [r4], #1
   d61c2:	689b      	ldr	r3, [r3, #8]
   d61c4:	4630      	mov	r0, r6
   d61c6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d61c8:	e7f6      	b.n	d61b8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d61ca:	4628      	mov	r0, r5
   d61cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d61ce <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d61ce:	2200      	movs	r2, #0
   d61d0:	7c00      	ldrb	r0, [r0, #16]
   d61d2:	f7ff bba9 	b.w	d5928 <HAL_I2C_Write_Data>

000d61d6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d61d6:	2100      	movs	r1, #0
   d61d8:	7c00      	ldrb	r0, [r0, #16]
   d61da:	f7ff bbad 	b.w	d5938 <HAL_I2C_Available_Data>

000d61de <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d61de:	2100      	movs	r1, #0
   d61e0:	7c00      	ldrb	r0, [r0, #16]
   d61e2:	f7ff bbb1 	b.w	d5948 <HAL_I2C_Read_Data>

000d61e6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d61e6:	2100      	movs	r1, #0
   d61e8:	7c00      	ldrb	r0, [r0, #16]
   d61ea:	f7ff bbb5 	b.w	d5958 <HAL_I2C_Peek_Data>

000d61ee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d61ee:	2100      	movs	r1, #0
   d61f0:	7c00      	ldrb	r0, [r0, #16]
   d61f2:	f7ff bbb9 	b.w	d5968 <HAL_I2C_Flush_Data>

000d61f6 <_ZN7TwoWireD0Ev>:
   d61f6:	b510      	push	{r4, lr}
   d61f8:	2114      	movs	r1, #20
   d61fa:	4604      	mov	r4, r0
   d61fc:	f000 fa8e 	bl	d671c <_ZdlPvj>
   d6200:	4620      	mov	r0, r4
   d6202:	bd10      	pop	{r4, pc}

000d6204 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6204:	b510      	push	{r4, lr}
   d6206:	4604      	mov	r4, r0
   d6208:	2300      	movs	r3, #0
   d620a:	6063      	str	r3, [r4, #4]
   d620c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6210:	60a3      	str	r3, [r4, #8]
   d6212:	4b04      	ldr	r3, [pc, #16]	; (d6224 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6214:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6216:	4608      	mov	r0, r1
   d6218:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d621a:	4611      	mov	r1, r2
   d621c:	f7ff fbb4 	bl	d5988 <HAL_I2C_Init>
}
   d6220:	4620      	mov	r0, r4
   d6222:	bd10      	pop	{r4, pc}
   d6224:	000d6e18 	.word	0x000d6e18

000d6228 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6228:	2100      	movs	r1, #0
   d622a:	7c00      	ldrb	r0, [r0, #16]
   d622c:	f7ff bba4 	b.w	d5978 <HAL_I2C_Is_Enabled>

000d6230 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6230:	2200      	movs	r2, #0
   d6232:	4611      	mov	r1, r2
   d6234:	6840      	ldr	r0, [r0, #4]
   d6236:	f7ff bc4b 	b.w	d5ad0 <network_listening>

000d623a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d623a:	2200      	movs	r2, #0
   d623c:	4611      	mov	r1, r2
   d623e:	6840      	ldr	r0, [r0, #4]
   d6240:	f7ff bc56 	b.w	d5af0 <network_get_listen_timeout>

000d6244 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6244:	2200      	movs	r2, #0
   d6246:	6840      	ldr	r0, [r0, #4]
   d6248:	f7ff bc4a 	b.w	d5ae0 <network_set_listen_timeout>

000d624c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d624c:	2200      	movs	r2, #0
   d624e:	f081 0101 	eor.w	r1, r1, #1
   d6252:	6840      	ldr	r0, [r0, #4]
   d6254:	f7ff bc34 	b.w	d5ac0 <network_listen>

000d6258 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6258:	2300      	movs	r3, #0
   d625a:	461a      	mov	r2, r3
   d625c:	2101      	movs	r1, #1
   d625e:	6840      	ldr	r0, [r0, #4]
   d6260:	f7ff bc26 	b.w	d5ab0 <network_off>

000d6264 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6264:	2300      	movs	r3, #0
   d6266:	461a      	mov	r2, r3
   d6268:	4619      	mov	r1, r3
   d626a:	6840      	ldr	r0, [r0, #4]
   d626c:	f7ff bc18 	b.w	d5aa0 <network_on>

000d6270 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6270:	2200      	movs	r2, #0
   d6272:	4611      	mov	r1, r2
   d6274:	6840      	ldr	r0, [r0, #4]
   d6276:	f7ff bc0b 	b.w	d5a90 <network_ready>

000d627a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d627a:	2200      	movs	r2, #0
   d627c:	4611      	mov	r1, r2
   d627e:	6840      	ldr	r0, [r0, #4]
   d6280:	f7ff bbf6 	b.w	d5a70 <network_connecting>

000d6284 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6284:	2200      	movs	r2, #0
   d6286:	2102      	movs	r1, #2
   d6288:	6840      	ldr	r0, [r0, #4]
   d628a:	f7ff bbf9 	b.w	d5a80 <network_disconnect>

000d628e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d628e:	2300      	movs	r3, #0
   d6290:	461a      	mov	r2, r3
   d6292:	6840      	ldr	r0, [r0, #4]
   d6294:	f7ff bbe4 	b.w	d5a60 <network_connect>

000d6298 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6298:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d629a:	4605      	mov	r5, r0
   d629c:	b188      	cbz	r0, d62c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d629e:	6804      	ldr	r4, [r0, #0]
   d62a0:	b14c      	cbz	r4, d62b6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d62a2:	68a3      	ldr	r3, [r4, #8]
   d62a4:	b11b      	cbz	r3, d62ae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d62a6:	2203      	movs	r2, #3
   d62a8:	4621      	mov	r1, r4
   d62aa:	4620      	mov	r0, r4
   d62ac:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62ae:	2110      	movs	r1, #16
   d62b0:	4620      	mov	r0, r4
   d62b2:	f000 fa33 	bl	d671c <_ZdlPvj>
   d62b6:	4628      	mov	r0, r5
   d62b8:	2114      	movs	r1, #20
      }
   d62ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62be:	f000 ba2d 	b.w	d671c <_ZdlPvj>
   d62c2:	bd38      	pop	{r3, r4, r5, pc}

000d62c4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d62c4:	b110      	cbz	r0, d62cc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d62c6:	6803      	ldr	r3, [r0, #0]
   d62c8:	685b      	ldr	r3, [r3, #4]
   d62ca:	4718      	bx	r3
   d62cc:	4770      	bx	lr

000d62ce <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d62ce:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d62d0:	6803      	ldr	r3, [r0, #0]
   d62d2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d62d4:	b1bb      	cbz	r3, d6306 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d62d6:	6858      	ldr	r0, [r3, #4]
   d62d8:	f7ff fab6 	bl	d5848 <os_thread_is_current>
   d62dc:	b978      	cbnz	r0, d62fe <_ZN6ThreadD1Ev+0x30>
   d62de:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d62e0:	7c5a      	ldrb	r2, [r3, #17]
   d62e2:	b912      	cbnz	r2, d62ea <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d62e4:	6858      	ldr	r0, [r3, #4]
   d62e6:	f7ff fab7 	bl	d5858 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d62ea:	6823      	ldr	r3, [r4, #0]
   d62ec:	6858      	ldr	r0, [r3, #4]
   d62ee:	f7ff fabb 	bl	d5868 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62f2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d62f4:	2300      	movs	r3, #0
   d62f6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d62f8:	b128      	cbz	r0, d6306 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d62fa:	f7ff ffcd 	bl	d6298 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62fe:	6820      	ldr	r0, [r4, #0]
   d6300:	b108      	cbz	r0, d6306 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6302:	f7ff ffc9 	bl	d6298 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6306:	4620      	mov	r0, r4
   d6308:	bd10      	pop	{r4, pc}

000d630a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d630a:	b538      	push	{r3, r4, r5, lr}
   d630c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d630e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6312:	b108      	cbz	r0, d6318 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6314:	f7fd fec1 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6318:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d631c:	b108      	cbz	r0, d6322 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d631e:	f7ff fab3 	bl	d5888 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6322:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6326:	b135      	cbz	r5, d6336 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6328:	4628      	mov	r0, r5
   d632a:	f7ff ffd0 	bl	d62ce <_ZN6ThreadD1Ev>
   d632e:	2104      	movs	r1, #4
   d6330:	4628      	mov	r0, r5
   d6332:	f000 f9f3 	bl	d671c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6336:	6820      	ldr	r0, [r4, #0]
   d6338:	b108      	cbz	r0, d633e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d633a:	f7ff ffc3 	bl	d62c4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d633e:	4620      	mov	r0, r4
   d6340:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6344 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6344:	b510      	push	{r4, lr}
   d6346:	4b04      	ldr	r3, [pc, #16]	; (d6358 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6348:	4604      	mov	r4, r0
   d634a:	f840 3b08 	str.w	r3, [r0], #8
   d634e:	f7ff ffdc 	bl	d630a <_ZN5spark11MeshPublishD1Ev>
   d6352:	4620      	mov	r0, r4
   d6354:	bd10      	pop	{r4, pc}
   d6356:	bf00      	nop
   d6358:	000d6e40 	.word	0x000d6e40

000d635c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d635c:	b538      	push	{r3, r4, r5, lr}
   d635e:	4c0e      	ldr	r4, [pc, #56]	; (d6398 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6360:	4b0e      	ldr	r3, [pc, #56]	; (d639c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6362:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6364:	2500      	movs	r5, #0
   d6366:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6368:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d636c:	6063      	str	r3, [r4, #4]
   d636e:	60a5      	str	r5, [r4, #8]
   d6370:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6374:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6378:	f7ff fa7e 	bl	d5878 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d637c:	4b08      	ldr	r3, [pc, #32]	; (d63a0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d637e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6382:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6386:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6388:	4620      	mov	r0, r4
   d638a:	4a06      	ldr	r2, [pc, #24]	; (d63a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d638c:	4906      	ldr	r1, [pc, #24]	; (d63a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d638e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6392:	f000 b9b5 	b.w	d6700 <__aeabi_atexit>
   d6396:	bf00      	nop
   d6398:	2003e544 	.word	0x2003e544
   d639c:	000d6ea8 	.word	0x000d6ea8
   d63a0:	000d6e40 	.word	0x000d6e40
   d63a4:	2003e380 	.word	0x2003e380
   d63a8:	000d6345 	.word	0x000d6345

000d63ac <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d63ac:	2200      	movs	r2, #0
   d63ae:	4611      	mov	r1, r2
   d63b0:	6840      	ldr	r0, [r0, #4]
   d63b2:	f7ff bb6d 	b.w	d5a90 <network_ready>

000d63b6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d63b6:	2200      	movs	r2, #0
   d63b8:	4611      	mov	r1, r2
   d63ba:	6840      	ldr	r0, [r0, #4]
   d63bc:	f7ff bb88 	b.w	d5ad0 <network_listening>

000d63c0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d63c0:	2200      	movs	r2, #0
   d63c2:	4611      	mov	r1, r2
   d63c4:	6840      	ldr	r0, [r0, #4]
   d63c6:	f7ff bb93 	b.w	d5af0 <network_get_listen_timeout>

000d63ca <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d63ca:	2200      	movs	r2, #0
   d63cc:	6840      	ldr	r0, [r0, #4]
   d63ce:	f7ff bb87 	b.w	d5ae0 <network_set_listen_timeout>

000d63d2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d63d2:	2200      	movs	r2, #0
   d63d4:	f081 0101 	eor.w	r1, r1, #1
   d63d8:	6840      	ldr	r0, [r0, #4]
   d63da:	f7ff bb71 	b.w	d5ac0 <network_listen>

000d63de <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d63de:	2300      	movs	r3, #0
   d63e0:	461a      	mov	r2, r3
   d63e2:	4619      	mov	r1, r3
   d63e4:	6840      	ldr	r0, [r0, #4]
   d63e6:	f7ff bb63 	b.w	d5ab0 <network_off>

000d63ea <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d63ea:	2300      	movs	r3, #0
   d63ec:	461a      	mov	r2, r3
   d63ee:	4619      	mov	r1, r3
   d63f0:	6840      	ldr	r0, [r0, #4]
   d63f2:	f7ff bb55 	b.w	d5aa0 <network_on>

000d63f6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d63f6:	2200      	movs	r2, #0
   d63f8:	4611      	mov	r1, r2
   d63fa:	6840      	ldr	r0, [r0, #4]
   d63fc:	f7ff bb38 	b.w	d5a70 <network_connecting>

000d6400 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6400:	2200      	movs	r2, #0
   d6402:	2102      	movs	r1, #2
   d6404:	6840      	ldr	r0, [r0, #4]
   d6406:	f7ff bb3b 	b.w	d5a80 <network_disconnect>

000d640a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d640a:	2300      	movs	r3, #0
   d640c:	461a      	mov	r2, r3
   d640e:	6840      	ldr	r0, [r0, #4]
   d6410:	f7ff bb26 	b.w	d5a60 <network_connect>

000d6414 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6414:	4b02      	ldr	r3, [pc, #8]	; (d6420 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6416:	2204      	movs	r2, #4
   d6418:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d641a:	4a02      	ldr	r2, [pc, #8]	; (d6424 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d641c:	601a      	str	r2, [r3, #0]
   d641e:	4770      	bx	lr
   d6420:	2003e718 	.word	0x2003e718
   d6424:	000d6e74 	.word	0x000d6e74

000d6428 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6428:	2300      	movs	r3, #0
   d642a:	461a      	mov	r2, r3
   d642c:	6840      	ldr	r0, [r0, #4]
   d642e:	f7ff bb17 	b.w	d5a60 <network_connect>

000d6432 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6432:	2200      	movs	r2, #0
   d6434:	2102      	movs	r1, #2
   d6436:	6840      	ldr	r0, [r0, #4]
   d6438:	f7ff bb22 	b.w	d5a80 <network_disconnect>

000d643c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d643c:	2200      	movs	r2, #0
   d643e:	4611      	mov	r1, r2
   d6440:	6840      	ldr	r0, [r0, #4]
   d6442:	f7ff bb15 	b.w	d5a70 <network_connecting>

000d6446 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6446:	2200      	movs	r2, #0
   d6448:	4611      	mov	r1, r2
   d644a:	6840      	ldr	r0, [r0, #4]
   d644c:	f7ff bb20 	b.w	d5a90 <network_ready>

000d6450 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6450:	2300      	movs	r3, #0
   d6452:	461a      	mov	r2, r3
   d6454:	4619      	mov	r1, r3
   d6456:	6840      	ldr	r0, [r0, #4]
   d6458:	f7ff bb22 	b.w	d5aa0 <network_on>

000d645c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d645c:	2300      	movs	r3, #0
   d645e:	461a      	mov	r2, r3
   d6460:	4619      	mov	r1, r3
   d6462:	6840      	ldr	r0, [r0, #4]
   d6464:	f7ff bb24 	b.w	d5ab0 <network_off>

000d6468 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6468:	2200      	movs	r2, #0
   d646a:	f081 0101 	eor.w	r1, r1, #1
   d646e:	6840      	ldr	r0, [r0, #4]
   d6470:	f7ff bb26 	b.w	d5ac0 <network_listen>

000d6474 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6474:	2200      	movs	r2, #0
   d6476:	6840      	ldr	r0, [r0, #4]
   d6478:	f7ff bb32 	b.w	d5ae0 <network_set_listen_timeout>

000d647c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d647c:	2200      	movs	r2, #0
   d647e:	4611      	mov	r1, r2
   d6480:	6840      	ldr	r0, [r0, #4]
   d6482:	f7ff bb35 	b.w	d5af0 <network_get_listen_timeout>

000d6486 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6486:	2200      	movs	r2, #0
   d6488:	4611      	mov	r1, r2
   d648a:	6840      	ldr	r0, [r0, #4]
   d648c:	f7ff bb20 	b.w	d5ad0 <network_listening>

000d6490 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6494:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6496:	b095      	sub	sp, #84	; 0x54
   d6498:	4616      	mov	r6, r2
   d649a:	460d      	mov	r5, r1
   d649c:	4607      	mov	r7, r0
    IPAddress addr;
   d649e:	f7ff fd3d 	bl	d5f1c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d64a2:	4621      	mov	r1, r4
   d64a4:	2220      	movs	r2, #32
   d64a6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d64a8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d64aa:	f000 faac 	bl	d6a06 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d64ae:	2340      	movs	r3, #64	; 0x40
   d64b0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d64b2:	4621      	mov	r1, r4
   d64b4:	466b      	mov	r3, sp
   d64b6:	aa0c      	add	r2, sp, #48	; 0x30
   d64b8:	4630      	mov	r0, r6
   d64ba:	f7ff f925 	bl	d5708 <netdb_getaddrinfo>
    if (!r) {
   d64be:	4604      	mov	r4, r0
   d64c0:	2800      	cmp	r0, #0
   d64c2:	d144      	bne.n	d654e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d64c4:	4602      	mov	r2, r0
   d64c6:	2101      	movs	r1, #1
   d64c8:	6868      	ldr	r0, [r5, #4]
   d64ca:	f7ff fae1 	bl	d5a90 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d64ce:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d64d0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d64d2:	4622      	mov	r2, r4
   d64d4:	6868      	ldr	r0, [r5, #4]
   d64d6:	f7ff fadb 	bl	d5a90 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d64da:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d64dc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d64de:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d64e0:	2e00      	cmp	r6, #0
   d64e2:	d034      	beq.n	d654e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d64e4:	2900      	cmp	r1, #0
   d64e6:	d132      	bne.n	d654e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d64e8:	6873      	ldr	r3, [r6, #4]
   d64ea:	2b02      	cmp	r3, #2
   d64ec:	d002      	beq.n	d64f4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d64ee:	2b0a      	cmp	r3, #10
   d64f0:	d009      	beq.n	d6506 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d64f2:	e02a      	b.n	d654a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d64f4:	f1b8 0f00 	cmp.w	r8, #0
   d64f8:	d027      	beq.n	d654a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d64fa:	6971      	ldr	r1, [r6, #20]
   d64fc:	4638      	mov	r0, r7
   d64fe:	3104      	adds	r1, #4
   d6500:	f7ff fd39 	bl	d5f76 <_ZN9IPAddressaSEPKh>
   d6504:	e020      	b.n	d6548 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6506:	f1b9 0f00 	cmp.w	r9, #0
   d650a:	d01e      	beq.n	d654a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d650c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d650e:	2211      	movs	r2, #17
   d6510:	a801      	add	r0, sp, #4
   d6512:	f000 fa78 	bl	d6a06 <memset>
                    a.v = 6;
   d6516:	2306      	movs	r3, #6
   d6518:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d651c:	ad01      	add	r5, sp, #4
   d651e:	f104 0308 	add.w	r3, r4, #8
   d6522:	3418      	adds	r4, #24
   d6524:	6818      	ldr	r0, [r3, #0]
   d6526:	6859      	ldr	r1, [r3, #4]
   d6528:	462a      	mov	r2, r5
   d652a:	c203      	stmia	r2!, {r0, r1}
   d652c:	3308      	adds	r3, #8
   d652e:	42a3      	cmp	r3, r4
   d6530:	4615      	mov	r5, r2
   d6532:	d1f7      	bne.n	d6524 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6534:	a901      	add	r1, sp, #4
   d6536:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6538:	ad07      	add	r5, sp, #28
   d653a:	f7ff fcfd 	bl	d5f38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d653e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6540:	1d3c      	adds	r4, r7, #4
   d6542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6544:	682b      	ldr	r3, [r5, #0]
   d6546:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6548:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d654a:	69f6      	ldr	r6, [r6, #28]
   d654c:	e7c8      	b.n	d64e0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d654e:	9800      	ldr	r0, [sp, #0]
   d6550:	f7ff f8d2 	bl	d56f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6554:	4638      	mov	r0, r7
   d6556:	b015      	add	sp, #84	; 0x54
   d6558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d655c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d655c:	4b02      	ldr	r3, [pc, #8]	; (d6568 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d655e:	4a03      	ldr	r2, [pc, #12]	; (d656c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6560:	601a      	str	r2, [r3, #0]
   d6562:	2200      	movs	r2, #0
   d6564:	605a      	str	r2, [r3, #4]
   d6566:	4770      	bx	lr
   d6568:	2003e720 	.word	0x2003e720
   d656c:	000d6ea8 	.word	0x000d6ea8

000d6570 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6570:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6572:	4e18      	ldr	r6, [pc, #96]	; (d65d4 <pinAvailable+0x64>)
   d6574:	6831      	ldr	r1, [r6, #0]
   d6576:	f011 0501 	ands.w	r5, r1, #1
   d657a:	4604      	mov	r4, r0
   d657c:	d10a      	bne.n	d6594 <pinAvailable+0x24>
   d657e:	4630      	mov	r0, r6
   d6580:	f7fd fd8d 	bl	d409e <__cxa_guard_acquire>
   d6584:	b130      	cbz	r0, d6594 <pinAvailable+0x24>
   d6586:	4629      	mov	r1, r5
   d6588:	4813      	ldr	r0, [pc, #76]	; (d65d8 <pinAvailable+0x68>)
   d658a:	f7ff fb15 	bl	d5bb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d658e:	4630      	mov	r0, r6
   d6590:	f7fd fd8a 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6594:	4810      	ldr	r0, [pc, #64]	; (d65d8 <pinAvailable+0x68>)
   d6596:	f7ff fb30 	bl	d5bfa <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d659a:	b128      	cbz	r0, d65a8 <pinAvailable+0x38>
   d659c:	f1a4 030b 	sub.w	r3, r4, #11
   d65a0:	2b02      	cmp	r3, #2
   d65a2:	d801      	bhi.n	d65a8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d65a4:	2000      	movs	r0, #0
   d65a6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d65a8:	f000 f884 	bl	d66b4 <_Z19__fetch_global_Wirev>
   d65ac:	f7ff fe3c 	bl	d6228 <_ZN7TwoWire9isEnabledEv>
   d65b0:	b108      	cbz	r0, d65b6 <pinAvailable+0x46>
   d65b2:	2c01      	cmp	r4, #1
   d65b4:	d9f6      	bls.n	d65a4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d65b6:	f7ff fdd3 	bl	d6160 <_Z22__fetch_global_Serial1v>
   d65ba:	f7ff fdcd 	bl	d6158 <_ZN11USARTSerial9isEnabledEv>
   d65be:	b118      	cbz	r0, d65c8 <pinAvailable+0x58>
   d65c0:	f1a4 0309 	sub.w	r3, r4, #9
   d65c4:	2b01      	cmp	r3, #1
   d65c6:	d9ed      	bls.n	d65a4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d65c8:	2c23      	cmp	r4, #35	; 0x23
   d65ca:	bf8c      	ite	hi
   d65cc:	2000      	movhi	r0, #0
   d65ce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d65d0:	bd70      	pop	{r4, r5, r6, pc}
   d65d2:	bf00      	nop
   d65d4:	2003e384 	.word	0x2003e384
   d65d8:	2003e388 	.word	0x2003e388

000d65dc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d65dc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d65de:	b538      	push	{r3, r4, r5, lr}
   d65e0:	4604      	mov	r4, r0
   d65e2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d65e4:	d80a      	bhi.n	d65fc <pinMode+0x20>
   d65e6:	29ff      	cmp	r1, #255	; 0xff
   d65e8:	d008      	beq.n	d65fc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d65ea:	f7ff ffc1 	bl	d6570 <pinAvailable>
   d65ee:	b128      	cbz	r0, d65fc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d65f0:	4629      	mov	r1, r5
   d65f2:	4620      	mov	r0, r4
}
   d65f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d65f8:	f7ff b896 	b.w	d5728 <HAL_Pin_Mode>
   d65fc:	bd38      	pop	{r3, r4, r5, pc}

000d65fe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d65fe:	b538      	push	{r3, r4, r5, lr}
   d6600:	4604      	mov	r4, r0
   d6602:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6604:	f7ff f898 	bl	d5738 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6608:	28ff      	cmp	r0, #255	; 0xff
   d660a:	d010      	beq.n	d662e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d660c:	2806      	cmp	r0, #6
   d660e:	d804      	bhi.n	d661a <digitalWrite+0x1c>
   d6610:	234d      	movs	r3, #77	; 0x4d
   d6612:	fa23 f000 	lsr.w	r0, r3, r0
   d6616:	07c3      	lsls	r3, r0, #31
   d6618:	d409      	bmi.n	d662e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d661a:	4620      	mov	r0, r4
   d661c:	f7ff ffa8 	bl	d6570 <pinAvailable>
   d6620:	b128      	cbz	r0, d662e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6622:	4629      	mov	r1, r5
   d6624:	4620      	mov	r0, r4
}
   d6626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d662a:	f7ff b88d 	b.w	d5748 <HAL_GPIO_Write>
   d662e:	bd38      	pop	{r3, r4, r5, pc}

000d6630 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6630:	b510      	push	{r4, lr}
   d6632:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6634:	f7ff f880 	bl	d5738 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6638:	3804      	subs	r0, #4
   d663a:	b2c0      	uxtb	r0, r0
   d663c:	2801      	cmp	r0, #1
   d663e:	d908      	bls.n	d6652 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6640:	4620      	mov	r0, r4
   d6642:	f7ff ff95 	bl	d6570 <pinAvailable>
   d6646:	b120      	cbz	r0, d6652 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6648:	4620      	mov	r0, r4
}
   d664a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d664e:	f7ff b883 	b.w	d5758 <HAL_GPIO_Read>
}
   d6652:	2000      	movs	r0, #0
   d6654:	bd10      	pop	{r4, pc}
	...

000d6658 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6658:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d665a:	4c07      	ldr	r4, [pc, #28]	; (d6678 <_Z21__fetch_global_EEPROMv+0x20>)
   d665c:	6823      	ldr	r3, [r4, #0]
   d665e:	07db      	lsls	r3, r3, #31
   d6660:	d408      	bmi.n	d6674 <_Z21__fetch_global_EEPROMv+0x1c>
   d6662:	4620      	mov	r0, r4
   d6664:	f7fd fd1b 	bl	d409e <__cxa_guard_acquire>
   d6668:	b120      	cbz	r0, d6674 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d666a:	f7ff f8cd 	bl	d5808 <HAL_EEPROM_Init>
   d666e:	4620      	mov	r0, r4
   d6670:	f7fd fd1a 	bl	d40a8 <__cxa_guard_release>
	return eeprom;
}
   d6674:	4801      	ldr	r0, [pc, #4]	; (d667c <_Z21__fetch_global_EEPROMv+0x24>)
   d6676:	bd10      	pop	{r4, pc}
   d6678:	2003e72c 	.word	0x2003e72c
   d667c:	2003e730 	.word	0x2003e730

000d6680 <_Z17acquireWireBufferv>:
   d6680:	b570      	push	{r4, r5, r6, lr}
   d6682:	4604      	mov	r4, r0
   d6684:	2514      	movs	r5, #20
   d6686:	462a      	mov	r2, r5
   d6688:	4e09      	ldr	r6, [pc, #36]	; (d66b0 <_Z17acquireWireBufferv+0x30>)
   d668a:	2100      	movs	r1, #0
   d668c:	f000 f9bb 	bl	d6a06 <memset>
   d6690:	8025      	strh	r5, [r4, #0]
   d6692:	2520      	movs	r5, #32
   d6694:	4631      	mov	r1, r6
   d6696:	60a5      	str	r5, [r4, #8]
   d6698:	6125      	str	r5, [r4, #16]
   d669a:	4628      	mov	r0, r5
   d669c:	f000 f840 	bl	d6720 <_ZnajRKSt9nothrow_t>
   d66a0:	4631      	mov	r1, r6
   d66a2:	6060      	str	r0, [r4, #4]
   d66a4:	4628      	mov	r0, r5
   d66a6:	f000 f83b 	bl	d6720 <_ZnajRKSt9nothrow_t>
   d66aa:	60e0      	str	r0, [r4, #12]
   d66ac:	4620      	mov	r0, r4
   d66ae:	bd70      	pop	{r4, r5, r6, pc}
   d66b0:	000d6ed4 	.word	0x000d6ed4

000d66b4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d66b4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d66b6:	4d0e      	ldr	r5, [pc, #56]	; (d66f0 <_Z19__fetch_global_Wirev+0x3c>)
   d66b8:	6829      	ldr	r1, [r5, #0]
   d66ba:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d66be:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d66c0:	d113      	bne.n	d66ea <_Z19__fetch_global_Wirev+0x36>
   d66c2:	4628      	mov	r0, r5
   d66c4:	f7fd fceb 	bl	d409e <__cxa_guard_acquire>
   d66c8:	b178      	cbz	r0, d66ea <_Z19__fetch_global_Wirev+0x36>
   d66ca:	a801      	add	r0, sp, #4
   d66cc:	f7ff ffd8 	bl	d6680 <_Z17acquireWireBufferv>
   d66d0:	aa01      	add	r2, sp, #4
   d66d2:	4621      	mov	r1, r4
   d66d4:	4807      	ldr	r0, [pc, #28]	; (d66f4 <_Z19__fetch_global_Wirev+0x40>)
   d66d6:	f7ff fd95 	bl	d6204 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d66da:	4628      	mov	r0, r5
   d66dc:	f7fd fce4 	bl	d40a8 <__cxa_guard_release>
   d66e0:	4a05      	ldr	r2, [pc, #20]	; (d66f8 <_Z19__fetch_global_Wirev+0x44>)
   d66e2:	4906      	ldr	r1, [pc, #24]	; (d66fc <_Z19__fetch_global_Wirev+0x48>)
   d66e4:	4803      	ldr	r0, [pc, #12]	; (d66f4 <_Z19__fetch_global_Wirev+0x40>)
   d66e6:	f000 f80b 	bl	d6700 <__aeabi_atexit>
	return wire;
}
   d66ea:	4802      	ldr	r0, [pc, #8]	; (d66f4 <_Z19__fetch_global_Wirev+0x40>)
   d66ec:	b007      	add	sp, #28
   d66ee:	bd30      	pop	{r4, r5, pc}
   d66f0:	2003e734 	.word	0x2003e734
   d66f4:	2003e738 	.word	0x2003e738
   d66f8:	2003e380 	.word	0x2003e380
   d66fc:	000d61ad 	.word	0x000d61ad

000d6700 <__aeabi_atexit>:
   d6700:	460b      	mov	r3, r1
   d6702:	4601      	mov	r1, r0
   d6704:	4618      	mov	r0, r3
   d6706:	f000 b965 	b.w	d69d4 <__cxa_atexit>
	...

000d670c <_ZSt15get_new_handlerv>:
   d670c:	4b02      	ldr	r3, [pc, #8]	; (d6718 <_ZSt15get_new_handlerv+0xc>)
   d670e:	6818      	ldr	r0, [r3, #0]
   d6710:	f3bf 8f5f 	dmb	sy
   d6714:	4770      	bx	lr
   d6716:	bf00      	nop
   d6718:	2003e74c 	.word	0x2003e74c

000d671c <_ZdlPvj>:
   d671c:	f7fd bcbb 	b.w	d4096 <_ZdlPv>

000d6720 <_ZnajRKSt9nothrow_t>:
   d6720:	f000 b800 	b.w	d6724 <_ZnwjRKSt9nothrow_t>

000d6724 <_ZnwjRKSt9nothrow_t>:
   d6724:	b510      	push	{r4, lr}
   d6726:	2800      	cmp	r0, #0
   d6728:	bf14      	ite	ne
   d672a:	4604      	movne	r4, r0
   d672c:	2401      	moveq	r4, #1
   d672e:	4620      	mov	r0, r4
   d6730:	f7ff f9ee 	bl	d5b10 <malloc>
   d6734:	b920      	cbnz	r0, d6740 <_ZnwjRKSt9nothrow_t+0x1c>
   d6736:	f7ff ffe9 	bl	d670c <_ZSt15get_new_handlerv>
   d673a:	b108      	cbz	r0, d6740 <_ZnwjRKSt9nothrow_t+0x1c>
   d673c:	4780      	blx	r0
   d673e:	e7f6      	b.n	d672e <_ZnwjRKSt9nothrow_t+0xa>
   d6740:	bd10      	pop	{r4, pc}
	...

000d6744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6744:	4b18      	ldr	r3, [pc, #96]	; (d67a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6746:	681a      	ldr	r2, [r3, #0]
   d6748:	07d1      	lsls	r1, r2, #31
   d674a:	bf5c      	itt	pl
   d674c:	2201      	movpl	r2, #1
   d674e:	601a      	strpl	r2, [r3, #0]
   d6750:	4b16      	ldr	r3, [pc, #88]	; (d67ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6752:	681a      	ldr	r2, [r3, #0]
   d6754:	07d2      	lsls	r2, r2, #31
   d6756:	bf5c      	itt	pl
   d6758:	2201      	movpl	r2, #1
   d675a:	601a      	strpl	r2, [r3, #0]
   d675c:	4b14      	ldr	r3, [pc, #80]	; (d67b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d675e:	681a      	ldr	r2, [r3, #0]
   d6760:	07d0      	lsls	r0, r2, #31
   d6762:	bf5c      	itt	pl
   d6764:	2201      	movpl	r2, #1
   d6766:	601a      	strpl	r2, [r3, #0]
   d6768:	4b12      	ldr	r3, [pc, #72]	; (d67b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d676a:	681a      	ldr	r2, [r3, #0]
   d676c:	07d1      	lsls	r1, r2, #31
   d676e:	bf5c      	itt	pl
   d6770:	2201      	movpl	r2, #1
   d6772:	601a      	strpl	r2, [r3, #0]
   d6774:	4b10      	ldr	r3, [pc, #64]	; (d67b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6776:	681a      	ldr	r2, [r3, #0]
   d6778:	07d2      	lsls	r2, r2, #31
   d677a:	bf5c      	itt	pl
   d677c:	2201      	movpl	r2, #1
   d677e:	601a      	strpl	r2, [r3, #0]
   d6780:	4b0e      	ldr	r3, [pc, #56]	; (d67bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6782:	681a      	ldr	r2, [r3, #0]
   d6784:	07d0      	lsls	r0, r2, #31
   d6786:	bf5c      	itt	pl
   d6788:	2201      	movpl	r2, #1
   d678a:	601a      	strpl	r2, [r3, #0]
   d678c:	4b0c      	ldr	r3, [pc, #48]	; (d67c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d678e:	681a      	ldr	r2, [r3, #0]
   d6790:	07d1      	lsls	r1, r2, #31
   d6792:	bf5c      	itt	pl
   d6794:	2201      	movpl	r2, #1
   d6796:	601a      	strpl	r2, [r3, #0]
   d6798:	4b0a      	ldr	r3, [pc, #40]	; (d67c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d679a:	681a      	ldr	r2, [r3, #0]
   d679c:	07d2      	lsls	r2, r2, #31
   d679e:	bf5c      	itt	pl
   d67a0:	2201      	movpl	r2, #1
   d67a2:	601a      	strpl	r2, [r3, #0]
   d67a4:	4770      	bx	lr
   d67a6:	bf00      	nop
   d67a8:	2003e76c 	.word	0x2003e76c
   d67ac:	2003e768 	.word	0x2003e768
   d67b0:	2003e764 	.word	0x2003e764
   d67b4:	2003e760 	.word	0x2003e760
   d67b8:	2003e75c 	.word	0x2003e75c
   d67bc:	2003e758 	.word	0x2003e758
   d67c0:	2003e754 	.word	0x2003e754
   d67c4:	2003e750 	.word	0x2003e750

000d67c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d67c8:	4b24      	ldr	r3, [pc, #144]	; (d685c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d67ca:	681a      	ldr	r2, [r3, #0]
   d67cc:	07d0      	lsls	r0, r2, #31
   d67ce:	bf5c      	itt	pl
   d67d0:	2201      	movpl	r2, #1
   d67d2:	601a      	strpl	r2, [r3, #0]
   d67d4:	4b22      	ldr	r3, [pc, #136]	; (d6860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d67d6:	681a      	ldr	r2, [r3, #0]
   d67d8:	07d1      	lsls	r1, r2, #31
   d67da:	bf5c      	itt	pl
   d67dc:	2201      	movpl	r2, #1
   d67de:	601a      	strpl	r2, [r3, #0]
   d67e0:	4b20      	ldr	r3, [pc, #128]	; (d6864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d67e2:	681a      	ldr	r2, [r3, #0]
   d67e4:	07d2      	lsls	r2, r2, #31
   d67e6:	bf5c      	itt	pl
   d67e8:	2201      	movpl	r2, #1
   d67ea:	601a      	strpl	r2, [r3, #0]
   d67ec:	4b1e      	ldr	r3, [pc, #120]	; (d6868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d67ee:	681a      	ldr	r2, [r3, #0]
   d67f0:	07d0      	lsls	r0, r2, #31
   d67f2:	bf5c      	itt	pl
   d67f4:	2201      	movpl	r2, #1
   d67f6:	601a      	strpl	r2, [r3, #0]
   d67f8:	4b1c      	ldr	r3, [pc, #112]	; (d686c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d67fa:	681a      	ldr	r2, [r3, #0]
   d67fc:	07d1      	lsls	r1, r2, #31
   d67fe:	bf5c      	itt	pl
   d6800:	2201      	movpl	r2, #1
   d6802:	601a      	strpl	r2, [r3, #0]
   d6804:	4b1a      	ldr	r3, [pc, #104]	; (d6870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6806:	681a      	ldr	r2, [r3, #0]
   d6808:	07d2      	lsls	r2, r2, #31
   d680a:	bf5c      	itt	pl
   d680c:	2201      	movpl	r2, #1
   d680e:	601a      	strpl	r2, [r3, #0]
   d6810:	4b18      	ldr	r3, [pc, #96]	; (d6874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6812:	681a      	ldr	r2, [r3, #0]
   d6814:	07d0      	lsls	r0, r2, #31
   d6816:	bf5c      	itt	pl
   d6818:	2201      	movpl	r2, #1
   d681a:	601a      	strpl	r2, [r3, #0]
   d681c:	4b16      	ldr	r3, [pc, #88]	; (d6878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d681e:	681a      	ldr	r2, [r3, #0]
   d6820:	07d1      	lsls	r1, r2, #31
   d6822:	bf5c      	itt	pl
   d6824:	2201      	movpl	r2, #1
   d6826:	601a      	strpl	r2, [r3, #0]
   d6828:	4b14      	ldr	r3, [pc, #80]	; (d687c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d682a:	681a      	ldr	r2, [r3, #0]
   d682c:	07d2      	lsls	r2, r2, #31
   d682e:	bf5c      	itt	pl
   d6830:	2201      	movpl	r2, #1
   d6832:	601a      	strpl	r2, [r3, #0]
   d6834:	4b12      	ldr	r3, [pc, #72]	; (d6880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6836:	681a      	ldr	r2, [r3, #0]
   d6838:	07d0      	lsls	r0, r2, #31
   d683a:	bf5c      	itt	pl
   d683c:	2201      	movpl	r2, #1
   d683e:	601a      	strpl	r2, [r3, #0]
   d6840:	4b10      	ldr	r3, [pc, #64]	; (d6884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6842:	681a      	ldr	r2, [r3, #0]
   d6844:	07d1      	lsls	r1, r2, #31
   d6846:	bf5c      	itt	pl
   d6848:	2201      	movpl	r2, #1
   d684a:	601a      	strpl	r2, [r3, #0]
   d684c:	4b0e      	ldr	r3, [pc, #56]	; (d6888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d684e:	681a      	ldr	r2, [r3, #0]
   d6850:	07d2      	lsls	r2, r2, #31
   d6852:	bf5c      	itt	pl
   d6854:	2201      	movpl	r2, #1
   d6856:	601a      	strpl	r2, [r3, #0]
   d6858:	4770      	bx	lr
   d685a:	bf00      	nop
   d685c:	2003e79c 	.word	0x2003e79c
   d6860:	2003e798 	.word	0x2003e798
   d6864:	2003e794 	.word	0x2003e794
   d6868:	2003e790 	.word	0x2003e790
   d686c:	2003e78c 	.word	0x2003e78c
   d6870:	2003e788 	.word	0x2003e788
   d6874:	2003e784 	.word	0x2003e784
   d6878:	2003e780 	.word	0x2003e780
   d687c:	2003e77c 	.word	0x2003e77c
   d6880:	2003e778 	.word	0x2003e778
   d6884:	2003e774 	.word	0x2003e774
   d6888:	2003e770 	.word	0x2003e770

000d688c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d688c:	4b24      	ldr	r3, [pc, #144]	; (d6920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d688e:	681a      	ldr	r2, [r3, #0]
   d6890:	07d0      	lsls	r0, r2, #31
   d6892:	bf5c      	itt	pl
   d6894:	2201      	movpl	r2, #1
   d6896:	601a      	strpl	r2, [r3, #0]
   d6898:	4b22      	ldr	r3, [pc, #136]	; (d6924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d689a:	681a      	ldr	r2, [r3, #0]
   d689c:	07d1      	lsls	r1, r2, #31
   d689e:	bf5c      	itt	pl
   d68a0:	2201      	movpl	r2, #1
   d68a2:	601a      	strpl	r2, [r3, #0]
   d68a4:	4b20      	ldr	r3, [pc, #128]	; (d6928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d68a6:	681a      	ldr	r2, [r3, #0]
   d68a8:	07d2      	lsls	r2, r2, #31
   d68aa:	bf5c      	itt	pl
   d68ac:	2201      	movpl	r2, #1
   d68ae:	601a      	strpl	r2, [r3, #0]
   d68b0:	4b1e      	ldr	r3, [pc, #120]	; (d692c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d68b2:	681a      	ldr	r2, [r3, #0]
   d68b4:	07d0      	lsls	r0, r2, #31
   d68b6:	bf5c      	itt	pl
   d68b8:	2201      	movpl	r2, #1
   d68ba:	601a      	strpl	r2, [r3, #0]
   d68bc:	4b1c      	ldr	r3, [pc, #112]	; (d6930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d68be:	681a      	ldr	r2, [r3, #0]
   d68c0:	07d1      	lsls	r1, r2, #31
   d68c2:	bf5c      	itt	pl
   d68c4:	2201      	movpl	r2, #1
   d68c6:	601a      	strpl	r2, [r3, #0]
   d68c8:	4b1a      	ldr	r3, [pc, #104]	; (d6934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d68ca:	681a      	ldr	r2, [r3, #0]
   d68cc:	07d2      	lsls	r2, r2, #31
   d68ce:	bf5c      	itt	pl
   d68d0:	2201      	movpl	r2, #1
   d68d2:	601a      	strpl	r2, [r3, #0]
   d68d4:	4b18      	ldr	r3, [pc, #96]	; (d6938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d68d6:	681a      	ldr	r2, [r3, #0]
   d68d8:	07d0      	lsls	r0, r2, #31
   d68da:	bf5c      	itt	pl
   d68dc:	2201      	movpl	r2, #1
   d68de:	601a      	strpl	r2, [r3, #0]
   d68e0:	4b16      	ldr	r3, [pc, #88]	; (d693c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d68e2:	681a      	ldr	r2, [r3, #0]
   d68e4:	07d1      	lsls	r1, r2, #31
   d68e6:	bf5c      	itt	pl
   d68e8:	2201      	movpl	r2, #1
   d68ea:	601a      	strpl	r2, [r3, #0]
   d68ec:	4b14      	ldr	r3, [pc, #80]	; (d6940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d68ee:	681a      	ldr	r2, [r3, #0]
   d68f0:	07d2      	lsls	r2, r2, #31
   d68f2:	bf5c      	itt	pl
   d68f4:	2201      	movpl	r2, #1
   d68f6:	601a      	strpl	r2, [r3, #0]
   d68f8:	4b12      	ldr	r3, [pc, #72]	; (d6944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d68fa:	681a      	ldr	r2, [r3, #0]
   d68fc:	07d0      	lsls	r0, r2, #31
   d68fe:	bf5c      	itt	pl
   d6900:	2201      	movpl	r2, #1
   d6902:	601a      	strpl	r2, [r3, #0]
   d6904:	4b10      	ldr	r3, [pc, #64]	; (d6948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6906:	681a      	ldr	r2, [r3, #0]
   d6908:	07d1      	lsls	r1, r2, #31
   d690a:	bf5c      	itt	pl
   d690c:	2201      	movpl	r2, #1
   d690e:	601a      	strpl	r2, [r3, #0]
   d6910:	4b0e      	ldr	r3, [pc, #56]	; (d694c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6912:	681a      	ldr	r2, [r3, #0]
   d6914:	07d2      	lsls	r2, r2, #31
   d6916:	bf5c      	itt	pl
   d6918:	2201      	movpl	r2, #1
   d691a:	601a      	strpl	r2, [r3, #0]
   d691c:	4770      	bx	lr
   d691e:	bf00      	nop
   d6920:	2003e7cc 	.word	0x2003e7cc
   d6924:	2003e7c8 	.word	0x2003e7c8
   d6928:	2003e7c4 	.word	0x2003e7c4
   d692c:	2003e7c0 	.word	0x2003e7c0
   d6930:	2003e7bc 	.word	0x2003e7bc
   d6934:	2003e7b8 	.word	0x2003e7b8
   d6938:	2003e7b4 	.word	0x2003e7b4
   d693c:	2003e7b0 	.word	0x2003e7b0
   d6940:	2003e7ac 	.word	0x2003e7ac
   d6944:	2003e7a8 	.word	0x2003e7a8
   d6948:	2003e7a4 	.word	0x2003e7a4
   d694c:	2003e7a0 	.word	0x2003e7a0

000d6950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6950:	4b18      	ldr	r3, [pc, #96]	; (d69b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6952:	681a      	ldr	r2, [r3, #0]
   d6954:	07d1      	lsls	r1, r2, #31
   d6956:	bf5c      	itt	pl
   d6958:	2201      	movpl	r2, #1
   d695a:	601a      	strpl	r2, [r3, #0]
   d695c:	4b16      	ldr	r3, [pc, #88]	; (d69b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d695e:	681a      	ldr	r2, [r3, #0]
   d6960:	07d2      	lsls	r2, r2, #31
   d6962:	bf5c      	itt	pl
   d6964:	2201      	movpl	r2, #1
   d6966:	601a      	strpl	r2, [r3, #0]
   d6968:	4b14      	ldr	r3, [pc, #80]	; (d69bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d696a:	681a      	ldr	r2, [r3, #0]
   d696c:	07d0      	lsls	r0, r2, #31
   d696e:	bf5c      	itt	pl
   d6970:	2201      	movpl	r2, #1
   d6972:	601a      	strpl	r2, [r3, #0]
   d6974:	4b12      	ldr	r3, [pc, #72]	; (d69c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6976:	681a      	ldr	r2, [r3, #0]
   d6978:	07d1      	lsls	r1, r2, #31
   d697a:	bf5c      	itt	pl
   d697c:	2201      	movpl	r2, #1
   d697e:	601a      	strpl	r2, [r3, #0]
   d6980:	4b10      	ldr	r3, [pc, #64]	; (d69c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6982:	681a      	ldr	r2, [r3, #0]
   d6984:	07d2      	lsls	r2, r2, #31
   d6986:	bf5c      	itt	pl
   d6988:	2201      	movpl	r2, #1
   d698a:	601a      	strpl	r2, [r3, #0]
   d698c:	4b0e      	ldr	r3, [pc, #56]	; (d69c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d698e:	681a      	ldr	r2, [r3, #0]
   d6990:	07d0      	lsls	r0, r2, #31
   d6992:	bf5c      	itt	pl
   d6994:	2201      	movpl	r2, #1
   d6996:	601a      	strpl	r2, [r3, #0]
   d6998:	4b0c      	ldr	r3, [pc, #48]	; (d69cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d699a:	681a      	ldr	r2, [r3, #0]
   d699c:	07d1      	lsls	r1, r2, #31
   d699e:	bf5c      	itt	pl
   d69a0:	2201      	movpl	r2, #1
   d69a2:	601a      	strpl	r2, [r3, #0]
   d69a4:	4b0a      	ldr	r3, [pc, #40]	; (d69d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d69a6:	681a      	ldr	r2, [r3, #0]
   d69a8:	07d2      	lsls	r2, r2, #31
   d69aa:	bf5c      	itt	pl
   d69ac:	2201      	movpl	r2, #1
   d69ae:	601a      	strpl	r2, [r3, #0]
   d69b0:	4770      	bx	lr
   d69b2:	bf00      	nop
   d69b4:	2003e7ec 	.word	0x2003e7ec
   d69b8:	2003e7e8 	.word	0x2003e7e8
   d69bc:	2003e7e4 	.word	0x2003e7e4
   d69c0:	2003e7e0 	.word	0x2003e7e0
   d69c4:	2003e7dc 	.word	0x2003e7dc
   d69c8:	2003e7d8 	.word	0x2003e7d8
   d69cc:	2003e7d4 	.word	0x2003e7d4
   d69d0:	2003e7d0 	.word	0x2003e7d0

000d69d4 <__cxa_atexit>:
   d69d4:	b510      	push	{r4, lr}
   d69d6:	4c05      	ldr	r4, [pc, #20]	; (d69ec <__cxa_atexit+0x18>)
   d69d8:	4613      	mov	r3, r2
   d69da:	b12c      	cbz	r4, d69e8 <__cxa_atexit+0x14>
   d69dc:	460a      	mov	r2, r1
   d69de:	4601      	mov	r1, r0
   d69e0:	2002      	movs	r0, #2
   d69e2:	f3af 8000 	nop.w
   d69e6:	bd10      	pop	{r4, pc}
   d69e8:	4620      	mov	r0, r4
   d69ea:	bd10      	pop	{r4, pc}
   d69ec:	00000000 	.word	0x00000000

000d69f0 <memcpy>:
   d69f0:	b510      	push	{r4, lr}
   d69f2:	1e43      	subs	r3, r0, #1
   d69f4:	440a      	add	r2, r1
   d69f6:	4291      	cmp	r1, r2
   d69f8:	d004      	beq.n	d6a04 <memcpy+0x14>
   d69fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d69fe:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6a02:	e7f8      	b.n	d69f6 <memcpy+0x6>
   d6a04:	bd10      	pop	{r4, pc}

000d6a06 <memset>:
   d6a06:	4402      	add	r2, r0
   d6a08:	4603      	mov	r3, r0
   d6a0a:	4293      	cmp	r3, r2
   d6a0c:	d002      	beq.n	d6a14 <memset+0xe>
   d6a0e:	f803 1b01 	strb.w	r1, [r3], #1
   d6a12:	e7fa      	b.n	d6a0a <memset+0x4>
   d6a14:	4770      	bx	lr
	...

000d6a18 <srand>:
   d6a18:	b538      	push	{r3, r4, r5, lr}
   d6a1a:	4b12      	ldr	r3, [pc, #72]	; (d6a64 <srand+0x4c>)
   d6a1c:	681c      	ldr	r4, [r3, #0]
   d6a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6a20:	4605      	mov	r5, r0
   d6a22:	b9d3      	cbnz	r3, d6a5a <srand+0x42>
   d6a24:	2018      	movs	r0, #24
   d6a26:	f7ff f873 	bl	d5b10 <malloc>
   d6a2a:	f243 330e 	movw	r3, #13070	; 0x330e
   d6a2e:	63a0      	str	r0, [r4, #56]	; 0x38
   d6a30:	8003      	strh	r3, [r0, #0]
   d6a32:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6a36:	8043      	strh	r3, [r0, #2]
   d6a38:	f241 2334 	movw	r3, #4660	; 0x1234
   d6a3c:	8083      	strh	r3, [r0, #4]
   d6a3e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6a42:	80c3      	strh	r3, [r0, #6]
   d6a44:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6a48:	8103      	strh	r3, [r0, #8]
   d6a4a:	2305      	movs	r3, #5
   d6a4c:	8143      	strh	r3, [r0, #10]
   d6a4e:	230b      	movs	r3, #11
   d6a50:	8183      	strh	r3, [r0, #12]
   d6a52:	2201      	movs	r2, #1
   d6a54:	2300      	movs	r3, #0
   d6a56:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6a5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6a5c:	2200      	movs	r2, #0
   d6a5e:	611d      	str	r5, [r3, #16]
   d6a60:	615a      	str	r2, [r3, #20]
   d6a62:	bd38      	pop	{r3, r4, r5, pc}
   d6a64:	2003e37c 	.word	0x2003e37c

000d6a68 <strlen>:
   d6a68:	4603      	mov	r3, r0
   d6a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6a6e:	2a00      	cmp	r2, #0
   d6a70:	d1fb      	bne.n	d6a6a <strlen+0x2>
   d6a72:	1a18      	subs	r0, r3, r0
   d6a74:	3801      	subs	r0, #1
   d6a76:	4770      	bx	lr

000d6a78 <dynalib_user>:
   d6a78:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6a88:	0000 0000 4c43 4145 4952 474e 4520 5045     ....CLEARING EEP
   d6a98:	4f52 004d 6f4e 6d20 7361 6574 2072 6163     ROM.No master ca
   d6aa8:	6472 6420 6665 6e69 6465 5300 6163 206e     rd defined.Scan 
   d6ab8:	6163 6472 7420 206f 6564 6966 656e 6120     card to define a
   d6ac8:	2073 616d 7473 7265 6320 7261 2e64 4d00     s master card..M
   d6ad8:	7361 6574 2072 6143 6472 4420 6665 6e69     aster Card Defin
   d6ae8:	6465 4d00 7361 6574 2072 6163 6472 7320     ed.Master card s
   d6af8:	6f74 6572 3a64 0020 7553 6363 7365 7566     tored: .Succesfu
   d6b08:	6c6c 2079 6461 6564 2064 4449 7220 6365     lly added ID rec
   d6b18:	726f 2064 6f74 4520 5045 4f52 004d 6146     ord to EEPROM.Fa
   d6b28:	6c69 6465 2021 6854 7265 2065 7369 7320     iled! There is s
   d6b38:	6d6f 7465 6968 676e 7720 6f72 676e 7720     omething wrong w
   d6b48:	7469 2068 4449 6f20 2072 6162 2064 4545     ith ID or bad EE
   d6b58:	5250 4d4f 5300 6375 6563 6673 6c75 796c     PROM.Succesfully
   d6b68:	7220 6d65 766f 6465 4920 2044 6572 6f63      removed ID reco
   d6b78:	6472 6620 6f72 206d 4545 5250 4d4f 5300     rd from EEPROM.S
   d6b88:	6375 6563 7373 7566 206c 6163 6472 7220     uccessful card r
   d6b98:	6165 0064 614d 7473 7265 6320 7261 2064     ead.Master card 
   d6ba8:	6564 6574 7463 6465 4d00 7361 6574 2072     detected.Master 
   d6bb8:	6163 6472 6420 7465 6365 6574 2064 6761     card detected ag
   d6bc8:	6961 006e 654e 7478 6320 7261 2064 6373     ain.Next card sc
   d6bd8:	6e61 656e 2064 6977 6c6c 6220 2065 6c62     anned will be bl
   d6be8:	6361 6c6b 7369 6574 0064 6143 6472 7220     acklisted.Card r
   d6bf8:	6d65 766f 6465 4300 7261 2064 6877 7469     emoved.Card whit
   d6c08:	6c65 7369 6574 0064 6163 6472 6e20 746f     elisted.card not
   d6c18:	6d20 7361 6574 0072 6143 6472 4b20 6f6e      master.Card Kno
   d6c28:	6e77 4300 7261 2064 6e75 6f6b 6e77 2000     wn.Card unkown. 
   d6c38:	0030 0000 c000 4001 1000 4002 2000 4002     0......@...@. .@

000d6c48 <CSWTCH.65>:
   d6c48:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d6c58:	0050 0000                                   P...

000d6c5c <_ZTVN5spark13EthernetClassE>:
	...
   d6c64:	5b8f 000d 5b85 000d 5b7b 000d 5b71 000d     .[...[..{[..q[..
   d6c74:	5b65 000d 5b59 000d 5b4d 000d 5b45 000d     e[..Y[..M[..E[..
   d6c84:	5b3b 000d 5b31 000d 6491 000d 6162 6475     ;[..1[...d..baud
   d6c94:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6ca4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6cb4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6cc4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6cd4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6ce4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6cf4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6d04:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d6d14:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d6d24:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d6d34:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d6d44:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d6d54:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d6d64:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d6d74:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d6d84:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d6d94:	7463 6d69 0065 0000                         ctime...

000d6d9c <_ZTV9IPAddress>:
	...
   d6da4:	5eb9 000d 5ea9 000d 5eab 000d               .^...^...^..

000d6db0 <_ZTV9USBSerial>:
	...
   d6db8:	5f91 000d 5fe1 000d 5fef 000d 5c6d 000d     ._..._..._..m\..
   d6dc8:	5fcd 000d 5f93 000d 5fa9 000d 5fdb 000d     ._..._..._..._..
   d6dd8:	5fbf 000d 5f8d 000d                         ._..._..

000d6de0 <_ZTV11USARTSerial>:
	...
   d6de8:	60a9 000d 60f9 000d 6107 000d 5c6d 000d     .`...`...a..m\..
   d6df8:	60bd 000d 60df 000d 60cb 000d 60f3 000d     .`...`...`...`..
   d6e08:	60ab 000d 60af 000d                         .`...`..

000d6e10 <_ZTV7TwoWire>:
	...
   d6e18:	61ad 000d 61f7 000d 61cf 000d 61af 000d     .a...a...a...a..
   d6e28:	61d7 000d 61df 000d 61e7 000d 61ef 000d     .a...a...a...a..

000d6e38 <_ZTVN5spark9MeshClassE>:
	...
   d6e40:	628f 000d 6285 000d 627b 000d 6271 000d     .b...b..{b..qb..
   d6e50:	6265 000d 6259 000d 624d 000d 6245 000d     eb..Yb..Mb..Eb..
   d6e60:	623b 000d 6231 000d 6491 000d               ;b..1b...d..

000d6e6c <_ZTVN5spark9WiFiClassE>:
	...
   d6e74:	640b 000d 6401 000d 63f7 000d 63ad 000d     .d...d...c...c..
   d6e84:	63eb 000d 63df 000d 63d3 000d 63cb 000d     .c...c...c...c..
   d6e94:	63c1 000d 63b7 000d 6491 000d               .c...c...d..

000d6ea0 <_ZTVN5spark12NetworkClassE>:
	...
   d6ea8:	6429 000d 6433 000d 643d 000d 6447 000d     )d..3d..=d..Gd..
   d6eb8:	6451 000d 645d 000d 6469 000d 6475 000d     Qd..]d..id..ud..
   d6ec8:	647d 000d 6487 000d 6491 000d               }d...d...d..

000d6ed4 <_ZSt7nothrow>:
   d6ed4:	0000 0000                                   ....

000d6ed8 <__sf_fake_stdin>:
	...

000d6ef8 <__sf_fake_stdout>:
	...

000d6f18 <__sf_fake_stderr>:
	...
   d6f38:	0043                                        C.

000d6f3a <link_const_variable_data_end>:
	...

000d6f3c <link_constructors_location>:
   d6f3c:	000d49cd 	.word	0x000d49cd
   d6f40:	000d5233 	.word	0x000d5233
   d6f44:	000d56e5 	.word	0x000d56e5
   d6f48:	000d5b99 	.word	0x000d5b99
   d6f4c:	000d5c01 	.word	0x000d5c01
   d6f50:	000d5c45 	.word	0x000d5c45
   d6f54:	000d5d35 	.word	0x000d5d35
   d6f58:	000d5d45 	.word	0x000d5d45
   d6f5c:	000d5d7d 	.word	0x000d5d7d
   d6f60:	000d635d 	.word	0x000d635d
   d6f64:	000d6415 	.word	0x000d6415
   d6f68:	000d655d 	.word	0x000d655d
   d6f6c:	000d6745 	.word	0x000d6745
   d6f70:	000d67c9 	.word	0x000d67c9
   d6f74:	000d688d 	.word	0x000d688d
   d6f78:	000d6951 	.word	0x000d6951

000d6f7c <link_constructors_end>:
   d6f7c:	00000000 	.word	0x00000000
