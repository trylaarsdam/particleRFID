
d:/Dev/rfid/target/1.5.2/argon/rfid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000028b4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d68d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e2d4  000d68d4  0001e2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004b4  2003e33c  2003e33c  0002e33c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d693c  000d693c  0002693c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6964  000d6964  00026964  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d5fc9  00000000  00000000  00026968  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010ad3  00000000  00000000  000fc931  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ecc1  00000000  00000000  0010d404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023f0  00000000  00000000  0012c0c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000044e0  00000000  00000000  0012e4b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000350f8  00000000  00000000  00132995  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000292af  00000000  00000000  00167a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101a0c  00000000  00000000  00190d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cb2c  00000000  00000000  00292748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f9c3 	bl	d63b8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f9c8 	bl	d63ce <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2d4 	.word	0x2003e2d4
   d4048:	000d68d4 	.word	0x000d68d4
   d404c:	2003e33c 	.word	0x2003e33c
   d4050:	2003e33c 	.word	0x2003e33c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fbf1 	bl	d5840 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d68c8 	.word	0x000d68c8
   d4080:	000d6888 	.word	0x000d6888

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81c 	b.w	d40c0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8eb 	bl	d4264 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bb97 	b.w	d57c4 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 ba3b 	b.w	d5510 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 ba39 	b.w	d5510 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f001 fa2b 	bl	d5510 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}
	...

000d40c0 <setup>:
bool _tag_found = false;

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  pinMode(D3, OUTPUT);
   d40c0:	2101      	movs	r1, #1
bool rfid_tag_present = false;
int _rfid_error_counter = 0;
bool _tag_found = false;

// setup() runs once, when the device is first turned on.
void setup() {
   d40c2:	b538      	push	{r3, r4, r5, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(D3, OUTPUT);
   d40c4:	2003      	movs	r0, #3
   d40c6:	f001 ff81 	bl	d5fcc <pinMode>
  Serial.begin(9600);
   d40ca:	f001 fcbf 	bl	d5a4c <_Z16_fetch_usbserialv>
   d40ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40d2:	f001 fca9 	bl	d5a28 <_ZN9USBSerial5beginEl>
  while(!Serial);
   d40d6:	f001 fcb9 	bl	d5a4c <_Z16_fetch_usbserialv>
   d40da:	f001 fcac 	bl	d5a36 <_ZN9USBSerialcvbEv>
   d40de:	2800      	cmp	r0, #0
   d40e0:	d0f9      	beq.n	d40d6 <setup+0x16>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d40e2:	4d15      	ldr	r5, [pc, #84]	; (d4138 <setup+0x78>)
   d40e4:	6829      	ldr	r1, [r5, #0]
   d40e6:	f011 0401 	ands.w	r4, r1, #1
   d40ea:	d10a      	bne.n	d4102 <setup+0x42>
   d40ec:	4628      	mov	r0, r5
   d40ee:	f7ff ffd6 	bl	d409e <__cxa_guard_acquire>
   d40f2:	b130      	cbz	r0, d4102 <setup+0x42>
   d40f4:	4621      	mov	r1, r4
   d40f6:	4811      	ldr	r0, [pc, #68]	; (d413c <setup+0x7c>)
   d40f8:	f001 fa56 	bl	d55a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d40fc:	4628      	mov	r0, r5
   d40fe:	f7ff ffd3 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }

    void begin() {
        instance().begin();
   d4102:	480e      	ldr	r0, [pc, #56]	; (d413c <setup+0x7c>)
   d4104:	f001 fa5a 	bl	d55bc <_ZN8SPIClass5beginEv>
  SPI.begin();
  mfrc522.PCD_Init();
   d4108:	480d      	ldr	r0, [pc, #52]	; (d4140 <setup+0x80>)
   d410a:	f000 fa99 	bl	d4640 <_ZN7MFRC5228PCD_InitEv>
  pixels.begin();
   d410e:	480d      	ldr	r0, [pc, #52]	; (d4144 <setup+0x84>)
   d4110:	f000 fdd7 	bl	d4cc2 <_ZN17Adafruit_NeoPixel5beginEv>
  for(int i=0; i<NUMPIXELS; i++){
   d4114:	2400      	movs	r4, #0
    pixels.setPixelColor(i, pixels.Color(0,0,0));
   d4116:	2200      	movs	r2, #0
   d4118:	4611      	mov	r1, r2
   d411a:	4610      	mov	r0, r2
   d411c:	f000 fff5 	bl	d510a <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4120:	b2a1      	uxth	r1, r4
   d4122:	4602      	mov	r2, r0
   d4124:	4807      	ldr	r0, [pc, #28]	; (d4144 <setup+0x84>)
   d4126:	f000 ffa5 	bl	d5074 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  Serial.begin(9600);
  while(!Serial);
  SPI.begin();
  mfrc522.PCD_Init();
  pixels.begin();
  for(int i=0; i<NUMPIXELS; i++){
   d412a:	3401      	adds	r4, #1
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();    
   d412c:	4805      	ldr	r0, [pc, #20]	; (d4144 <setup+0x84>)
   d412e:	f000 fdff 	bl	d4d30 <_ZN17Adafruit_NeoPixel4showEv>
  Serial.begin(9600);
  while(!Serial);
  SPI.begin();
  mfrc522.PCD_Init();
  pixels.begin();
  for(int i=0; i<NUMPIXELS; i++){
   d4132:	2c0c      	cmp	r4, #12
   d4134:	d1ef      	bne.n	d4116 <setup+0x56>
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();    
  }
}
   d4136:	bd38      	pop	{r3, r4, r5, pc}
   d4138:	2003e340 	.word	0x2003e340
   d413c:	2003e344 	.word	0x2003e344
   d4140:	2003e361 	.word	0x2003e361
   d4144:	2003e34c 	.word	0x2003e34c

000d4148 <_Z6unlockv>:

void unlock(){
   d4148:	b570      	push	{r4, r5, r6, lr}
  //unlock animation
  digitalWrite(D3, HIGH);
   d414a:	2101      	movs	r1, #1
   d414c:	2003      	movs	r0, #3
   d414e:	f001 ff4e 	bl	d5fee <digitalWrite>
  for(int fade=0; fade<MAXVAL; fade++){
   d4152:	2400      	movs	r4, #0
   d4154:	2500      	movs	r5, #0
    for(int i=0; i<NUMPIXELS; i++){
      pixels.setPixelColor(i, pixels.Color(0,fade,0));
   d4156:	b2e6      	uxtb	r6, r4
   d4158:	2200      	movs	r2, #0
   d415a:	4631      	mov	r1, r6
   d415c:	4610      	mov	r0, r2
   d415e:	f000 ffd4 	bl	d510a <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4162:	b2a9      	uxth	r1, r5
   d4164:	4602      	mov	r2, r0
   d4166:	483e      	ldr	r0, [pc, #248]	; (d4260 <_Z6unlockv+0x118>)
   d4168:	f000 ff84 	bl	d5074 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>

void unlock(){
  //unlock animation
  digitalWrite(D3, HIGH);
  for(int fade=0; fade<MAXVAL; fade++){
    for(int i=0; i<NUMPIXELS; i++){
   d416c:	3501      	adds	r5, #1
      pixels.setPixelColor(i, pixels.Color(0,fade,0));
      pixels.show();
   d416e:	483c      	ldr	r0, [pc, #240]	; (d4260 <_Z6unlockv+0x118>)
   d4170:	f000 fdde 	bl	d4d30 <_ZN17Adafruit_NeoPixel4showEv>

void unlock(){
  //unlock animation
  digitalWrite(D3, HIGH);
  for(int fade=0; fade<MAXVAL; fade++){
    for(int i=0; i<NUMPIXELS; i++){
   d4174:	2d0c      	cmp	r5, #12
   d4176:	d1ef      	bne.n	d4158 <_Z6unlockv+0x10>
      pixels.setPixelColor(i, pixels.Color(0,fade,0));
      pixels.show();
    }
    delay(FADEVAL);
   d4178:	2005      	movs	r0, #5
}

void unlock(){
  //unlock animation
  digitalWrite(D3, HIGH);
  for(int fade=0; fade<MAXVAL; fade++){
   d417a:	3401      	adds	r4, #1
    for(int i=0; i<NUMPIXELS; i++){
      pixels.setPixelColor(i, pixels.Color(0,fade,0));
      pixels.show();
    }
    delay(FADEVAL);
   d417c:	f001 fae4 	bl	d5748 <delay>
}

void unlock(){
  //unlock animation
  digitalWrite(D3, HIGH);
  for(int fade=0; fade<MAXVAL; fade++){
   d4180:	2c32      	cmp	r4, #50	; 0x32
   d4182:	d1e7      	bne.n	d4154 <_Z6unlockv+0xc>
      pixels.show();
    }
    delay(FADEVAL);
  }
  
  delay(DELAYVAL * 7);
   d4184:	f240 60d6 	movw	r0, #1750	; 0x6d6
   d4188:	f001 fade 	bl	d5748 <delay>
  for(int i=0; i<NUMPIXELS; i++){
   d418c:	2500      	movs	r5, #0
   d418e:	2432      	movs	r4, #50	; 0x32
    for(int fade=0; fade<MAXVAL; fade++){
      pixels.setPixelColor(i, pixels.Color(0,MAXVAL-fade,0));
   d4190:	b2ae      	uxth	r6, r5
   d4192:	2200      	movs	r2, #0
   d4194:	b2e1      	uxtb	r1, r4
   d4196:	4610      	mov	r0, r2
   d4198:	f000 ffb7 	bl	d510a <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d419c:	4631      	mov	r1, r6
   d419e:	4602      	mov	r2, r0
   d41a0:	482f      	ldr	r0, [pc, #188]	; (d4260 <_Z6unlockv+0x118>)
   d41a2:	f000 ff67 	bl	d5074 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      pixels.show();
   d41a6:	482e      	ldr	r0, [pc, #184]	; (d4260 <_Z6unlockv+0x118>)
   d41a8:	f000 fdc2 	bl	d4d30 <_ZN17Adafruit_NeoPixel4showEv>
      delay(FADEVAL);
   d41ac:	2005      	movs	r0, #5
   d41ae:	f001 facb 	bl	d5748 <delay>
    delay(FADEVAL);
  }
  
  delay(DELAYVAL * 7);
  for(int i=0; i<NUMPIXELS; i++){
    for(int fade=0; fade<MAXVAL; fade++){
   d41b2:	3c01      	subs	r4, #1
   d41b4:	d1ed      	bne.n	d4192 <_Z6unlockv+0x4a>
      pixels.setPixelColor(i, pixels.Color(0,MAXVAL-fade,0));
      pixels.show();
      delay(FADEVAL);
    }
    pixels.setPixelColor(i, pixels.Color(0,0,0));
   d41b6:	4622      	mov	r2, r4
   d41b8:	4621      	mov	r1, r4
   d41ba:	4620      	mov	r0, r4
   d41bc:	f000 ffa5 	bl	d510a <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d41c0:	4631      	mov	r1, r6
   d41c2:	4602      	mov	r2, r0
   d41c4:	4826      	ldr	r0, [pc, #152]	; (d4260 <_Z6unlockv+0x118>)
   d41c6:	f000 ff55 	bl	d5074 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    }
    delay(FADEVAL);
  }
  
  delay(DELAYVAL * 7);
  for(int i=0; i<NUMPIXELS; i++){
   d41ca:	3501      	adds	r5, #1
      pixels.setPixelColor(i, pixels.Color(0,MAXVAL-fade,0));
      pixels.show();
      delay(FADEVAL);
    }
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();
   d41cc:	4824      	ldr	r0, [pc, #144]	; (d4260 <_Z6unlockv+0x118>)
   d41ce:	f000 fdaf 	bl	d4d30 <_ZN17Adafruit_NeoPixel4showEv>
    }
    delay(FADEVAL);
  }
  
  delay(DELAYVAL * 7);
  for(int i=0; i<NUMPIXELS; i++){
   d41d2:	2d0c      	cmp	r5, #12
   d41d4:	d1db      	bne.n	d418e <_Z6unlockv+0x46>
      delay(FADEVAL);
    }
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();
  }
  digitalWrite(D3, LOW);
   d41d6:	4621      	mov	r1, r4
   d41d8:	2003      	movs	r0, #3
   d41da:	f001 ff08 	bl	d5fee <digitalWrite>
  //lock animation
  for(int fade=0; fade<MAXVAL; fade++){
   d41de:	2500      	movs	r5, #0
    for(int i=0; i<NUMPIXELS; i++){
      pixels.setPixelColor(i, pixels.Color(fade,0,0));
   d41e0:	b2e6      	uxtb	r6, r4
   d41e2:	2200      	movs	r2, #0
   d41e4:	4611      	mov	r1, r2
   d41e6:	4630      	mov	r0, r6
   d41e8:	f000 ff8f 	bl	d510a <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d41ec:	b2a9      	uxth	r1, r5
   d41ee:	4602      	mov	r2, r0
   d41f0:	481b      	ldr	r0, [pc, #108]	; (d4260 <_Z6unlockv+0x118>)
   d41f2:	f000 ff3f 	bl	d5074 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixels.show();
  }
  digitalWrite(D3, LOW);
  //lock animation
  for(int fade=0; fade<MAXVAL; fade++){
    for(int i=0; i<NUMPIXELS; i++){
   d41f6:	3501      	adds	r5, #1
      pixels.setPixelColor(i, pixels.Color(fade,0,0));
      pixels.show();
   d41f8:	4819      	ldr	r0, [pc, #100]	; (d4260 <_Z6unlockv+0x118>)
   d41fa:	f000 fd99 	bl	d4d30 <_ZN17Adafruit_NeoPixel4showEv>
    pixels.show();
  }
  digitalWrite(D3, LOW);
  //lock animation
  for(int fade=0; fade<MAXVAL; fade++){
    for(int i=0; i<NUMPIXELS; i++){
   d41fe:	2d0c      	cmp	r5, #12
   d4200:	d1ef      	bne.n	d41e2 <_Z6unlockv+0x9a>
      pixels.setPixelColor(i, pixels.Color(fade,0,0));
      pixels.show();
    }
    delay(FADEVAL-3);
   d4202:	2002      	movs	r0, #2
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();
  }
  digitalWrite(D3, LOW);
  //lock animation
  for(int fade=0; fade<MAXVAL; fade++){
   d4204:	3401      	adds	r4, #1
    for(int i=0; i<NUMPIXELS; i++){
      pixels.setPixelColor(i, pixels.Color(fade,0,0));
      pixels.show();
    }
    delay(FADEVAL-3);
   d4206:	f001 fa9f 	bl	d5748 <delay>
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();
  }
  digitalWrite(D3, LOW);
  //lock animation
  for(int fade=0; fade<MAXVAL; fade++){
   d420a:	2c32      	cmp	r4, #50	; 0x32
   d420c:	d1e7      	bne.n	d41de <_Z6unlockv+0x96>
   d420e:	2500      	movs	r5, #0
    }
    delay(FADEVAL-3);
  }
  for(int fade=0; fade<MAXVAL; fade++){
    for(int i=0; i<NUMPIXELS; i++){
      pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
   d4210:	b2e6      	uxtb	r6, r4
   d4212:	2200      	movs	r2, #0
   d4214:	4611      	mov	r1, r2
   d4216:	4630      	mov	r0, r6
   d4218:	f000 ff77 	bl	d510a <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d421c:	b2a9      	uxth	r1, r5
   d421e:	4602      	mov	r2, r0
   d4220:	480f      	ldr	r0, [pc, #60]	; (d4260 <_Z6unlockv+0x118>)
   d4222:	f000 ff27 	bl	d5074 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      pixels.show();
    }
    delay(FADEVAL-3);
  }
  for(int fade=0; fade<MAXVAL; fade++){
    for(int i=0; i<NUMPIXELS; i++){
   d4226:	3501      	adds	r5, #1
      pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
      pixels.show();
   d4228:	480d      	ldr	r0, [pc, #52]	; (d4260 <_Z6unlockv+0x118>)
   d422a:	f000 fd81 	bl	d4d30 <_ZN17Adafruit_NeoPixel4showEv>
      pixels.show();
    }
    delay(FADEVAL-3);
  }
  for(int fade=0; fade<MAXVAL; fade++){
    for(int i=0; i<NUMPIXELS; i++){
   d422e:	2d0c      	cmp	r5, #12
   d4230:	d1ef      	bne.n	d4212 <_Z6unlockv+0xca>
      pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
      pixels.show();
    }
    delay(FADEVAL-3);
   d4232:	2002      	movs	r0, #2
   d4234:	f001 fa88 	bl	d5748 <delay>
      pixels.setPixelColor(i, pixels.Color(fade,0,0));
      pixels.show();
    }
    delay(FADEVAL-3);
  }
  for(int fade=0; fade<MAXVAL; fade++){
   d4238:	3c01      	subs	r4, #1
   d423a:	d1e8      	bne.n	d420e <_Z6unlockv+0xc6>
      pixels.show();
    }
    delay(FADEVAL-3);
  }
  for(int i=0; i<NUMPIXELS; i++){
    pixels.setPixelColor(i, pixels.Color(0,0,0));
   d423c:	2200      	movs	r2, #0
   d423e:	4611      	mov	r1, r2
   d4240:	4610      	mov	r0, r2
   d4242:	f000 ff62 	bl	d510a <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d4246:	b2a1      	uxth	r1, r4
   d4248:	4602      	mov	r2, r0
   d424a:	4805      	ldr	r0, [pc, #20]	; (d4260 <_Z6unlockv+0x118>)
   d424c:	f000 ff12 	bl	d5074 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
      pixels.show();
    }
    delay(FADEVAL-3);
  }
  for(int i=0; i<NUMPIXELS; i++){
   d4250:	3401      	adds	r4, #1
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();
   d4252:	4803      	ldr	r0, [pc, #12]	; (d4260 <_Z6unlockv+0x118>)
   d4254:	f000 fd6c 	bl	d4d30 <_ZN17Adafruit_NeoPixel4showEv>
      pixels.setPixelColor(i, pixels.Color(MAXVAL-fade,0,0));
      pixels.show();
    }
    delay(FADEVAL-3);
  }
  for(int i=0; i<NUMPIXELS; i++){
   d4258:	2c0c      	cmp	r4, #12
   d425a:	d1ef      	bne.n	d423c <_Z6unlockv+0xf4>
    pixels.setPixelColor(i, pixels.Color(0,0,0));
    pixels.show();
  }
}
   d425c:	bd70      	pop	{r4, r5, r6, pc}
   d425e:	bf00      	nop
   d4260:	2003e34c 	.word	0x2003e34c

000d4264 <loop>:
  dump_byte_array(buffer, 16); Serial.println();
  return true;
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  // The core of your code will likely live here.


  rfid_tag_present_prev = rfid_tag_present;
   d4268:	4e4f      	ldr	r6, [pc, #316]	; (d43a8 <loop+0x144>)

  _rfid_error_counter += 1;
   d426a:	4a50      	ldr	r2, [pc, #320]	; (d43ac <loop+0x148>)
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.


  rfid_tag_present_prev = rfid_tag_present;
   d426c:	4d50      	ldr	r5, [pc, #320]	; (d43b0 <loop+0x14c>)
   d426e:	7833      	ldrb	r3, [r6, #0]
   d4270:	702b      	strb	r3, [r5, #0]

  _rfid_error_counter += 1;
   d4272:	6813      	ldr	r3, [r2, #0]
  // Detect Tag without looking for collisions
  byte bufferATQA[2];
  byte bufferSize = sizeof(bufferATQA);

  // Reset baud rates
  mfrc522.PCD_WriteRegister(mfrc522.TxModeReg, 0x00);
   d4274:	484f      	ldr	r0, [pc, #316]	; (d43b4 <loop+0x150>)
  // The core of your code will likely live here.


  rfid_tag_present_prev = rfid_tag_present;

  _rfid_error_counter += 1;
   d4276:	3301      	adds	r3, #1
  if(_rfid_error_counter > 2){
   d4278:	2b02      	cmp	r3, #2
  // The core of your code will likely live here.


  rfid_tag_present_prev = rfid_tag_present;

  _rfid_error_counter += 1;
   d427a:	6013      	str	r3, [r2, #0]
  if(_rfid_error_counter > 2){
    _tag_found = false;
   d427c:	bfc8      	it	gt
   d427e:	4b4e      	ldrgt	r3, [pc, #312]	; (d43b8 <loop+0x154>)
  }

  // Detect Tag without looking for collisions
  byte bufferATQA[2];
  byte bufferSize = sizeof(bufferATQA);
   d4280:	ac02      	add	r4, sp, #8
   d4282:	4617      	mov	r7, r2

  rfid_tag_present_prev = rfid_tag_present;

  _rfid_error_counter += 1;
  if(_rfid_error_counter > 2){
    _tag_found = false;
   d4284:	bfc4      	itt	gt
   d4286:	2200      	movgt	r2, #0
   d4288:	701a      	strbgt	r2, [r3, #0]
  // Detect Tag without looking for collisions
  byte bufferATQA[2];
  byte bufferSize = sizeof(bufferATQA);

  // Reset baud rates
  mfrc522.PCD_WriteRegister(mfrc522.TxModeReg, 0x00);
   d428a:	2124      	movs	r1, #36	; 0x24
    _tag_found = false;
  }

  // Detect Tag without looking for collisions
  byte bufferATQA[2];
  byte bufferSize = sizeof(bufferATQA);
   d428c:	2302      	movs	r3, #2

  // Reset baud rates
  mfrc522.PCD_WriteRegister(mfrc522.TxModeReg, 0x00);
   d428e:	2200      	movs	r2, #0
    _tag_found = false;
  }

  // Detect Tag without looking for collisions
  byte bufferATQA[2];
  byte bufferSize = sizeof(bufferATQA);
   d4290:	f804 3d06 	strb.w	r3, [r4, #-6]!

  // Reset baud rates
  mfrc522.PCD_WriteRegister(mfrc522.TxModeReg, 0x00);
   d4294:	f000 f90d 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
  mfrc522.PCD_WriteRegister(mfrc522.RxModeReg, 0x00);
   d4298:	2200      	movs	r2, #0
   d429a:	2126      	movs	r1, #38	; 0x26
   d429c:	4845      	ldr	r0, [pc, #276]	; (d43b4 <loop+0x150>)
   d429e:	f000 f908 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
  // Reset ModWidthReg
  mfrc522.PCD_WriteRegister(mfrc522.ModWidthReg, 0x26);
   d42a2:	2226      	movs	r2, #38	; 0x26
   d42a4:	2148      	movs	r1, #72	; 0x48
   d42a6:	4843      	ldr	r0, [pc, #268]	; (d43b4 <loop+0x150>)
   d42a8:	f000 f903 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>


  if(mfrc522.PICC_RequestA(bufferATQA, &bufferSize) == mfrc522.STATUS_OK){
   d42ac:	4622      	mov	r2, r4
   d42ae:	a901      	add	r1, sp, #4
   d42b0:	4840      	ldr	r0, [pc, #256]	; (d43b4 <loop+0x150>)
   d42b2:	f000 fb33 	bl	d491c <_ZN7MFRC52213PICC_RequestAEPhS0_>
   d42b6:	2801      	cmp	r0, #1
   d42b8:	4604      	mov	r4, r0
   d42ba:	d108      	bne.n	d42ce <loop+0x6a>
    if ( ! mfrc522.PICC_ReadCardSerial()) { //Since a PICC placed get Serial and continue   
   d42bc:	483d      	ldr	r0, [pc, #244]	; (d43b4 <loop+0x150>)
   d42be:	f000 fc80 	bl	d4bc2 <_ZN7MFRC52219PICC_ReadCardSerialEv>
   d42c2:	2800      	cmp	r0, #0
   d42c4:	d06d      	beq.n	d43a2 <loop+0x13e>
      return;
    }
    _rfid_error_counter = 0;
   d42c6:	2300      	movs	r3, #0
   d42c8:	603b      	str	r3, [r7, #0]
    _tag_found = true;        
   d42ca:	4b3b      	ldr	r3, [pc, #236]	; (d43b8 <loop+0x154>)
   d42cc:	701c      	strb	r4, [r3, #0]
  }
  
  rfid_tag_present = _tag_found;
   d42ce:	4b3a      	ldr	r3, [pc, #232]	; (d43b8 <loop+0x154>)
   d42d0:	781b      	ldrb	r3, [r3, #0]
   d42d2:	7033      	strb	r3, [r6, #0]
  
  // rising edge
  if (rfid_tag_present && !rfid_tag_present_prev){
   d42d4:	2b00      	cmp	r3, #0
   d42d6:	d05b      	beq.n	d4390 <loop+0x12c>
   d42d8:	782c      	ldrb	r4, [r5, #0]
   d42da:	2c00      	cmp	r4, #0
   d42dc:	d158      	bne.n	d4390 <loop+0x12c>
    Serial.println("Tag found");
   d42de:	f001 fbb5 	bl	d5a4c <_Z16_fetch_usbserialv>
   d42e2:	4936      	ldr	r1, [pc, #216]	; (d43bc <loop+0x158>)
        return;
      }
      int i_=0;
      for (int i=page; i<=page+3; i++){
        for (int j=0; j<=3; j++){
          Card[i][j]=buffer[4*i_ + j];
   d42e4:	4f36      	ldr	r7, [pc, #216]	; (d43c0 <loop+0x15c>)
  
  rfid_tag_present = _tag_found;
  
  // rising edge
  if (rfid_tag_present && !rfid_tag_present_prev){
    Serial.println("Tag found");
   d42e6:	f001 f9f2 	bl	d56ce <_ZN5Print7printlnEPKc>
    for(byte page=0; page <=15; page+=4){
      byte byteCount = sizeof(buffer);
   d42ea:	ab02      	add	r3, sp, #8
   d42ec:	2212      	movs	r2, #18
      if(mfrc522.MIFARE_Read(page,buffer,&byteCount) == !mfrc522.STATUS_OK){
   d42ee:	00a1      	lsls	r1, r4, #2
  
  // rising edge
  if (rfid_tag_present && !rfid_tag_present_prev){
    Serial.println("Tag found");
    for(byte page=0; page <=15; page+=4){
      byte byteCount = sizeof(buffer);
   d42f0:	f803 2d05 	strb.w	r2, [r3, #-5]!
      if(mfrc522.MIFARE_Read(page,buffer,&byteCount) == !mfrc522.STATUS_OK){
   d42f4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   d42f8:	4a32      	ldr	r2, [pc, #200]	; (d43c4 <loop+0x160>)
   d42fa:	482e      	ldr	r0, [pc, #184]	; (d43b4 <loop+0x150>)
   d42fc:	f000 fc8f 	bl	d4c1e <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   d4300:	b928      	cbnz	r0, d430e <loop+0xaa>
        Serial.println("MIFARE_Read() failed");
   d4302:	f001 fba3 	bl	d5a4c <_Z16_fetch_usbserialv>
   d4306:	4930      	ldr	r1, [pc, #192]	; (d43c8 <loop+0x164>)
   d4308:	f001 f9e1 	bl	d56ce <_ZN5Print7printlnEPKc>
   d430c:	e049      	b.n	d43a2 <loop+0x13e>
        return;
      }
      int i_=0;
      for (int i=page; i<=page+3; i++){
        for (int j=0; j<=3; j++){
          Card[i][j]=buffer[4*i_ + j];
   d430e:	482d      	ldr	r0, [pc, #180]	; (d43c4 <loop+0x160>)
   d4310:	0121      	lsls	r1, r4, #4
  // rising edge
  if (rfid_tag_present && !rfid_tag_present_prev){
    Serial.println("Tag found");
    for(byte page=0; page <=15; page+=4){
      byte byteCount = sizeof(buffer);
      if(mfrc522.MIFARE_Read(page,buffer,&byteCount) == !mfrc522.STATUS_OK){
   d4312:	2300      	movs	r3, #0
   d4314:	eb03 0e01 	add.w	lr, r3, r1
   d4318:	2200      	movs	r2, #0
        return;
      }
      int i_=0;
      for (int i=page; i<=page+3; i++){
        for (int j=0; j<=3; j++){
          Card[i][j]=buffer[4*i_ + j];
   d431a:	eb00 0903 	add.w	r9, r0, r3
   d431e:	f819 8002 	ldrb.w	r8, [r9, r2]
   d4322:	eb07 0c02 	add.w	ip, r7, r2
        Serial.println("MIFARE_Read() failed");
        return;
      }
      int i_=0;
      for (int i=page; i<=page+3; i++){
        for (int j=0; j<=3; j++){
   d4326:	3201      	adds	r2, #1
   d4328:	2a04      	cmp	r2, #4
          Card[i][j]=buffer[4*i_ + j];
   d432a:	f80c 800e 	strb.w	r8, [ip, lr]
   d432e:	f8df 8090 	ldr.w	r8, [pc, #144]	; d43c0 <loop+0x15c>
        Serial.println("MIFARE_Read() failed");
        return;
      }
      int i_=0;
      for (int i=page; i<=page+3; i++){
        for (int j=0; j<=3; j++){
   d4332:	d1f4      	bne.n	d431e <loop+0xba>
   d4334:	3304      	adds	r3, #4
      if(mfrc522.MIFARE_Read(page,buffer,&byteCount) == !mfrc522.STATUS_OK){
        Serial.println("MIFARE_Read() failed");
        return;
      }
      int i_=0;
      for (int i=page; i<=page+3; i++){
   d4336:	2b10      	cmp	r3, #16
   d4338:	d1ec      	bne.n	d4314 <loop+0xb0>
   d433a:	3401      	adds	r4, #1
  rfid_tag_present = _tag_found;
  
  // rising edge
  if (rfid_tag_present && !rfid_tag_present_prev){
    Serial.println("Tag found");
    for(byte page=0; page <=15; page+=4){
   d433c:	2c04      	cmp	r4, #4
   d433e:	d1d4      	bne.n	d42ea <loop+0x86>
          Card[i][j]=buffer[4*i_ + j];
        }
        i_++;
      }
    }
    mfrc522.PICC_HaltA();
   d4340:	481c      	ldr	r0, [pc, #112]	; (d43b4 <loop+0x150>)
   d4342:	f000 fc47 	bl	d4bd4 <_ZN7MFRC52210PICC_HaltAEv>
    Serial.println("--------------------------");
   d4346:	f001 fb81 	bl	d5a4c <_Z16_fetch_usbserialv>
   d434a:	4920      	ldr	r1, [pc, #128]	; (d43cc <loop+0x168>)
   d434c:	f001 f9bf 	bl	d56ce <_ZN5Print7printlnEPKc>
   d4350:	2400      	movs	r4, #0
   d4352:	2700      	movs	r7, #0
    for (int i=0; i<16; i++){
      for (int j=0; j<4; j++){
        Serial.print(Card[i][j],HEX);
   d4354:	f001 fb7a 	bl	d5a4c <_Z16_fetch_usbserialv>
   d4358:	eb08 0307 	add.w	r3, r8, r7
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d435c:	2210      	movs	r2, #16
   d435e:	5d19      	ldrb	r1, [r3, r4]
   d4360:	f001 f9bf 	bl	d56e2 <_ZN5Print11printNumberEmh>
      }
    }
    mfrc522.PICC_HaltA();
    Serial.println("--------------------------");
    for (int i=0; i<16; i++){
      for (int j=0; j<4; j++){
   d4364:	3701      	adds	r7, #1
        Serial.print(Card[i][j],HEX);
        Serial.print(" ");
   d4366:	f001 fb71 	bl	d5a4c <_Z16_fetch_usbserialv>
   d436a:	4919      	ldr	r1, [pc, #100]	; (d43d0 <loop+0x16c>)
   d436c:	f001 f99c 	bl	d56a8 <_ZN5Print5printEPKc>
      }
    }
    mfrc522.PICC_HaltA();
    Serial.println("--------------------------");
    for (int i=0; i<16; i++){
      for (int j=0; j<4; j++){
   d4370:	2f04      	cmp	r7, #4
   d4372:	d1ef      	bne.n	d4354 <loop+0xf0>
        Serial.print(Card[i][j],HEX);
        Serial.print(" ");
      }
      Serial.println();
   d4374:	f001 fb6a 	bl	d5a4c <_Z16_fetch_usbserialv>
   d4378:	3404      	adds	r4, #4
   d437a:	f001 f99c 	bl	d56b6 <_ZN5Print7printlnEv>
        i_++;
      }
    }
    mfrc522.PICC_HaltA();
    Serial.println("--------------------------");
    for (int i=0; i<16; i++){
   d437e:	2c40      	cmp	r4, #64	; 0x40
   d4380:	d1e7      	bne.n	d4352 <loop+0xee>
        Serial.print(Card[i][j],HEX);
        Serial.print(" ");
      }
      Serial.println();
    }
    Serial.println("--------------------------");
   d4382:	f001 fb63 	bl	d5a4c <_Z16_fetch_usbserialv>
   d4386:	4911      	ldr	r1, [pc, #68]	; (d43cc <loop+0x168>)
   d4388:	f001 f9a1 	bl	d56ce <_ZN5Print7printlnEPKc>
    unlock();
   d438c:	f7ff fedc 	bl	d4148 <_Z6unlockv>
  }
  
  // falling edge
  if (!rfid_tag_present && rfid_tag_present_prev){
   d4390:	7833      	ldrb	r3, [r6, #0]
   d4392:	b933      	cbnz	r3, d43a2 <loop+0x13e>
   d4394:	782b      	ldrb	r3, [r5, #0]
   d4396:	b123      	cbz	r3, d43a2 <loop+0x13e>
    Serial.println("Tag gone");
   d4398:	f001 fb58 	bl	d5a4c <_Z16_fetch_usbserialv>
   d439c:	490d      	ldr	r1, [pc, #52]	; (d43d4 <loop+0x170>)
   d439e:	f001 f996 	bl	d56ce <_ZN5Print7printlnEPKc>
  }
   d43a2:	b003      	add	sp, #12
   d43a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d43a8:	2003e3b4 	.word	0x2003e3b4
   d43ac:	2003e3b0 	.word	0x2003e3b0
   d43b0:	2003e360 	.word	0x2003e360
   d43b4:	2003e361 	.word	0x2003e361
   d43b8:	2003e3d6 	.word	0x2003e3d6
   d43bc:	000d6542 	.word	0x000d6542
   d43c0:	2003e36f 	.word	0x2003e36f
   d43c4:	2003e3c4 	.word	0x2003e3c4
   d43c8:	000d654c 	.word	0x000d654c
   d43cc:	000d6561 	.word	0x000d6561
   d43d0:	000d6661 	.word	0x000d6661
   d43d4:	000d657c 	.word	0x000d657c

000d43d8 <_GLOBAL__sub_I_SystemMode>:
   d43d8:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d43da:	4c13      	ldr	r4, [pc, #76]	; (d4428 <_GLOBAL__sub_I_SystemMode+0x50>)
SYSTEM_MODE(MANUAL);
   d43dc:	4d13      	ldr	r5, [pc, #76]	; (d442c <_GLOBAL__sub_I_SystemMode+0x54>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43de:	f000 feb3 	bl	d5148 <HAL_Pin_Map>
   d43e2:	2300      	movs	r3, #0
   d43e4:	6023      	str	r3, [r4, #0]
   d43e6:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d43e8:	71a3      	strb	r3, [r4, #6]
   d43ea:	8123      	strh	r3, [r4, #8]
   d43ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d43f0:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d43f2:	2003      	movs	r0, #3
   d43f4:	f001 f808 	bl	d5408 <set_system_mode>
   d43f8:	4620      	mov	r0, r4
#define NUMPIXELS 12
#define DELAYVAL 250
#define FADEVAL 5
#define MAXVAL 50

Adafruit_NeoPixel pixels(NUMPIXELS, LED_PIN, WS2812B);
   d43fa:	4c0d      	ldr	r4, [pc, #52]	; (d4430 <_GLOBAL__sub_I_SystemMode+0x58>)
SYSTEM_MODE(MANUAL);
   d43fc:	490d      	ldr	r1, [pc, #52]	; (d4434 <_GLOBAL__sub_I_SystemMode+0x5c>)
   d43fe:	462a      	mov	r2, r5
   d4400:	f001 fe62 	bl	d60c8 <__aeabi_atexit>
#define NUMPIXELS 12
#define DELAYVAL 250
#define FADEVAL 5
#define MAXVAL 50

Adafruit_NeoPixel pixels(NUMPIXELS, LED_PIN, WS2812B);
   d4404:	2302      	movs	r3, #2
   d4406:	2206      	movs	r2, #6
   d4408:	210c      	movs	r1, #12
   d440a:	4620      	mov	r0, r4
   d440c:	f000 fc7e 	bl	d4d0c <_ZN17Adafruit_NeoPixelC1Ethh>
   d4410:	462a      	mov	r2, r5
   d4412:	4909      	ldr	r1, [pc, #36]	; (d4438 <_GLOBAL__sub_I_SystemMode+0x60>)
   d4414:	4620      	mov	r0, r4
   d4416:	f001 fe57 	bl	d60c8 <__aeabi_atexit>

#define RST_PIN         D5         
#define SS_PIN          D4

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance
   d441a:	2205      	movs	r2, #5
   d441c:	2104      	movs	r1, #4
   d441e:	4807      	ldr	r0, [pc, #28]	; (d443c <_GLOBAL__sub_I_SystemMode+0x64>)
  
  // falling edge
  if (!rfid_tag_present && rfid_tag_present_prev){
    Serial.println("Tag gone");
  }
   d4420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
Adafruit_NeoPixel pixels(NUMPIXELS, LED_PIN, WS2812B);

#define RST_PIN         D5         
#define SS_PIN          D4

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance
   d4424:	f000 b80c 	b.w	d4440 <_ZN7MFRC522C1Ehh>
   d4428:	2003e3b8 	.word	0x2003e3b8
   d442c:	2003e33c 	.word	0x2003e33c
   d4430:	2003e34c 	.word	0x2003e34c
   d4434:	000d40af 	.word	0x000d40af
   d4438:	000d4c6d 	.word	0x000d4c6d
   d443c:	2003e361 	.word	0x2003e361

000d4440 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   d4440:	b538      	push	{r3, r4, r5, lr}
   d4442:	4604      	mov	r4, r0
   d4444:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   d4446:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   d4448:	2101      	movs	r1, #1

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   d444a:	4615      	mov	r5, r2
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
	pinMode(_chipSelectPin, OUTPUT);
   d444c:	f001 fdbe 	bl	d5fcc <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   d4450:	7b20      	ldrb	r0, [r4, #12]
   d4452:	2101      	movs	r1, #1
   d4454:	f001 fdcb 	bl	d5fee <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   d4458:	4628      	mov	r0, r5
	_chipSelectPin = chipSelectPin;
	pinMode(_chipSelectPin, OUTPUT);
	digitalWrite(_chipSelectPin, HIGH);
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
   d445a:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   d445c:	2101      	movs	r1, #1
   d445e:	f001 fdb5 	bl	d5fcc <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   d4462:	7b60      	ldrb	r0, [r4, #13]
   d4464:	2100      	movs	r1, #0
   d4466:	f001 fdc2 	bl	d5fee <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   d446a:	4620      	mov	r0, r4
   d446c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4470 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4470:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4472:	4d09      	ldr	r5, [pc, #36]	; (d4498 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4474:	6829      	ldr	r1, [r5, #0]
   d4476:	f011 0401 	ands.w	r4, r1, #1
   d447a:	d10a      	bne.n	d4492 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d447c:	4628      	mov	r0, r5
   d447e:	f7ff fe0e 	bl	d409e <__cxa_guard_acquire>
   d4482:	b130      	cbz	r0, d4492 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4484:	4621      	mov	r1, r4
   d4486:	4805      	ldr	r0, [pc, #20]	; (d449c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4488:	f001 f88e 	bl	d55a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d448c:	4628      	mov	r0, r5
   d448e:	f7ff fe0b 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }
   d4492:	4802      	ldr	r0, [pc, #8]	; (d449c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4494:	bd38      	pop	{r3, r4, r5, pc}
   d4496:	bf00      	nop
   d4498:	2003e340 	.word	0x2003e340
   d449c:	2003e344 	.word	0x2003e344

000d44a0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d44a0:	b510      	push	{r4, lr}
   d44a2:	4604      	mov	r4, r0
        return instance().transfer(data);
   d44a4:	f7ff ffe4 	bl	d4470 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d44a8:	4621      	mov	r1, r4
    }
   d44aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d44ae:	f001 b896 	b.w	d55de <_ZN8SPIClass8transferEh>

000d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
   d44b2:	b570      	push	{r4, r5, r6, lr}
   d44b4:	4604      	mov	r4, r0
   d44b6:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   d44b8:	7b00      	ldrb	r0, [r0, #12]
   d44ba:	2100      	movs	r1, #0
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
   d44bc:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   d44be:	f001 fd96 	bl	d5fee <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   d44c2:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   d44c6:	f7ff ffeb 	bl	d44a0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	SPI.transfer(value);
   d44ca:	4628      	mov	r0, r5
   d44cc:	f7ff ffe8 	bl	d44a0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   d44d0:	7b20      	ldrb	r0, [r4, #12]
   d44d2:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   d44d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
									byte value		///< The value to write.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	SPI.transfer(value);
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   d44d8:	f001 bd89 	b.w	d5fee <digitalWrite>

000d44dc <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
   d44dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44de:	460d      	mov	r5, r1
   d44e0:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   d44e2:	2100      	movs	r1, #0
   d44e4:	7b00      	ldrb	r0, [r0, #12]
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
   d44e6:	461f      	mov	r7, r3
   d44e8:	4614      	mov	r4, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   d44ea:	f001 fd80 	bl	d5fee <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   d44ee:	f005 007e 	and.w	r0, r5, #126	; 0x7e
   d44f2:	f7ff ffd5 	bl	d44a0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
   d44f6:	3c01      	subs	r4, #1
   d44f8:	1e7d      	subs	r5, r7, #1
   d44fa:	443c      	add	r4, r7
	for (byte index = 0; index < count; index++) {
   d44fc:	42a5      	cmp	r5, r4
   d44fe:	d004      	beq.n	d450a <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2e>
		SPI.transfer(values[index]);
   d4500:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   d4504:	f7ff ffcc 	bl	d44a0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
   d4508:	e7f8      	b.n	d44fc <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x20>
		SPI.transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   d450a:	7b30      	ldrb	r0, [r6, #12]
   d450c:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   d450e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
		SPI.transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   d4512:	f001 bd6c 	b.w	d5fee <digitalWrite>

000d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
   d4516:	b538      	push	{r3, r4, r5, lr}
   d4518:	4605      	mov	r5, r0
   d451a:	460c      	mov	r4, r1
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   d451c:	7b00      	ldrb	r0, [r0, #12]
   d451e:	2100      	movs	r1, #0
   d4520:	f001 fd65 	bl	d5fee <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   d4524:	f004 007e 	and.w	r0, r4, #126	; 0x7e
   d4528:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   d452c:	f7ff ffb8 	bl	d44a0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   d4530:	2000      	movs	r0, #0
   d4532:	f7ff ffb5 	bl	d44a0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   d4536:	2101      	movs	r1, #1
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   d4538:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   d453a:	7b28      	ldrb	r0, [r5, #12]
   d453c:	f001 fd57 	bl	d5fee <digitalWrite>
	return value;
} // End PCD_ReadRegister()
   d4540:	4620      	mov	r0, r4
   d4542:	bd38      	pop	{r3, r4, r5, pc}

000d4544 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
   d4544:	b570      	push	{r4, r5, r6, lr}
   d4546:	4605      	mov	r5, r0
   d4548:	460e      	mov	r6, r1
   d454a:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
   d454c:	f7ff ffe3 	bl	d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   d4550:	ea40 0204 	orr.w	r2, r0, r4
   d4554:	4631      	mov	r1, r6
   d4556:	4628      	mov	r0, r5
   d4558:	b2d2      	uxtb	r2, r2
} // End PCD_SetRegisterBitMask()
   d455a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   d455e:	f7ff bfa8 	b.w	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000d4562 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
   d4562:	b570      	push	{r4, r5, r6, lr}
   d4564:	4605      	mov	r5, r0
   d4566:	460e      	mov	r6, r1
   d4568:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
   d456a:	f7ff ffd4 	bl	d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   d456e:	ea20 0204 	bic.w	r2, r0, r4
   d4572:	4631      	mov	r1, r6
   d4574:	4628      	mov	r0, r5
   d4576:	b2d2      	uxtb	r2, r2
} // End PCD_ClearRegisterBitMask()
   d4578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   d457c:	f7ff bf99 	b.w	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000d4580 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
   d4580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4582:	4604      	mov	r4, r0
   d4584:	4615      	mov	r5, r2
   d4586:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   d4588:	2200      	movs	r2, #0
   d458a:	2102      	movs	r1, #2
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
   d458c:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   d458e:	f7ff ff90 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   d4592:	2204      	movs	r2, #4
   d4594:	210a      	movs	r1, #10
   d4596:	4620      	mov	r0, r4
   d4598:	f7ff ff8b 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   d459c:	2280      	movs	r2, #128	; 0x80
   d459e:	2114      	movs	r1, #20
   d45a0:	4620      	mov	r0, r4
   d45a2:	f7ff ffcf 	bl	d4544 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   d45a6:	462a      	mov	r2, r5
   d45a8:	463b      	mov	r3, r7
   d45aa:	2112      	movs	r1, #18
   d45ac:	4620      	mov	r0, r4
   d45ae:	f7ff ff95 	bl	d44dc <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   d45b2:	2203      	movs	r2, #3
   d45b4:	2102      	movs	r1, #2
   d45b6:	4620      	mov	r0, r4
   d45b8:	f7ff ff7b 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   d45bc:	f241 3588 	movw	r5, #5000	; 0x1388
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73�s.
	word i = 5000;
	byte n;
	while (1) {
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   d45c0:	210a      	movs	r1, #10
   d45c2:	4620      	mov	r0, r4
   d45c4:	f7ff ffa7 	bl	d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   d45c8:	0743      	lsls	r3, r0, #29
   d45ca:	d405      	bmi.n	d45d8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
   d45cc:	3d01      	subs	r5, #1
   d45ce:	b2ad      	uxth	r5, r5
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   d45d0:	2d00      	cmp	r5, #0
   d45d2:	d1f5      	bne.n	d45c0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   d45d4:	2004      	movs	r0, #4
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
	result[1] = PCD_ReadRegister(CRCResultRegH);
	return STATUS_OK;
} // End PCD_CalculateCRC()
   d45d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
			return STATUS_TIMEOUT;
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   d45d8:	2200      	movs	r2, #0
   d45da:	4620      	mov	r0, r4
   d45dc:	2102      	movs	r1, #2
   d45de:	f7ff ff68 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
   d45e2:	2144      	movs	r1, #68	; 0x44
   d45e4:	4620      	mov	r0, r4
   d45e6:	f7ff ff96 	bl	d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   d45ea:	2142      	movs	r1, #66	; 0x42
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
   d45ec:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   d45ee:	4620      	mov	r0, r4
   d45f0:	f7ff ff91 	bl	d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>
   d45f4:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   d45f6:	2001      	movs	r0, #1
   d45f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d45fa <_ZN7MFRC5229PCD_ResetEv>:
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
   d45fa:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   d45fc:	220f      	movs	r2, #15
   d45fe:	2102      	movs	r1, #2
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
   d4600:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   d4602:	f7ff ff56 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
	delay(50);
   d4606:	2032      	movs	r0, #50	; 0x32
   d4608:	f001 f89e 	bl	d5748 <delay>
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   d460c:	2102      	movs	r1, #2
   d460e:	4620      	mov	r0, r4
   d4610:	f7ff ff81 	bl	d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>
   d4614:	06c3      	lsls	r3, r0, #27
   d4616:	d4f9      	bmi.n	d460c <_ZN7MFRC5229PCD_ResetEv+0x12>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
} // End PCD_Reset()
   d4618:	bd10      	pop	{r4, pc}

000d461a <_ZN7MFRC52213PCD_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
   d461a:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   d461c:	2128      	movs	r1, #40	; 0x28

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
   d461e:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   d4620:	f7ff ff79 	bl	d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   d4624:	f000 0303 	and.w	r3, r0, #3
   d4628:	2b03      	cmp	r3, #3
   d462a:	d008      	beq.n	d463e <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   d462c:	f040 0203 	orr.w	r2, r0, #3
   d4630:	b2d2      	uxtb	r2, r2
   d4632:	4620      	mov	r0, r4
   d4634:	2128      	movs	r1, #40	; 0x28
	}
} // End PCD_AntennaOn()
   d4636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
	byte value = PCD_ReadRegister(TxControlReg);
	if ((value & 0x03) != 0x03) {
		PCD_WriteRegister(TxControlReg, value | 0x03);
   d463a:	f7ff bf3a 	b.w	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   d463e:	bd10      	pop	{r4, pc}

000d4640 <_ZN7MFRC5228PCD_InitEv>:
/////////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MFRC522 chip.
 */
void MFRC522::PCD_Init() {
   d4640:	b510      	push	{r4, lr}
   d4642:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   d4644:	7b40      	ldrb	r0, [r0, #13]
   d4646:	f001 fceb 	bl	d6020 <digitalRead>
   d464a:	b938      	cbnz	r0, d465c <_ZN7MFRC5228PCD_InitEv+0x1c>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   d464c:	7b60      	ldrb	r0, [r4, #13]
   d464e:	2101      	movs	r1, #1
   d4650:	f001 fccd 	bl	d5fee <digitalWrite>
		// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
		delay(50);
   d4654:	2032      	movs	r0, #50	; 0x32
   d4656:	f001 f877 	bl	d5748 <delay>
   d465a:	e002      	b.n	d4662 <_ZN7MFRC5228PCD_InitEv+0x22>
	}
	else { // Perform a soft reset
		PCD_Reset();
   d465c:	4620      	mov	r0, r4
   d465e:	f7ff ffcc 	bl	d45fa <_ZN7MFRC5229PCD_ResetEv>
	}
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   d4662:	4620      	mov	r0, r4
   d4664:	2280      	movs	r2, #128	; 0x80
   d4666:	2154      	movs	r1, #84	; 0x54
   d4668:	f7ff ff23 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   d466c:	4620      	mov	r0, r4
   d466e:	22a9      	movs	r2, #169	; 0xa9
   d4670:	2156      	movs	r1, #86	; 0x56
   d4672:	f7ff ff1e 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   d4676:	4620      	mov	r0, r4
   d4678:	2203      	movs	r2, #3
   d467a:	2158      	movs	r1, #88	; 0x58
   d467c:	f7ff ff19 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   d4680:	4620      	mov	r0, r4
   d4682:	22e8      	movs	r2, #232	; 0xe8
   d4684:	215a      	movs	r1, #90	; 0x5a
   d4686:	f7ff ff14 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   d468a:	4620      	mov	r0, r4
   d468c:	2240      	movs	r2, #64	; 0x40
   d468e:	212a      	movs	r1, #42	; 0x2a
   d4690:	f7ff ff0f 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   d4694:	4620      	mov	r0, r4
   d4696:	223d      	movs	r2, #61	; 0x3d
   d4698:	2122      	movs	r1, #34	; 0x22
   d469a:	f7ff ff0a 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   d469e:	4620      	mov	r0, r4
} // End PCD_Init()
   d46a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
    PCD_WriteRegister(TReloadRegL, 0xE8);
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   d46a4:	f7ff bfb9 	b.w	d461a <_ZN7MFRC52213PCD_AntennaOnEv>

000d46a8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
 */
void MFRC522::PCD_ReadRegister(	byte reg,		///< The register to read from. One of the PCD_Register enums.
								byte count,		///< The number of bytes to read
								byte *values,	///< Byte array to store the values in.
								byte rxAlign	///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
   d46a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46ac:	4680      	mov	r8, r0
   d46ae:	461f      	mov	r7, r3
   d46b0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	if (count == 0) {
   d46b4:	4615      	mov	r5, r2
   d46b6:	2a00      	cmp	r2, #0
   d46b8:	d03f      	beq.n	d473a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x92>
		return;
	}
	//Serial.print("Reading "); 	Serial.print(count); Serial.println(" bytes from register.");
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   d46ba:	f001 017e 	and.w	r1, r1, #126	; 0x7e
   d46be:	f041 0680 	orr.w	r6, r1, #128	; 0x80
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   d46c2:	7b00      	ldrb	r0, [r0, #12]
   d46c4:	2100      	movs	r1, #0
   d46c6:	f001 fc92 	bl	d5fee <digitalWrite>
	count--;								// One read is performed outside of the loop
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   d46ca:	4630      	mov	r0, r6
   d46cc:	f7ff fee8 	bl	d44a0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	}
	//Serial.print("Reading "); 	Serial.print(count); Serial.println(" bytes from register.");
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	count--;								// One read is performed outside of the loop
   d46d0:	3d01      	subs	r5, #1
   d46d2:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   d46d4:	f04f 0b00 	mov.w	fp, #0
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
				mask |= (1 << i);
   d46d8:	f04f 0a01 	mov.w	sl, #1
   d46dc:	fa5f f48b 	uxtb.w	r4, fp
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	count--;								// One read is performed outside of the loop
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
   d46e0:	42a5      	cmp	r5, r4
   d46e2:	d91f      	bls.n	d4724 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x7c>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   d46e4:	b9b4      	cbnz	r4, d4714 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x6c>
   d46e6:	f1b9 0f00 	cmp.w	r9, #0
   d46ea:	d013      	beq.n	d4714 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x6c>
   d46ec:	464b      	mov	r3, r9
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
   d46ee:	2b07      	cmp	r3, #7
   d46f0:	d806      	bhi.n	d4700 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x58>
				mask |= (1 << i);
   d46f2:	fa0a f003 	lsl.w	r0, sl, r3
   d46f6:	4304      	orrs	r4, r0
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
   d46f8:	3301      	adds	r3, #1
				mask |= (1 << i);
   d46fa:	b2e4      	uxtb	r4, r4
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
   d46fc:	b2db      	uxtb	r3, r3
   d46fe:	e7f6      	b.n	d46ee <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
				mask |= (1 << i);
			}
			// Read value and tell that we want to read the same address again.
			byte value = SPI.transfer(address);	
   d4700:	4630      	mov	r0, r6
   d4702:	f7ff fecd 	bl	d44a0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
			// Apply mask to both current value of values[0] and the new data in value.
			values[0] = (values[index] & ~mask) | (value & mask);
   d4706:	783b      	ldrb	r3, [r7, #0]
   d4708:	4020      	ands	r0, r4
   d470a:	ea23 0304 	bic.w	r3, r3, r4
   d470e:	4318      	orrs	r0, r3
   d4710:	7038      	strb	r0, [r7, #0]
   d4712:	e004      	b.n	d471e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
		}
		else { // Normal case
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   d4714:	4630      	mov	r0, r6
   d4716:	f7ff fec3 	bl	d44a0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
   d471a:	f807 000b 	strb.w	r0, [r7, fp]
   d471e:	f10b 0b01 	add.w	fp, fp, #1
   d4722:	e7db      	b.n	d46dc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
		}
		index++;
	}
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   d4724:	2000      	movs	r0, #0
   d4726:	f7ff febb 	bl	d44a0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
   d472a:	5578      	strb	r0, [r7, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   d472c:	2101      	movs	r1, #1
   d472e:	f898 000c 	ldrb.w	r0, [r8, #12]
} // End PCD_ReadRegister()
   d4732:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
		}
		index++;
	}
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   d4736:	f001 bc5a 	b.w	d5fee <digitalWrite>
   d473a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d473e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
										byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
										byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
										byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
										byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
										bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
   d473e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4742:	b087      	sub	sp, #28
   d4744:	4604      	mov	r4, r0
   d4746:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   d474a:	9202      	str	r2, [sp, #8]
   d474c:	468b      	mov	fp, r1
   d474e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   d4750:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d4752:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
   d4756:	f1b8 0f00 	cmp.w	r8, #0
   d475a:	d002      	beq.n	d4762 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24>
   d475c:	f898 6000 	ldrb.w	r6, [r8]
   d4760:	e000      	b.n	d4764 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x26>
   d4762:	4646      	mov	r6, r8
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   d4764:	2200      	movs	r2, #0
   d4766:	2102      	movs	r1, #2
   d4768:	4620      	mov	r0, r4
   d476a:	9303      	str	r3, [sp, #12]
   d476c:	f7ff fea1 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   d4770:	227f      	movs	r2, #127	; 0x7f
   d4772:	2108      	movs	r1, #8
   d4774:	4620      	mov	r0, r4
   d4776:	f7ff fe9c 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   d477a:	eb06 160a 	add.w	r6, r6, sl, lsl #4
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   d477e:	2280      	movs	r2, #128	; 0x80
   d4780:	2114      	movs	r1, #20
   d4782:	4620      	mov	r0, r4
   d4784:	f7ff fede 	bl	d4544 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   d4788:	b2f6      	uxtb	r6, r6
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   d478a:	9b03      	ldr	r3, [sp, #12]
   d478c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d4790:	2112      	movs	r1, #18
   d4792:	4620      	mov	r0, r4
   d4794:	f7ff fea2 	bl	d44dc <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   d4798:	4632      	mov	r2, r6
   d479a:	211a      	movs	r1, #26
   d479c:	4620      	mov	r0, r4
   d479e:	f7ff fe88 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   d47a2:	465a      	mov	r2, fp
   d47a4:	2102      	movs	r1, #2
   d47a6:	4620      	mov	r0, r4
   d47a8:	f7ff fe83 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   d47ac:	f1bb 0f0c 	cmp.w	fp, #12
   d47b0:	d104      	bne.n	d47bc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x7e>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   d47b2:	2280      	movs	r2, #128	; 0x80
   d47b4:	211a      	movs	r1, #26
   d47b6:	4620      	mov	r0, r4
   d47b8:	f7ff fec4 	bl	d4544 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
									 ) {
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
   d47bc:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86�s.
	i = 2000;
	while (1) {
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   d47c0:	2108      	movs	r1, #8
   d47c2:	4620      	mov	r0, r4
   d47c4:	f7ff fea7 	bl	d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   d47c8:	9b02      	ldr	r3, [sp, #8]
   d47ca:	4218      	tst	r0, r3
   d47cc:	d104      	bne.n	d47d8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9a>
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   d47ce:	07c2      	lsls	r2, r0, #31
   d47d0:	d452      	bmi.n	d4878 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13a>
			return STATUS_TIMEOUT;
		}
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   d47d2:	3e01      	subs	r6, #1
   d47d4:	d1f4      	bne.n	d47c0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x82>
   d47d6:	e04f      	b.n	d4878 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13a>
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   d47d8:	210c      	movs	r1, #12
   d47da:	4620      	mov	r0, r4
   d47dc:	f7ff fe9b 	bl	d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   d47e0:	f010 0f13 	tst.w	r0, #19
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   d47e4:	4606      	mov	r6, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   d47e6:	d149      	bne.n	d487c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13e>
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
   d47e8:	b1df      	cbz	r7, d4822 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
   d47ea:	b1d5      	cbz	r5, d4822 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   d47ec:	2114      	movs	r1, #20
   d47ee:	4620      	mov	r0, r4
   d47f0:	f7ff fe91 	bl	d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   d47f4:	782b      	ldrb	r3, [r5, #0]
   d47f6:	4283      	cmp	r3, r0
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   d47f8:	4602      	mov	r2, r0
		if (n > *backLen) {
   d47fa:	d341      	bcc.n	d4880 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x142>
			return STATUS_NO_ROOM;
		}
		*backLen = n;												// Number of bytes returned
   d47fc:	7028      	strb	r0, [r5, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   d47fe:	463b      	mov	r3, r7
   d4800:	2112      	movs	r1, #18
   d4802:	4620      	mov	r0, r4
   d4804:	f8cd a000 	str.w	sl, [sp]
   d4808:	f7ff ff4e 	bl	d46a8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   d480c:	2118      	movs	r1, #24
   d480e:	4620      	mov	r0, r4
   d4810:	f7ff fe81 	bl	d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>
   d4814:	f000 0907 	and.w	r9, r0, #7
		if (validBits) {
   d4818:	f1b8 0f00 	cmp.w	r8, #0
   d481c:	d001      	beq.n	d4822 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
			*validBits = _validBits;
   d481e:	f888 9000 	strb.w	r9, [r8]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
   d4822:	0733      	lsls	r3, r6, #28
   d4824:	d42e      	bmi.n	d4884 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
		return STATUS_COLLISION;
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
   d4826:	b37f      	cbz	r7, d4888 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
   d4828:	b375      	cbz	r5, d4888 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
   d482a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d482e:	b35b      	cbz	r3, d4888 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
   d4830:	782a      	ldrb	r2, [r5, #0]
   d4832:	2a01      	cmp	r2, #1
   d4834:	d104      	bne.n	d4840 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x102>
   d4836:	f1b9 0f04 	cmp.w	r9, #4
   d483a:	d127      	bne.n	d488c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
			return STATUS_MIFARE_NACK;
   d483c:	2009      	movs	r0, #9
   d483e:	e026      	b.n	d488e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
   d4840:	d924      	bls.n	d488c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
   d4842:	f1b9 0f00 	cmp.w	r9, #0
   d4846:	d121      	bne.n	d488c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
			return STATUS_CRC_WRONG;
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		byte controlBuffer[2]; 
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   d4848:	3a02      	subs	r2, #2
   d484a:	ab05      	add	r3, sp, #20
   d484c:	b2d2      	uxtb	r2, r2
   d484e:	4639      	mov	r1, r7
   d4850:	4620      	mov	r0, r4
   d4852:	f7ff fe95 	bl	d4580 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   d4856:	2801      	cmp	r0, #1
   d4858:	d119      	bne.n	d488e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
			return n;
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   d485a:	782b      	ldrb	r3, [r5, #0]
   d485c:	441f      	add	r7, r3
   d485e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d4862:	f817 2c02 	ldrb.w	r2, [r7, #-2]
   d4866:	429a      	cmp	r2, r3
   d4868:	d110      	bne.n	d488c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
   d486a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   d486e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d4872:	429a      	cmp	r2, r3
   d4874:	d10a      	bne.n	d488c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
   d4876:	e00a      	b.n	d488e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
			return STATUS_TIMEOUT;
   d4878:	2004      	movs	r0, #4
   d487a:	e008      	b.n	d488e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
		return STATUS_ERROR;
   d487c:	2002      	movs	r0, #2
   d487e:	e006      	b.n	d488e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
		if (n > *backLen) {
			return STATUS_NO_ROOM;
   d4880:	2005      	movs	r0, #5
   d4882:	e004      	b.n	d488e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
		return STATUS_COLLISION;
   d4884:	2003      	movs	r0, #3
   d4886:	e002      	b.n	d488e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
   d4888:	2001      	movs	r0, #1
   d488a:	e000      	b.n	d488e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		if (*backLen == 1 && _validBits == 4) {
			return STATUS_MIFARE_NACK;
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
			return STATUS_CRC_WRONG;
   d488c:	2008      	movs	r0, #8
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
} // End PCD_CommunicateWithPICC()
   d488e:	b007      	add	sp, #28
   d4890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4894 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
									byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
									byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
									byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits. Default NULL.
									byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
									bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
								 ) {
   d4894:	b510      	push	{r4, lr}
   d4896:	b086      	sub	sp, #24
	byte waitIRq = 0x30;		// RxIRq and IdleIRq
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   d4898:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d489c:	9405      	str	r4, [sp, #20]
   d489e:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   d48a2:	9404      	str	r4, [sp, #16]
   d48a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   d48a6:	9403      	str	r4, [sp, #12]
   d48a8:	9c08      	ldr	r4, [sp, #32]
   d48aa:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
   d48ae:	460b      	mov	r3, r1
   d48b0:	2230      	movs	r2, #48	; 0x30
   d48b2:	210c      	movs	r1, #12
   d48b4:	f7ff ff43 	bl	d473e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   d48b8:	b006      	add	sp, #24
   d48ba:	bd10      	pop	{r4, pc}

000d48bc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
									byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
									byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							   ) {
   d48bc:	b570      	push	{r4, r5, r6, lr}
   d48be:	b088      	sub	sp, #32
   d48c0:	4606      	mov	r6, r0
   d48c2:	461c      	mov	r4, r3
   d48c4:	f88d 1017 	strb.w	r1, [sp, #23]
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   d48c8:	4615      	mov	r5, r2
   d48ca:	b312      	cbz	r2, d4912 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
   d48cc:	781b      	ldrb	r3, [r3, #0]
   d48ce:	2b01      	cmp	r3, #1
   d48d0:	d91f      	bls.n	d4912 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   d48d2:	2280      	movs	r2, #128	; 0x80
   d48d4:	211c      	movs	r1, #28
   d48d6:	f7ff fe44 	bl	d4562 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   d48da:	2307      	movs	r3, #7
   d48dc:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   d48e0:	2300      	movs	r3, #0
   d48e2:	9303      	str	r3, [sp, #12]
   d48e4:	9302      	str	r3, [sp, #8]
   d48e6:	f10d 031f 	add.w	r3, sp, #31
   d48ea:	9301      	str	r3, [sp, #4]
   d48ec:	9400      	str	r4, [sp, #0]
   d48ee:	462b      	mov	r3, r5
   d48f0:	2201      	movs	r2, #1
   d48f2:	f10d 0117 	add.w	r1, sp, #23
   d48f6:	4630      	mov	r0, r6
   d48f8:	f7ff ffcc 	bl	d4894 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   d48fc:	2801      	cmp	r0, #1
   d48fe:	d10b      	bne.n	d4918 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   d4900:	7820      	ldrb	r0, [r4, #0]
   d4902:	2802      	cmp	r0, #2
   d4904:	d107      	bne.n	d4916 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5a>
   d4906:	f89d 301f 	ldrb.w	r3, [sp, #31]
   d490a:	2b00      	cmp	r3, #0
		return STATUS_ERROR;
	}
	return STATUS_OK;
   d490c:	bf08      	it	eq
   d490e:	2001      	moveq	r0, #1
   d4910:	e002      	b.n	d4918 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
							   ) {
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
		return STATUS_NO_ROOM;
   d4912:	2005      	movs	r0, #5
   d4914:	e000      	b.n	d4918 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
	if (status != STATUS_OK) {
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
		return STATUS_ERROR;
   d4916:	2002      	movs	r0, #2
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
   d4918:	b008      	add	sp, #32
   d491a:	bd70      	pop	{r4, r5, r6, pc}

000d491c <_ZN7MFRC52213PICC_RequestAEPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_RequestA(byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
							byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							) {
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   d491c:	4613      	mov	r3, r2
   d491e:	460a      	mov	r2, r1
   d4920:	2126      	movs	r1, #38	; 0x26
   d4922:	f7ff bfcb 	b.w	d48bc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000d4926 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
   d4926:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
   d492a:	2a50      	cmp	r2, #80	; 0x50
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
   d492c:	b08b      	sub	sp, #44	; 0x2c
   d492e:	4683      	mov	fp, r0
   d4930:	468a      	mov	sl, r1
   d4932:	4617      	mov	r7, r2
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
   d4934:	f200 80f5 	bhi.w	d4b22 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fc>
		return STATUS_INVALID;
	}

	// Prepare MFRC522
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   d4938:	2280      	movs	r2, #128	; 0x80
   d493a:	211c      	movs	r1, #28
   d493c:	f7ff fe11 	bl	d4562 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
	bool uidComplete;
	bool selectDone;
	bool useCascadeTag;
	byte cascadeLevel	= 1; 
   d4940:	2501      	movs	r5, #1

	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
   d4942:	2d02      	cmp	r5, #2
   d4944:	d010      	beq.n	d4968 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x42>
   d4946:	2d03      	cmp	r5, #3
   d4948:	d01b      	beq.n	d4982 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x5c>
   d494a:	2d01      	cmp	r5, #1
   d494c:	f040 80eb 	bne.w	d4b26 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
   d4950:	2393      	movs	r3, #147	; 0x93
   d4952:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 0;
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   d4956:	b1d7      	cbz	r7, d498e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
   d4958:	f89a 3000 	ldrb.w	r3, [sl]
   d495c:	2b04      	cmp	r3, #4
   d495e:	bf94      	ite	ls
   d4960:	2300      	movls	r3, #0
   d4962:	2301      	movhi	r3, #1
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
				uidIndex = 0;
   d4964:	2600      	movs	r6, #0
   d4966:	e016      	b.n	d4996 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
   d4968:	f06f 036a 	mvn.w	r3, #106	; 0x6a
   d496c:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 3;
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   d4970:	b17f      	cbz	r7, d4992 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6c>
   d4972:	f89a 3000 	ldrb.w	r3, [sl]
   d4976:	2b07      	cmp	r3, #7
   d4978:	bf94      	ite	ls
   d497a:	2300      	movls	r3, #0
   d497c:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
				uidIndex = 3;
   d497e:	2603      	movs	r6, #3
   d4980:	e009      	b.n	d4996 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
				break;
			
			case 3:
				buffer[0] = PICC_CMD_SEL_CL3;
   d4982:	2397      	movs	r3, #151	; 0x97
   d4984:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   d4988:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   d498a:	2300      	movs	r3, #0
				break;
   d498c:	e003      	b.n	d4996 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
				uidIndex = 0;
   d498e:	463e      	mov	r6, r7
   d4990:	e000      	b.n	d4994 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6e>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
				uidIndex = 3;
   d4992:	2603      	movs	r6, #3
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   d4994:	463b      	mov	r3, r7
				return STATUS_INTERNAL_ERROR;
				break;
		}
		
		// How many UID bits are known in this Cascade Level?
		currentLevelKnownBits = validBits - (8 * uidIndex);
   d4996:	eba7 04c6 	sub.w	r4, r7, r6, lsl #3
   d499a:	b264      	sxtb	r4, r4
   d499c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (currentLevelKnownBits < 0) {
			currentLevelKnownBits = 0;
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
		if (useCascadeTag) {
   d49a0:	b12b      	cbz	r3, d49ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x88>
			buffer[index++] = PICC_CMD_CT;
   d49a2:	2288      	movs	r2, #136	; 0x88
   d49a4:	f88d 201e 	strb.w	r2, [sp, #30]
   d49a8:	f04f 0803 	mov.w	r8, #3
   d49ac:	e001      	b.n	d49b2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8c>
		currentLevelKnownBits = validBits - (8 * uidIndex);
		if (currentLevelKnownBits < 0) {
			currentLevelKnownBits = 0;
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
   d49ae:	f04f 0802 	mov.w	r8, #2
		if (useCascadeTag) {
			buffer[index++] = PICC_CMD_CT;
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   d49b2:	b2e1      	uxtb	r1, r4
   d49b4:	f011 0207 	ands.w	r2, r1, #7
   d49b8:	bf18      	it	ne
   d49ba:	2201      	movne	r2, #1
   d49bc:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   d49c0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   d49c4:	d106      	bne.n	d49d4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xae>
			for (count = 0; count < bytesToCopy; count++) {
				buffer[index++] = uid->uidByte[uidIndex + count];
			}
		}
		// Now that the data has been copied we need to include the 8 bits in CT in currentLevelKnownBits
		if (useCascadeTag) {
   d49c6:	2b00      	cmp	r3, #0
   d49c8:	f000 808b 	beq.w	d4ae2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1bc>
			currentLevelKnownBits += 8;
   d49cc:	f101 0408 	add.w	r4, r1, #8
   d49d0:	b264      	sxtb	r4, r4
   d49d2:	e086      	b.n	d4ae2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1bc>
		if (useCascadeTag) {
			buffer[index++] = PICC_CMD_CT;
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   d49d4:	2b00      	cmp	r3, #0
   d49d6:	bf14      	ite	ne
   d49d8:	2003      	movne	r0, #3
   d49da:	2004      	moveq	r0, #4
   d49dc:	4282      	cmp	r2, r0
   d49de:	bf28      	it	cs
   d49e0:	4602      	movcs	r2, r0
   d49e2:	2000      	movs	r0, #0
			if (bytesToCopy > maxBytes) { 
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
				buffer[index++] = uid->uidByte[uidIndex + count];
   d49e4:	eb08 0e00 	add.w	lr, r8, r0
   d49e8:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   d49ec:	fa5c fe8e 	uxtab	lr, ip, lr
   d49f0:	eb06 0c00 	add.w	ip, r6, r0
   d49f4:	44d4      	add	ip, sl
   d49f6:	3001      	adds	r0, #1
   d49f8:	f89c c001 	ldrb.w	ip, [ip, #1]
   d49fc:	f80e cc0c 	strb.w	ip, [lr, #-12]
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
			if (bytesToCopy > maxBytes) { 
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
   d4a00:	fa5f fe80 	uxtb.w	lr, r0
   d4a04:	4596      	cmp	lr, r2
   d4a06:	d3ed      	bcc.n	d49e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
   d4a08:	e7dd      	b.n	d49c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
				currentLevelKnownBits = collisionPos;
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
				buffer[index]	|= (1 << count); 
			}
			else if (result != STATUS_OK) {
   d4a0a:	2801      	cmp	r0, #1
   d4a0c:	f040 808d 	bne.w	d4b2a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x204>
				return result;
			}
			else { // STATUS_OK
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   d4a10:	2c1f      	cmp	r4, #31
   d4a12:	f300 808c 	bgt.w	d4b2e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
					selectDone = true; // No more anticollision 
					// We continue below outside the while.
				}
				else { // This was an ANTICOLLISION.
					// We now have all 32 bits of the UID in this Cascade Level
					currentLevelKnownBits = 32;
   d4a16:	2420      	movs	r4, #32
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   d4a18:	f04f 0370 	mov.w	r3, #112	; 0x70
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   d4a1c:	f89d 201e 	ldrb.w	r2, [sp, #30]
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   d4a20:	f88d 301d 	strb.w	r3, [sp, #29]
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   d4a24:	f89d 301f 	ldrb.w	r3, [sp, #31]
   d4a28:	4053      	eors	r3, r2
   d4a2a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   d4a2e:	405a      	eors	r2, r3
   d4a30:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d4a34:	4053      	eors	r3, r2
   d4a36:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   d4a3a:	2207      	movs	r2, #7
   d4a3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   d4a40:	a907      	add	r1, sp, #28
   d4a42:	4658      	mov	r0, fp
   d4a44:	f7ff fd9c 	bl	d4580 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   d4a48:	2801      	cmp	r0, #1
   d4a4a:	f040 80b7 	bne.w	d4bbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
   d4a4e:	f04f 0300 	mov.w	r3, #0
   d4a52:	f88d 301a 	strb.w	r3, [sp, #26]
				bufferUsed		= 9;
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
				responseLength	= 3;
   d4a56:	2303      	movs	r3, #3
   d4a58:	f88d 301b 	strb.w	r3, [sp, #27]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
				if (result != STATUS_OK) {
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
				bufferUsed		= 9;
   d4a5c:	2309      	movs	r3, #9
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
   d4a5e:	f10d 0922 	add.w	r9, sp, #34	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
				if (result != STATUS_OK) {
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
				bufferUsed		= 9;
   d4a62:	9304      	str	r3, [sp, #16]
				responseBuffer	= &buffer[index];
				responseLength	= sizeof(buffer) - index;
			}

			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   d4a64:	f10d 0828 	add.w	r8, sp, #40	; 0x28
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   d4a68:	211a      	movs	r1, #26
				responseBuffer	= &buffer[index];
				responseLength	= sizeof(buffer) - index;
			}

			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   d4a6a:	f818 3d0e 	ldrb.w	r3, [r8, #-14]!
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   d4a6e:	9305      	str	r3, [sp, #20]
   d4a70:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   d4a74:	b2d2      	uxtb	r2, r2
   d4a76:	4658      	mov	r0, fp
   d4a78:	f7ff fd1b 	bl	d44b2 <_ZN7MFRC52217PCD_WriteRegisterEhh>

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   d4a7c:	2300      	movs	r3, #0
   d4a7e:	9303      	str	r3, [sp, #12]
   d4a80:	9b05      	ldr	r3, [sp, #20]
   d4a82:	9302      	str	r3, [sp, #8]
   d4a84:	f10d 031b 	add.w	r3, sp, #27
   d4a88:	f8cd 8004 	str.w	r8, [sp, #4]
   d4a8c:	9300      	str	r3, [sp, #0]
   d4a8e:	9a04      	ldr	r2, [sp, #16]
   d4a90:	464b      	mov	r3, r9
   d4a92:	a907      	add	r1, sp, #28
   d4a94:	4658      	mov	r0, fp
   d4a96:	f7ff fefd 	bl	d4894 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   d4a9a:	2803      	cmp	r0, #3
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   d4a9c:	4680      	mov	r8, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   d4a9e:	d1b4      	bne.n	d4a0a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   d4aa0:	211c      	movs	r1, #28
   d4aa2:	4658      	mov	r0, fp
   d4aa4:	f7ff fd37 	bl	d4516 <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   d4aa8:	0681      	lsls	r1, r0, #26
   d4aaa:	d43e      	bmi.n	d4b2a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x204>
					return STATUS_COLLISION; // Without a valid collision position we cannot continue
				}
				byte collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
				if (collisionPos == 0) {
					collisionPos = 32;
   d4aac:	f010 001f 	ands.w	r0, r0, #31
   d4ab0:	bf08      	it	eq
   d4ab2:	2020      	moveq	r0, #32
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   d4ab4:	42a0      	cmp	r0, r4
   d4ab6:	dd36      	ble.n	d4b26 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
					return STATUS_INTERNAL_ERROR;
				}
				// Choose the PICC with the bit set.
				currentLevelKnownBits = collisionPos;
   d4ab8:	b244      	sxtb	r4, r0
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   d4aba:	3801      	subs	r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
				buffer[index]	|= (1 << count); 
   d4abc:	f000 0307 	and.w	r3, r0, #7
   d4ac0:	f010 0007 	ands.w	r0, r0, #7
   d4ac4:	bf18      	it	ne
   d4ac6:	2001      	movne	r0, #1
   d4ac8:	eb00 00e4 	add.w	r0, r0, r4, asr #3
   d4acc:	aa0a      	add	r2, sp, #40	; 0x28
   d4ace:	3001      	adds	r0, #1
   d4ad0:	4410      	add	r0, r2
   d4ad2:	2201      	movs	r2, #1
   d4ad4:	fa02 f303 	lsl.w	r3, r2, r3
   d4ad8:	f810 2c0c 	ldrb.w	r2, [r0, #-12]
   d4adc:	4313      	orrs	r3, r2
   d4ade:	f800 3c0c 	strb.w	r3, [r0, #-12]
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   d4ae2:	2c1f      	cmp	r4, #31
   d4ae4:	dc98      	bgt.n	d4a18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf2>
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   d4ae6:	10e3      	asrs	r3, r4, #3
				responseBuffer	= &buffer[6];
				responseLength	= 3;
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
   d4ae8:	f004 0807 	and.w	r8, r4, #7
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   d4aec:	3302      	adds	r3, #2
   d4aee:	b2db      	uxtb	r3, r3
				responseBuffer	= &buffer[6];
				responseLength	= 3;
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
   d4af0:	fa5f f288 	uxtb.w	r2, r8
   d4af4:	f88d 201a 	strb.w	r2, [sp, #26]
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
				bufferUsed		= index + (txLastBits ? 1 : 0);
   d4af8:	f1b8 0f00 	cmp.w	r8, #0
   d4afc:	bf0c      	ite	eq
   d4afe:	4698      	moveq	r8, r3
   d4b00:	f103 0801 	addne.w	r8, r3, #1
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   d4b04:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   d4b08:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   d4b0c:	fa5f f288 	uxtb.w	r2, r8
   d4b10:	9204      	str	r2, [sp, #16]
				// Store response in the unused part of buffer
				responseBuffer	= &buffer[index];
   d4b12:	aa07      	add	r2, sp, #28
   d4b14:	eb02 0903 	add.w	r9, r2, r3
				responseLength	= sizeof(buffer) - index;
   d4b18:	f1c3 0309 	rsb	r3, r3, #9
   d4b1c:	f88d 301b 	strb.w	r3, [sp, #27]
   d4b20:	e7a0      	b.n	d4a64 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13e>
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
		return STATUS_INVALID;
   d4b22:	2007      	movs	r0, #7
   d4b24:	e04a      	b.n	d4bbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
				byte collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
				if (collisionPos == 0) {
					collisionPos = 32;
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
					return STATUS_INTERNAL_ERROR;
   d4b26:	2006      	movs	r0, #6
   d4b28:	e048      	b.n	d4bbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   d4b2a:	4640      	mov	r0, r8
   d4b2c:	e046      	b.n	d4bbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
		} // End of while ( ! selectDone)

		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   d4b2e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d4b32:	2b88      	cmp	r3, #136	; 0x88
   d4b34:	d03f      	beq.n	d4bb6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x290>
   d4b36:	2202      	movs	r2, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   d4b38:	2404      	movs	r4, #4
   d4b3a:	2300      	movs	r3, #0
		for (count = 0; count < bytesToCopy; count++) {
			uid->uidByte[uidIndex + count] = buffer[index++];
   d4b3c:	18d0      	adds	r0, r2, r3
   d4b3e:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   d4b42:	18f1      	adds	r1, r6, r3
   d4b44:	fa5e f080 	uxtab	r0, lr, r0
   d4b48:	4451      	add	r1, sl
   d4b4a:	f810 0c0c 	ldrb.w	r0, [r0, #-12]
   d4b4e:	7048      	strb	r0, [r1, #1]
   d4b50:	3301      	adds	r3, #1
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
		for (count = 0; count < bytesToCopy; count++) {
   d4b52:	b2d9      	uxtb	r1, r3
   d4b54:	428c      	cmp	r4, r1
   d4b56:	d8f1      	bhi.n	d4b3c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x216>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   d4b58:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d4b5c:	2b03      	cmp	r3, #3
   d4b5e:	d126      	bne.n	d4bae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x288>
   d4b60:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d4b64:	bb1b      	cbnz	r3, d4bae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x288>
			return STATUS_ERROR;
		}
		// Verify CRC_A - do our own calculation and store the control in buffer[2..3] - those bytes are not needed anymore.
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   d4b66:	f10d 031e 	add.w	r3, sp, #30
   d4b6a:	2201      	movs	r2, #1
   d4b6c:	4649      	mov	r1, r9
   d4b6e:	4658      	mov	r0, fp
   d4b70:	f7ff fd06 	bl	d4580 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   d4b74:	2801      	cmp	r0, #1
   d4b76:	d121      	bne.n	d4bbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
			return result;
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   d4b78:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d4b7c:	f899 3001 	ldrb.w	r3, [r9, #1]
   d4b80:	429a      	cmp	r2, r3
   d4b82:	d116      	bne.n	d4bb2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28c>
   d4b84:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d4b88:	f899 3002 	ldrb.w	r3, [r9, #2]
   d4b8c:	429a      	cmp	r2, r3
   d4b8e:	d110      	bne.n	d4bb2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28c>
			return STATUS_CRC_WRONG;
		}
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   d4b90:	f899 3000 	ldrb.w	r3, [r9]
   d4b94:	075a      	lsls	r2, r3, #29
   d4b96:	d502      	bpl.n	d4b9e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x278>
			cascadeLevel++;
   d4b98:	3501      	adds	r5, #1
   d4b9a:	b2ed      	uxtb	r5, r5
   d4b9c:	e6d1      	b.n	d4942 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1c>
			uid->sak = responseBuffer[0];
		}
	} // End of while ( ! uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
   d4b9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   d4ba2:	3501      	adds	r5, #1
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
			cascadeLevel++;
		}
		else {
			uidComplete = true;
			uid->sak = responseBuffer[0];
   d4ba4:	f88a 300b 	strb.w	r3, [sl, #11]
		}
	} // End of while ( ! uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
   d4ba8:	f88a 5000 	strb.w	r5, [sl]

	return STATUS_OK;
   d4bac:	e006      	b.n	d4bbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
			return STATUS_ERROR;
   d4bae:	2002      	movs	r0, #2
   d4bb0:	e004      	b.n	d4bbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
		if (result != STATUS_OK) {
			return result;
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
			return STATUS_CRC_WRONG;
   d4bb2:	2008      	movs	r0, #8
   d4bb4:	e002      	b.n	d4bbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x296>
		} // End of while ( ! selectDone)

		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   d4bb6:	2203      	movs	r2, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   d4bb8:	4614      	mov	r4, r2
   d4bba:	e7be      	b.n	d4b3a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x214>
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;

	return STATUS_OK;
} // End PICC_Select()
   d4bbc:	b00b      	add	sp, #44	; 0x2c
   d4bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4bc2 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   d4bc2:	b508      	push	{r3, lr}
	byte result = PICC_Select(&uid);
   d4bc4:	2200      	movs	r2, #0
   d4bc6:	4601      	mov	r1, r0
   d4bc8:	f7ff fead 	bl	d4926 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   d4bcc:	1e43      	subs	r3, r0, #1
   d4bce:	4258      	negs	r0, r3
   d4bd0:	4158      	adcs	r0, r3
   d4bd2:	bd08      	pop	{r3, pc}

000d4bd4 <_ZN7MFRC52210PICC_HaltAEv>:
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_HaltA() {
   d4bd4:	b570      	push	{r4, r5, r6, lr}
   d4bd6:	b086      	sub	sp, #24
	byte result;
	byte buffer[4]; 

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
   d4bd8:	2350      	movs	r3, #80	; 0x50
   d4bda:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   d4bde:	2500      	movs	r5, #0
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   d4be0:	f10d 0316 	add.w	r3, sp, #22
   d4be4:	2202      	movs	r2, #2
   d4be6:	a905      	add	r1, sp, #20
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_HaltA() {
   d4be8:	4606      	mov	r6, r0
	byte result;
	byte buffer[4]; 

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
	buffer[1] = 0;
   d4bea:	f88d 5015 	strb.w	r5, [sp, #21]
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   d4bee:	f7ff fcc7 	bl	d4580 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   d4bf2:	2801      	cmp	r0, #1

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
	buffer[1] = 0;
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   d4bf4:	4604      	mov	r4, r0
	if (result != STATUS_OK) {
   d4bf6:	d10f      	bne.n	d4c18 <_ZN7MFRC52210PICC_HaltAEv+0x44>
	// Send the command.
	// The standard says:
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is an success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   d4bf8:	9503      	str	r5, [sp, #12]
   d4bfa:	9502      	str	r5, [sp, #8]
   d4bfc:	9501      	str	r5, [sp, #4]
   d4bfe:	9500      	str	r5, [sp, #0]
   d4c00:	462b      	mov	r3, r5
   d4c02:	2204      	movs	r2, #4
   d4c04:	a905      	add	r1, sp, #20
   d4c06:	4630      	mov	r0, r6
   d4c08:	f7ff fe44 	bl	d4894 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   d4c0c:	2804      	cmp	r0, #4
   d4c0e:	d003      	beq.n	d4c18 <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_OK;
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
   d4c10:	2801      	cmp	r0, #1
   d4c12:	bf08      	it	eq
   d4c14:	2002      	moveq	r0, #2
   d4c16:	e000      	b.n	d4c1a <_ZN7MFRC52210PICC_HaltAEv+0x46>
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is an success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
	if (result == STATUS_TIMEOUT) {
		return STATUS_OK;
   d4c18:	4620      	mov	r0, r4
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
		return STATUS_ERROR;
	}
	return result;
} // End PICC_HaltA()
   d4c1a:	b006      	add	sp, #24
   d4c1c:	bd70      	pop	{r4, r5, r6, pc}

000d4c1e <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::MIFARE_Read(	byte blockAddr, 	///< MIFARE Classic: The block (0-0xff) number. MIFARE Ultralight: The first page to return data from.
							byte *buffer,		///< The buffer to store the data in
							byte *bufferSize	///< Buffer size, at least 18 bytes. Also number of bytes returned if STATUS_OK.
						) {
   d4c1e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4c20:	4606      	mov	r6, r0
   d4c22:	461d      	mov	r5, r3
	byte result;
	
	// Sanity check
	if (buffer == NULL || *bufferSize < 18) {
   d4c24:	4614      	mov	r4, r2
   d4c26:	b1c2      	cbz	r2, d4c5a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3c>
   d4c28:	781b      	ldrb	r3, [r3, #0]
   d4c2a:	2b11      	cmp	r3, #17
   d4c2c:	d915      	bls.n	d4c5a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3c>
		return STATUS_NO_ROOM;
	}

	// Build command buffer
	buffer[0] = PICC_CMD_MF_READ;
   d4c2e:	2330      	movs	r3, #48	; 0x30
   d4c30:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   d4c32:	7051      	strb	r1, [r2, #1]
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   d4c34:	1c93      	adds	r3, r2, #2
   d4c36:	4621      	mov	r1, r4
   d4c38:	2202      	movs	r2, #2
   d4c3a:	f7ff fca1 	bl	d4580 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   d4c3e:	2801      	cmp	r0, #1
   d4c40:	d10c      	bne.n	d4c5c <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
		return result;
	}
	
	// Transmit the buffer and receive the response, validate CRC_A.
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   d4c42:	2300      	movs	r3, #0
   d4c44:	9003      	str	r0, [sp, #12]
   d4c46:	9302      	str	r3, [sp, #8]
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	9500      	str	r5, [sp, #0]
   d4c4c:	4623      	mov	r3, r4
   d4c4e:	2204      	movs	r2, #4
   d4c50:	4621      	mov	r1, r4
   d4c52:	4630      	mov	r0, r6
   d4c54:	f7ff fe1e 	bl	d4894 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
   d4c58:	e000      	b.n	d4c5c <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
						) {
	byte result;
	
	// Sanity check
	if (buffer == NULL || *bufferSize < 18) {
		return STATUS_NO_ROOM;
   d4c5a:	2005      	movs	r0, #5
		return result;
	}
	
	// Transmit the buffer and receive the response, validate CRC_A.
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
} // End MIFARE_Read()
   d4c5c:	b004      	add	sp, #16
   d4c5e:	bd70      	pop	{r4, r5, r6, pc}

000d4c60 <_GLOBAL__sub_I__ZN7MFRC522C2Ehh>:
   d4c60:	f000 ba72 	b.w	d5148 <HAL_Pin_Map>

000d4c64 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4c64:	f000 bad8 	b.w	d5218 <HAL_Timer_Get_Micro_Seconds>

000d4c68 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4c68:	f000 bace 	b.w	d5208 <HAL_Delay_Microseconds>

000d4c6c <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d4c6c:	b510      	push	{r4, lr}
   d4c6e:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4c70:	68c0      	ldr	r0, [r0, #12]
   d4c72:	b108      	cbz	r0, d4c78 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4c74:	f000 fc4c 	bl	d5510 <free>
  if (begun) pinMode(pin, INPUT);
   d4c78:	7823      	ldrb	r3, [r4, #0]
   d4c7a:	b11b      	cbz	r3, d4c84 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4c7c:	2100      	movs	r1, #0
   d4c7e:	79e0      	ldrb	r0, [r4, #7]
   d4c80:	f001 f9a4 	bl	d5fcc <pinMode>
}
   d4c84:	4620      	mov	r0, r4
   d4c86:	bd10      	pop	{r4, pc}

000d4c88 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4c88:	b538      	push	{r3, r4, r5, lr}
   d4c8a:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4c8c:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4c8e:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4c90:	b108      	cbz	r0, d4c96 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4c92:	f000 fc3d 	bl	d5510 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4c96:	79a3      	ldrb	r3, [r4, #6]
   d4c98:	2b06      	cmp	r3, #6
   d4c9a:	bf0c      	ite	eq
   d4c9c:	2004      	moveq	r0, #4
   d4c9e:	2003      	movne	r0, #3
   d4ca0:	fb10 f005 	smulbb	r0, r0, r5
   d4ca4:	b280      	uxth	r0, r0
   d4ca6:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4ca8:	f000 fc2a 	bl	d5500 <malloc>
   d4cac:	60e0      	str	r0, [r4, #12]
   d4cae:	b128      	cbz	r0, d4cbc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4cb0:	88a2      	ldrh	r2, [r4, #4]
   d4cb2:	2100      	movs	r1, #0
   d4cb4:	f001 fb8b 	bl	d63ce <memset>
    numLEDs = n;
   d4cb8:	8065      	strh	r5, [r4, #2]
   d4cba:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4cbc:	80a0      	strh	r0, [r4, #4]
   d4cbe:	8060      	strh	r0, [r4, #2]
   d4cc0:	bd38      	pop	{r3, r4, r5, pc}

000d4cc2 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d4cc2:	b510      	push	{r4, lr}
   d4cc4:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4cc6:	2101      	movs	r1, #1
   d4cc8:	79c0      	ldrb	r0, [r0, #7]
   d4cca:	f001 f97f 	bl	d5fcc <pinMode>
  digitalWrite(pin, LOW);
   d4cce:	2100      	movs	r1, #0
   d4cd0:	79e0      	ldrb	r0, [r4, #7]
   d4cd2:	f001 f98c 	bl	d5fee <digitalWrite>
  begun = true;
   d4cd6:	2301      	movs	r3, #1
   d4cd8:	7023      	strb	r3, [r4, #0]
   d4cda:	bd10      	pop	{r4, pc}

000d4cdc <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4cdc:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d4cde:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4ce0:	4605      	mov	r5, r0
   d4ce2:	460c      	mov	r4, r1
    if (begun) {
   d4ce4:	b11b      	cbz	r3, d4cee <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4ce6:	2100      	movs	r1, #0
   d4ce8:	79c0      	ldrb	r0, [r0, #7]
   d4cea:	f001 f96f 	bl	d5fcc <pinMode>
    }
    pin = p;
    if (begun) {
   d4cee:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d4cf0:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4cf2:	b153      	cbz	r3, d4d0a <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d4cf4:	b2a4      	uxth	r4, r4
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	2101      	movs	r1, #1
   d4cfa:	f001 f967 	bl	d5fcc <pinMode>
        digitalWrite(p, LOW);
   d4cfe:	4620      	mov	r0, r4
   d4d00:	2100      	movs	r1, #0
    }
}
   d4d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d4d06:	f001 b972 	b.w	d5fee <digitalWrite>
   d4d0a:	bd38      	pop	{r3, r4, r5, pc}

000d4d0c <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4d0c:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4d0e:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4d10:	4604      	mov	r4, r0
   d4d12:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4d14:	7183      	strb	r3, [r0, #6]
   d4d16:	7005      	strb	r5, [r0, #0]
   d4d18:	7205      	strb	r5, [r0, #8]
   d4d1a:	60c5      	str	r5, [r0, #12]
   d4d1c:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d4d1e:	f7ff ffb3 	bl	d4c88 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4d22:	4620      	mov	r0, r4
   d4d24:	4631      	mov	r1, r6
   d4d26:	f7ff ffd9 	bl	d4cdc <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4d2a:	4620      	mov	r0, r4
   d4d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4d30 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4d30:	68c3      	ldr	r3, [r0, #12]
   d4d32:	2b00      	cmp	r3, #0
   d4d34:	f000 818b 	beq.w	d504e <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d4d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d3c:	7983      	ldrb	r3, [r0, #6]
   d4d3e:	3b02      	subs	r3, #2
   d4d40:	b2db      	uxtb	r3, r3
   d4d42:	2b04      	cmp	r3, #4
   d4d44:	bf9c      	itt	ls
   d4d46:	4ac4      	ldrls	r2, [pc, #784]	; (d5058 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d4d48:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4d4c:	b087      	sub	sp, #28
   d4d4e:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4d50:	bf88      	it	hi
   d4d52:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4d54:	f7ff ff86 	bl	d4c64 <micros>
   d4d58:	692b      	ldr	r3, [r5, #16]
   d4d5a:	1ac0      	subs	r0, r0, r3
   d4d5c:	42a0      	cmp	r0, r4
   d4d5e:	d3f9      	bcc.n	d4d54 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4d60:	4abe      	ldr	r2, [pc, #760]	; (d505c <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4d62:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4d64:	ca07      	ldmia	r2, {r0, r1, r2}
   d4d66:	ac06      	add	r4, sp, #24
   d4d68:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4d6c:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4d6e:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4d70:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4d74:	3304      	adds	r3, #4
   d4d76:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d78:	b922      	cbnz	r2, d4d84 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d7a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4d7e:	2b00      	cmp	r3, #0
   d4d80:	f2c0 8155 	blt.w	d502e <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d4d84:	9c04      	ldr	r4, [sp, #16]
   d4d86:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d8a:	b923      	cbnz	r3, d4d96 <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d8c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4d90:	2b00      	cmp	r3, #0
   d4d92:	f2c0 813c 	blt.w	d500e <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d4d96:	9c05      	ldr	r4, [sp, #20]
   d4d98:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d9c:	b91b      	cbnz	r3, d4da6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d9e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4da2:	2b00      	cmp	r3, #0
   d4da4:	db6e      	blt.n	d4e84 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4da6:	4bae      	ldr	r3, [pc, #696]	; (d5060 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d4da8:	79ea      	ldrb	r2, [r5, #7]
   d4daa:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4dac:	4cad      	ldr	r4, [pc, #692]	; (d5064 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4dae:	49ae      	ldr	r1, [pc, #696]	; (d5068 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4db0:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4db2:	0112      	lsls	r2, r2, #4
   d4db4:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4db6:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4dba:	785b      	ldrb	r3, [r3, #1]
   d4dbc:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4dbe:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4dc0:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4dc2:	f003 031f 	and.w	r3, r3, #31
   d4dc6:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4dca:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4dcc:	433a      	orrs	r2, r7
   d4dce:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d4dd0:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4dd2:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4dd4:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4dd8:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4ddc:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4dde:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4de0:	2800      	cmp	r0, #0
   d4de2:	d044      	beq.n	d4e6e <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d4de4:	46cc      	mov	ip, r9
   d4de6:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4de8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d4dec:	f81c eb01 	ldrb.w	lr, [ip], #1
   d4df0:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4df2:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4df4:	6863      	ldr	r3, [r4, #4]
   d4df6:	1a9b      	subs	r3, r3, r2
   d4df8:	2b46      	cmp	r3, #70	; 0x46
   d4dfa:	d9fb      	bls.n	d4df4 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d4dfc:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d4e00:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4e04:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4e08:	ea43 0307 	orr.w	r3, r3, r7
   d4e0c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4e10:	d02f      	beq.n	d4e72 <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d4e12:	6863      	ldr	r3, [r4, #4]
   d4e14:	1a9b      	subs	r3, r3, r2
   d4e16:	2b28      	cmp	r3, #40	; 0x28
   d4e18:	d9fb      	bls.n	d4e12 <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4e1a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4e1e:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4e20:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4e24:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4e28:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4e2c:	d1e2      	bne.n	d4df4 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4e2e:	ebc9 030c 	rsb	r3, r9, ip
   d4e32:	88a8      	ldrh	r0, [r5, #4]
   d4e34:	b29b      	uxth	r3, r3
   d4e36:	4298      	cmp	r0, r3
   d4e38:	d8d8      	bhi.n	d4dec <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d4e3a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d4e3e:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4e42:	6863      	ldr	r3, [r4, #4]
   d4e44:	1a9b      	subs	r3, r3, r2
   d4e46:	2b46      	cmp	r3, #70	; 0x46
   d4e48:	d9fb      	bls.n	d4e42 <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4e4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4e4e:	ebca 0a03 	rsb	sl, sl, r3
   d4e52:	4582      	cmp	sl, r0
   d4e54:	f0c0 80d5 	bcc.w	d5002 <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d4e58:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4e5c:	f7ff ff04 	bl	d4c68 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4e60:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4e62:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4e66:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4e6a:	2800      	cmp	r0, #0
   d4e6c:	d1ba      	bne.n	d4de4 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d4e6e:	4602      	mov	r2, r0
   d4e70:	e7e7      	b.n	d4e42 <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4e72:	6863      	ldr	r3, [r4, #4]
   d4e74:	1a9b      	subs	r3, r3, r2
   d4e76:	2b11      	cmp	r3, #17
   d4e78:	d8cf      	bhi.n	d4e1a <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d4e7a:	6863      	ldr	r3, [r4, #4]
   d4e7c:	1a9b      	subs	r3, r3, r2
   d4e7e:	2b11      	cmp	r3, #17
   d4e80:	d9f7      	bls.n	d4e72 <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d4e82:	e7ca      	b.n	d4e1a <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e84:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e88:	2b00      	cmp	r3, #0
   d4e8a:	da8c      	bge.n	d4da6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e8c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e90:	2b00      	cmp	r3, #0
   d4e92:	da88      	bge.n	d4da6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4e94:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e98:	2b00      	cmp	r3, #0
   d4e9a:	da84      	bge.n	d4da6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4e9c:	9801      	ldr	r0, [sp, #4]
   d4e9e:	f000 fb2f 	bl	d5500 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4ea2:	2800      	cmp	r0, #0
   d4ea4:	f43f af7f 	beq.w	d4da6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4ea8:	88ab      	ldrh	r3, [r5, #4]
   d4eaa:	2b00      	cmp	r3, #0
   d4eac:	f000 80d0 	beq.w	d5050 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d4eb0:	2700      	movs	r7, #0
   d4eb2:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4eb4:	4e6d      	ldr	r6, [pc, #436]	; (d506c <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d4eb6:	496e      	ldr	r1, [pc, #440]	; (d5070 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d4eb8:	e000      	b.n	d4ebc <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d4eba:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d4ebc:	68ea      	ldr	r2, [r5, #12]
   d4ebe:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4ec0:	f103 0e01 	add.w	lr, r3, #1
   d4ec4:	f012 0f80 	tst.w	r2, #128	; 0x80
   d4ec8:	bf14      	ite	ne
   d4eca:	46b0      	movne	r8, r6
   d4ecc:	4688      	moveq	r8, r1
   d4ece:	fa1f fe8e 	uxth.w	lr, lr
   d4ed2:	f012 0f40 	tst.w	r2, #64	; 0x40
   d4ed6:	bf14      	ite	ne
   d4ed8:	46b1      	movne	r9, r6
   d4eda:	4689      	moveq	r9, r1
   d4edc:	f012 0f20 	tst.w	r2, #32
   d4ee0:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d4ee4:	bf18      	it	ne
   d4ee6:	46b2      	movne	sl, r6
   d4ee8:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d4eec:	bf08      	it	eq
   d4eee:	468a      	moveq	sl, r1
   d4ef0:	f103 0802 	add.w	r8, r3, #2
   d4ef4:	f012 0f10 	tst.w	r2, #16
   d4ef8:	f103 0e03 	add.w	lr, r3, #3
   d4efc:	bf14      	ite	ne
   d4efe:	46b4      	movne	ip, r6
   d4f00:	468c      	moveq	ip, r1
   d4f02:	fa1f f888 	uxth.w	r8, r8
   d4f06:	f012 0f08 	tst.w	r2, #8
   d4f0a:	fa1f fe8e 	uxth.w	lr, lr
   d4f0e:	f103 0904 	add.w	r9, r3, #4
   d4f12:	fa1f f989 	uxth.w	r9, r9
   d4f16:	bf14      	ite	ne
   d4f18:	46b3      	movne	fp, r6
   d4f1a:	468b      	moveq	fp, r1
   d4f1c:	f012 0f04 	tst.w	r2, #4
   d4f20:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4f24:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d4f28:	bf14      	ite	ne
   d4f2a:	46b2      	movne	sl, r6
   d4f2c:	468a      	moveq	sl, r1
   d4f2e:	f103 0805 	add.w	r8, r3, #5
   d4f32:	f012 0f02 	tst.w	r2, #2
   d4f36:	f103 0c06 	add.w	ip, r3, #6
   d4f3a:	f103 0e07 	add.w	lr, r3, #7
   d4f3e:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d4f42:	fa1f fe8e 	uxth.w	lr, lr
   d4f46:	bf14      	ite	ne
   d4f48:	46b1      	movne	r9, r6
   d4f4a:	4689      	moveq	r9, r1
   d4f4c:	fa1f f888 	uxth.w	r8, r8
   d4f50:	f012 0f01 	tst.w	r2, #1
   d4f54:	fa1f fc8c 	uxth.w	ip, ip
   d4f58:	bf14      	ite	ne
   d4f5a:	4632      	movne	r2, r6
   d4f5c:	460a      	moveq	r2, r1
   d4f5e:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4f62:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d4f66:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4f6a:	3701      	adds	r7, #1
   d4f6c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d4f70:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4f72:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4f76:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4f78:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4f7a:	d89e      	bhi.n	d4eba <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d4f7c:	f103 0209 	add.w	r2, r3, #9
   d4f80:	330a      	adds	r3, #10
   d4f82:	b292      	uxth	r2, r2
   d4f84:	b29b      	uxth	r3, r3
   d4f86:	0052      	lsls	r2, r2, #1
   d4f88:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4f8a:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4f8c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d4f90:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4f92:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4f94:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4f96:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4f98:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4f9a:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4f9e:	4e30      	ldr	r6, [pc, #192]	; (d5060 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4fa0:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4fa4:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4fa8:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d4fac:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4fb0:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4fb4:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d4fb8:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4fbc:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4fc0:	79eb      	ldrb	r3, [r5, #7]
   d4fc2:	6831      	ldr	r1, [r6, #0]
   d4fc4:	011b      	lsls	r3, r3, #4
   d4fc6:	18ce      	adds	r6, r1, r3
   d4fc8:	5cc9      	ldrb	r1, [r1, r3]
   d4fca:	7873      	ldrb	r3, [r6, #1]
   d4fcc:	f003 031f 	and.w	r3, r3, #31
   d4fd0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d4fd4:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4fd6:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d4fda:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d4fde:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4fe2:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d4fe4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4fe8:	2b00      	cmp	r3, #0
   d4fea:	d0fb      	beq.n	d4fe4 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4fec:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4fee:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4ff2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d4ff6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4ffa:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d4ffe:	f000 fa87 	bl	d5510 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d5002:	f7ff fe2f 	bl	d4c64 <micros>
   d5006:	6128      	str	r0, [r5, #16]
}
   d5008:	b007      	add	sp, #28
   d500a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d500e:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5012:	2b00      	cmp	r3, #0
   d5014:	f6bf aebf 	bge.w	d4d96 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5018:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d501c:	2b00      	cmp	r3, #0
   d501e:	f6bf aeba 	bge.w	d4d96 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d5022:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5026:	2b00      	cmp	r3, #0
   d5028:	f6bf aeb5 	bge.w	d4d96 <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d502c:	e736      	b.n	d4e9c <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d502e:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5032:	2b00      	cmp	r3, #0
   d5034:	f6bf aea6 	bge.w	d4d84 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5038:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d503c:	2b00      	cmp	r3, #0
   d503e:	f6bf aea1 	bge.w	d4d84 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d5042:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5046:	2b00      	cmp	r3, #0
   d5048:	f6bf ae9c 	bge.w	d4d84 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d504c:	e726      	b.n	d4e9c <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d504e:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d5050:	2304      	movs	r3, #4
   d5052:	2202      	movs	r2, #2
   d5054:	e799      	b.n	d4f8a <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d5056:	bf00      	nop
   d5058:	000d6594 	.word	0x000d6594
   d505c:	000d6588 	.word	0x000d6588
   d5060:	2003e3d8 	.word	0x2003e3d8
   d5064:	e000edf0 	.word	0xe000edf0
   d5068:	e0001000 	.word	0xe0001000
   d506c:	ffff800d 	.word	0xffff800d
   d5070:	ffff8006 	.word	0xffff8006

000d5074 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d5074:	8843      	ldrh	r3, [r0, #2]
   d5076:	428b      	cmp	r3, r1
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d5078:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d507a:	d945      	bls.n	d5108 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d507c:	7a05      	ldrb	r5, [r0, #8]
   d507e:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d5082:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d5086:	b2d6      	uxtb	r6, r2
   d5088:	b145      	cbz	r5, d509c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
   d508a:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d508c:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d508e:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d5090:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d5094:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d5098:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d509c:	f890 c006 	ldrb.w	ip, [r0, #6]
   d50a0:	68c7      	ldr	r7, [r0, #12]
   d50a2:	f1bc 0f06 	cmp.w	ip, #6
   d50a6:	bf0c      	ite	eq
   d50a8:	2504      	moveq	r5, #4
   d50aa:	2503      	movne	r5, #3
   d50ac:	4369      	muls	r1, r5
   d50ae:	f1bc 0f08 	cmp.w	ip, #8
   d50b2:	eb07 0501 	add.w	r5, r7, r1
   d50b6:	d824      	bhi.n	d5102 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
   d50b8:	f04f 0e01 	mov.w	lr, #1
   d50bc:	fa0e fe0c 	lsl.w	lr, lr, ip
   d50c0:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
   d50c4:	d10c      	bne.n	d50e0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
   d50c6:	f01e 0f40 	tst.w	lr, #64	; 0x40
   d50ca:	d10d      	bne.n	d50e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
   d50cc:	f01e 0f10 	tst.w	lr, #16
   d50d0:	d017      	beq.n	d5102 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d50d2:	2bff      	cmp	r3, #255	; 0xff
   d50d4:	bf08      	it	eq
   d50d6:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
   d50d8:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d50da:	706e      	strb	r6, [r5, #1]
          *p = g;
   d50dc:	70ac      	strb	r4, [r5, #2]
        } break;
   d50de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d50e0:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d50e2:	706b      	strb	r3, [r5, #1]
          *p = b;
   d50e4:	70ae      	strb	r6, [r5, #2]
        } break;
   d50e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
   d50e8:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d50ea:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d50ec:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d50ee:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d50f0:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d50f2:	b90b      	cbnz	r3, d50f8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d50f4:	b2d2      	uxtb	r2, r2
   d50f6:	e002      	b.n	d50fe <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d50f8:	435a      	muls	r2, r3
   d50fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d50fe:	70ea      	strb	r2, [r5, #3]
        } break;
   d5100:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d5102:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d5104:	706c      	strb	r4, [r5, #1]
          *p = b;
   d5106:	70ae      	strb	r6, [r5, #2]
   d5108:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d510a <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   d510a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
   d510e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
   d5112:	4770      	bx	lr

000d5114 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d5114:	b508      	push	{r3, lr}
   d5116:	f000 f817 	bl	d5148 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d511a:	f000 f815 	bl	d5148 <HAL_Pin_Map>
   d511e:	4b01      	ldr	r3, [pc, #4]	; (d5124 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d5120:	6018      	str	r0, [r3, #0]
   d5122:	bd08      	pop	{r3, pc}
   d5124:	2003e3d8 	.word	0x2003e3d8

000d5128 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5128:	b508      	push	{r3, lr}
   d512a:	4b02      	ldr	r3, [pc, #8]	; (d5134 <netdb_freeaddrinfo+0xc>)
   d512c:	681b      	ldr	r3, [r3, #0]
   d512e:	689b      	ldr	r3, [r3, #8]
   d5130:	9301      	str	r3, [sp, #4]
   d5132:	bd08      	pop	{r3, pc}
   d5134:	00030268 	.word	0x00030268

000d5138 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5138:	b508      	push	{r3, lr}
   d513a:	4b02      	ldr	r3, [pc, #8]	; (d5144 <netdb_getaddrinfo+0xc>)
   d513c:	681b      	ldr	r3, [r3, #0]
   d513e:	68db      	ldr	r3, [r3, #12]
   d5140:	9301      	str	r3, [sp, #4]
   d5142:	bd08      	pop	{r3, pc}
   d5144:	00030268 	.word	0x00030268

000d5148 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5148:	b508      	push	{r3, lr}
   d514a:	4b02      	ldr	r3, [pc, #8]	; (d5154 <HAL_Pin_Map+0xc>)
   d514c:	681b      	ldr	r3, [r3, #0]
   d514e:	681b      	ldr	r3, [r3, #0]
   d5150:	9301      	str	r3, [sp, #4]
   d5152:	bd08      	pop	{r3, pc}
   d5154:	0003022c 	.word	0x0003022c

000d5158 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5158:	b508      	push	{r3, lr}
   d515a:	4b02      	ldr	r3, [pc, #8]	; (d5164 <HAL_Pin_Mode+0xc>)
   d515c:	681b      	ldr	r3, [r3, #0]
   d515e:	689b      	ldr	r3, [r3, #8]
   d5160:	9301      	str	r3, [sp, #4]
   d5162:	bd08      	pop	{r3, pc}
   d5164:	0003022c 	.word	0x0003022c

000d5168 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5168:	b508      	push	{r3, lr}
   d516a:	4b02      	ldr	r3, [pc, #8]	; (d5174 <HAL_Get_Pin_Mode+0xc>)
   d516c:	681b      	ldr	r3, [r3, #0]
   d516e:	68db      	ldr	r3, [r3, #12]
   d5170:	9301      	str	r3, [sp, #4]
   d5172:	bd08      	pop	{r3, pc}
   d5174:	0003022c 	.word	0x0003022c

000d5178 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5178:	b508      	push	{r3, lr}
   d517a:	4b02      	ldr	r3, [pc, #8]	; (d5184 <HAL_GPIO_Write+0xc>)
   d517c:	681b      	ldr	r3, [r3, #0]
   d517e:	691b      	ldr	r3, [r3, #16]
   d5180:	9301      	str	r3, [sp, #4]
   d5182:	bd08      	pop	{r3, pc}
   d5184:	0003022c 	.word	0x0003022c

000d5188 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5188:	b508      	push	{r3, lr}
   d518a:	4b02      	ldr	r3, [pc, #8]	; (d5194 <HAL_GPIO_Read+0xc>)
   d518c:	681b      	ldr	r3, [r3, #0]
   d518e:	695b      	ldr	r3, [r3, #20]
   d5190:	9301      	str	r3, [sp, #4]
   d5192:	bd08      	pop	{r3, pc}
   d5194:	0003022c 	.word	0x0003022c

000d5198 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5198:	b508      	push	{r3, lr}
   d519a:	4b02      	ldr	r3, [pc, #8]	; (d51a4 <HAL_SPI_Begin+0xc>)
   d519c:	681b      	ldr	r3, [r3, #0]
   d519e:	681b      	ldr	r3, [r3, #0]
   d51a0:	9301      	str	r3, [sp, #4]
   d51a2:	bd08      	pop	{r3, pc}
   d51a4:	00030230 	.word	0x00030230

000d51a8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d51a8:	b508      	push	{r3, lr}
   d51aa:	4b02      	ldr	r3, [pc, #8]	; (d51b4 <HAL_SPI_Send_Receive_Data+0xc>)
   d51ac:	681b      	ldr	r3, [r3, #0]
   d51ae:	695b      	ldr	r3, [r3, #20]
   d51b0:	9301      	str	r3, [sp, #4]
   d51b2:	bd08      	pop	{r3, pc}
   d51b4:	00030230 	.word	0x00030230

000d51b8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d51b8:	b508      	push	{r3, lr}
   d51ba:	4b02      	ldr	r3, [pc, #8]	; (d51c4 <HAL_SPI_Init+0xc>)
   d51bc:	681b      	ldr	r3, [r3, #0]
   d51be:	69db      	ldr	r3, [r3, #28]
   d51c0:	9301      	str	r3, [sp, #4]
   d51c2:	bd08      	pop	{r3, pc}
   d51c4:	00030230 	.word	0x00030230

000d51c8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d51c8:	b508      	push	{r3, lr}
   d51ca:	4b02      	ldr	r3, [pc, #8]	; (d51d4 <HAL_SPI_Is_Enabled+0xc>)
   d51cc:	681b      	ldr	r3, [r3, #0]
   d51ce:	6a1b      	ldr	r3, [r3, #32]
   d51d0:	9301      	str	r3, [sp, #4]
   d51d2:	bd08      	pop	{r3, pc}
   d51d4:	00030230 	.word	0x00030230

000d51d8 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d51d8:	b508      	push	{r3, lr}
   d51da:	4b02      	ldr	r3, [pc, #8]	; (d51e4 <HAL_SPI_Acquire+0xc>)
   d51dc:	681b      	ldr	r3, [r3, #0]
   d51de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d51e0:	9301      	str	r3, [sp, #4]
   d51e2:	bd08      	pop	{r3, pc}
   d51e4:	00030230 	.word	0x00030230

000d51e8 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d51e8:	b508      	push	{r3, lr}
   d51ea:	4b02      	ldr	r3, [pc, #8]	; (d51f4 <HAL_SPI_Release+0xc>)
   d51ec:	681b      	ldr	r3, [r3, #0]
   d51ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d51f0:	9301      	str	r3, [sp, #4]
   d51f2:	bd08      	pop	{r3, pc}
   d51f4:	00030230 	.word	0x00030230

000d51f8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d51f8:	b508      	push	{r3, lr}
   d51fa:	4b02      	ldr	r3, [pc, #8]	; (d5204 <HAL_RNG_GetRandomNumber+0xc>)
   d51fc:	681b      	ldr	r3, [r3, #0]
   d51fe:	685b      	ldr	r3, [r3, #4]
   d5200:	9301      	str	r3, [sp, #4]
   d5202:	bd08      	pop	{r3, pc}
   d5204:	00030218 	.word	0x00030218

000d5208 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5208:	b508      	push	{r3, lr}
   d520a:	4b02      	ldr	r3, [pc, #8]	; (d5214 <HAL_Delay_Microseconds+0xc>)
   d520c:	681b      	ldr	r3, [r3, #0]
   d520e:	68db      	ldr	r3, [r3, #12]
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	bd08      	pop	{r3, pc}
   d5214:	00030218 	.word	0x00030218

000d5218 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5218:	b508      	push	{r3, lr}
   d521a:	4b02      	ldr	r3, [pc, #8]	; (d5224 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d521c:	681b      	ldr	r3, [r3, #0]
   d521e:	691b      	ldr	r3, [r3, #16]
   d5220:	9301      	str	r3, [sp, #4]
   d5222:	bd08      	pop	{r3, pc}
   d5224:	00030218 	.word	0x00030218

000d5228 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	695b      	ldr	r3, [r3, #20]
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	00030218 	.word	0x00030218

000d5238 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <os_thread_is_current+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	689b      	ldr	r3, [r3, #8]
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	00030248 	.word	0x00030248

000d5248 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <os_thread_join+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	691b      	ldr	r3, [r3, #16]
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	00030248 	.word	0x00030248

000d5258 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <os_thread_cleanup+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	695b      	ldr	r3, [r3, #20]
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	00030248 	.word	0x00030248

000d5268 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <os_mutex_recursive_create+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	00030248 	.word	0x00030248

000d5278 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <os_mutex_recursive_destroy+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	00030248 	.word	0x00030248

000d5288 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <inet_inet_ntop+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	695b      	ldr	r3, [r3, #20]
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	00030264 	.word	0x00030264

000d5298 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <HAL_USART_Init+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	681b      	ldr	r3, [r3, #0]
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	0003023c 	.word	0x0003023c

000d52a8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <HAL_USART_Write_Data+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	68db      	ldr	r3, [r3, #12]
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	0003023c 	.word	0x0003023c

000d52b8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <HAL_USART_Available_Data+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	691b      	ldr	r3, [r3, #16]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	0003023c 	.word	0x0003023c

000d52c8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <HAL_USART_Read_Data+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	695b      	ldr	r3, [r3, #20]
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	0003023c 	.word	0x0003023c

000d52d8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <HAL_USART_Peek_Data+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	699b      	ldr	r3, [r3, #24]
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	0003023c 	.word	0x0003023c

000d52e8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <HAL_USART_Flush_Data+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	69db      	ldr	r3, [r3, #28]
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	0003023c 	.word	0x0003023c

000d52f8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <HAL_USART_Is_Enabled+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	6a1b      	ldr	r3, [r3, #32]
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	0003023c 	.word	0x0003023c

000d5308 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <HAL_USART_Available_Data_For_Write+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	0003023c 	.word	0x0003023c

000d5318 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <HAL_I2C_Write_Data+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	6a1b      	ldr	r3, [r3, #32]
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	00030228 	.word	0x00030228

000d5328 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <HAL_I2C_Available_Data+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030228 	.word	0x00030228

000d5338 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <HAL_I2C_Read_Data+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030228 	.word	0x00030228

000d5348 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <HAL_I2C_Peek_Data+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	00030228 	.word	0x00030228

000d5358 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <HAL_I2C_Flush_Data+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	00030228 	.word	0x00030228

000d5368 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <HAL_I2C_Is_Enabled+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	00030228 	.word	0x00030228

000d5378 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <HAL_I2C_Init+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	00030228 	.word	0x00030228

000d5388 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <HAL_USB_USART_Init+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	681b      	ldr	r3, [r3, #0]
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	0003024c 	.word	0x0003024c

000d5398 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <HAL_USB_USART_Begin+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	685b      	ldr	r3, [r3, #4]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	0003024c 	.word	0x0003024c

000d53a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <HAL_USB_USART_Available_Data+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	691b      	ldr	r3, [r3, #16]
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	0003024c 	.word	0x0003024c

000d53b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	695b      	ldr	r3, [r3, #20]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	0003024c 	.word	0x0003024c

000d53c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <HAL_USB_USART_Receive_Data+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	699b      	ldr	r3, [r3, #24]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	0003024c 	.word	0x0003024c

000d53d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <HAL_USB_USART_Send_Data+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	69db      	ldr	r3, [r3, #28]
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	0003024c 	.word	0x0003024c

000d53e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <HAL_USB_USART_Flush_Data+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	6a1b      	ldr	r3, [r3, #32]
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	0003024c 	.word	0x0003024c

000d53f8 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <HAL_USB_USART_Is_Enabled+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	0003024c 	.word	0x0003024c

000d5408 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <set_system_mode+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	685b      	ldr	r3, [r3, #4]
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	00030220 	.word	0x00030220

000d5418 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <system_delay_ms+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	695b      	ldr	r3, [r3, #20]
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	00030220 	.word	0x00030220

000d5428 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b03      	ldr	r3, [pc, #12]	; (d5438 <system_ctrl_set_app_request_handler+0x10>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5432:	9301      	str	r3, [sp, #4]
   d5434:	bd08      	pop	{r3, pc}
   d5436:	0000      	.short	0x0000
   d5438:	00030220 	.word	0x00030220

000d543c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b03      	ldr	r3, [pc, #12]	; (d544c <system_ctrl_set_result+0x10>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5446:	9301      	str	r3, [sp, #4]
   d5448:	bd08      	pop	{r3, pc}
   d544a:	0000      	.short	0x0000
   d544c:	00030220 	.word	0x00030220

000d5450 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5450:	b508      	push	{r3, lr}
   d5452:	4b02      	ldr	r3, [pc, #8]	; (d545c <network_connect+0xc>)
   d5454:	681b      	ldr	r3, [r3, #0]
   d5456:	685b      	ldr	r3, [r3, #4]
   d5458:	9301      	str	r3, [sp, #4]
   d545a:	bd08      	pop	{r3, pc}
   d545c:	00030240 	.word	0x00030240

000d5460 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5460:	b508      	push	{r3, lr}
   d5462:	4b02      	ldr	r3, [pc, #8]	; (d546c <network_connecting+0xc>)
   d5464:	681b      	ldr	r3, [r3, #0]
   d5466:	689b      	ldr	r3, [r3, #8]
   d5468:	9301      	str	r3, [sp, #4]
   d546a:	bd08      	pop	{r3, pc}
   d546c:	00030240 	.word	0x00030240

000d5470 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5470:	b508      	push	{r3, lr}
   d5472:	4b02      	ldr	r3, [pc, #8]	; (d547c <network_disconnect+0xc>)
   d5474:	681b      	ldr	r3, [r3, #0]
   d5476:	68db      	ldr	r3, [r3, #12]
   d5478:	9301      	str	r3, [sp, #4]
   d547a:	bd08      	pop	{r3, pc}
   d547c:	00030240 	.word	0x00030240

000d5480 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5480:	b508      	push	{r3, lr}
   d5482:	4b02      	ldr	r3, [pc, #8]	; (d548c <network_ready+0xc>)
   d5484:	681b      	ldr	r3, [r3, #0]
   d5486:	691b      	ldr	r3, [r3, #16]
   d5488:	9301      	str	r3, [sp, #4]
   d548a:	bd08      	pop	{r3, pc}
   d548c:	00030240 	.word	0x00030240

000d5490 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5490:	b508      	push	{r3, lr}
   d5492:	4b02      	ldr	r3, [pc, #8]	; (d549c <network_on+0xc>)
   d5494:	681b      	ldr	r3, [r3, #0]
   d5496:	695b      	ldr	r3, [r3, #20]
   d5498:	9301      	str	r3, [sp, #4]
   d549a:	bd08      	pop	{r3, pc}
   d549c:	00030240 	.word	0x00030240

000d54a0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d54a0:	b508      	push	{r3, lr}
   d54a2:	4b02      	ldr	r3, [pc, #8]	; (d54ac <network_off+0xc>)
   d54a4:	681b      	ldr	r3, [r3, #0]
   d54a6:	699b      	ldr	r3, [r3, #24]
   d54a8:	9301      	str	r3, [sp, #4]
   d54aa:	bd08      	pop	{r3, pc}
   d54ac:	00030240 	.word	0x00030240

000d54b0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d54b0:	b508      	push	{r3, lr}
   d54b2:	4b02      	ldr	r3, [pc, #8]	; (d54bc <network_listen+0xc>)
   d54b4:	681b      	ldr	r3, [r3, #0]
   d54b6:	69db      	ldr	r3, [r3, #28]
   d54b8:	9301      	str	r3, [sp, #4]
   d54ba:	bd08      	pop	{r3, pc}
   d54bc:	00030240 	.word	0x00030240

000d54c0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d54c0:	b508      	push	{r3, lr}
   d54c2:	4b02      	ldr	r3, [pc, #8]	; (d54cc <network_listening+0xc>)
   d54c4:	681b      	ldr	r3, [r3, #0]
   d54c6:	6a1b      	ldr	r3, [r3, #32]
   d54c8:	9301      	str	r3, [sp, #4]
   d54ca:	bd08      	pop	{r3, pc}
   d54cc:	00030240 	.word	0x00030240

000d54d0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d54d0:	b508      	push	{r3, lr}
   d54d2:	4b02      	ldr	r3, [pc, #8]	; (d54dc <network_set_listen_timeout+0xc>)
   d54d4:	681b      	ldr	r3, [r3, #0]
   d54d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54d8:	9301      	str	r3, [sp, #4]
   d54da:	bd08      	pop	{r3, pc}
   d54dc:	00030240 	.word	0x00030240

000d54e0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d54e0:	b508      	push	{r3, lr}
   d54e2:	4b02      	ldr	r3, [pc, #8]	; (d54ec <network_get_listen_timeout+0xc>)
   d54e4:	681b      	ldr	r3, [r3, #0]
   d54e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d54e8:	9301      	str	r3, [sp, #4]
   d54ea:	bd08      	pop	{r3, pc}
   d54ec:	00030240 	.word	0x00030240

000d54f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d54f0:	b508      	push	{r3, lr}
   d54f2:	4b02      	ldr	r3, [pc, #8]	; (d54fc <spark_set_random_seed_from_cloud_handler+0xc>)
   d54f4:	681b      	ldr	r3, [r3, #0]
   d54f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d54f8:	9301      	str	r3, [sp, #4]
   d54fa:	bd08      	pop	{r3, pc}
   d54fc:	00030244 	.word	0x00030244

000d5500 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5500:	b508      	push	{r3, lr}
   d5502:	4b02      	ldr	r3, [pc, #8]	; (d550c <malloc+0xc>)
   d5504:	681b      	ldr	r3, [r3, #0]
   d5506:	681b      	ldr	r3, [r3, #0]
   d5508:	9301      	str	r3, [sp, #4]
   d550a:	bd08      	pop	{r3, pc}
   d550c:	0003021c 	.word	0x0003021c

000d5510 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5510:	b508      	push	{r3, lr}
   d5512:	4b02      	ldr	r3, [pc, #8]	; (d551c <free+0xc>)
   d5514:	681b      	ldr	r3, [r3, #0]
   d5516:	685b      	ldr	r3, [r3, #4]
   d5518:	9301      	str	r3, [sp, #4]
   d551a:	bd08      	pop	{r3, pc}
   d551c:	0003021c 	.word	0x0003021c

000d5520 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5520:	2200      	movs	r2, #0
   d5522:	4611      	mov	r1, r2
   d5524:	6840      	ldr	r0, [r0, #4]
   d5526:	f7ff bfcb 	b.w	d54c0 <network_listening>

000d552a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d552a:	2200      	movs	r2, #0
   d552c:	4611      	mov	r1, r2
   d552e:	6840      	ldr	r0, [r0, #4]
   d5530:	f7ff bfd6 	b.w	d54e0 <network_get_listen_timeout>

000d5534 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5534:	2200      	movs	r2, #0
   d5536:	6840      	ldr	r0, [r0, #4]
   d5538:	f7ff bfca 	b.w	d54d0 <network_set_listen_timeout>

000d553c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d553c:	2200      	movs	r2, #0
   d553e:	f081 0101 	eor.w	r1, r1, #1
   d5542:	6840      	ldr	r0, [r0, #4]
   d5544:	f7ff bfb4 	b.w	d54b0 <network_listen>

000d5548 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5548:	2300      	movs	r3, #0
   d554a:	461a      	mov	r2, r3
   d554c:	4619      	mov	r1, r3
   d554e:	6840      	ldr	r0, [r0, #4]
   d5550:	f7ff bfa6 	b.w	d54a0 <network_off>

000d5554 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5554:	2300      	movs	r3, #0
   d5556:	461a      	mov	r2, r3
   d5558:	4619      	mov	r1, r3
   d555a:	6840      	ldr	r0, [r0, #4]
   d555c:	f7ff bf98 	b.w	d5490 <network_on>

000d5560 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5560:	2200      	movs	r2, #0
   d5562:	4611      	mov	r1, r2
   d5564:	6840      	ldr	r0, [r0, #4]
   d5566:	f7ff bf8b 	b.w	d5480 <network_ready>

000d556a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d556a:	2200      	movs	r2, #0
   d556c:	4611      	mov	r1, r2
   d556e:	6840      	ldr	r0, [r0, #4]
   d5570:	f7ff bf76 	b.w	d5460 <network_connecting>

000d5574 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5574:	2200      	movs	r2, #0
   d5576:	2102      	movs	r1, #2
   d5578:	6840      	ldr	r0, [r0, #4]
   d557a:	f7ff bf79 	b.w	d5470 <network_disconnect>

000d557e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d557e:	2300      	movs	r3, #0
   d5580:	461a      	mov	r2, r3
   d5582:	6840      	ldr	r0, [r0, #4]
   d5584:	f7ff bf64 	b.w	d5450 <network_connect>

000d5588 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5588:	4b02      	ldr	r3, [pc, #8]	; (d5594 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d558a:	2203      	movs	r2, #3
   d558c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d558e:	4a02      	ldr	r2, [pc, #8]	; (d5598 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5590:	601a      	str	r2, [r3, #0]
   d5592:	4770      	bx	lr
   d5594:	2003e3dc 	.word	0x2003e3dc
   d5598:	000d65b0 	.word	0x000d65b0

000d559c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d559c:	2100      	movs	r1, #0
   d559e:	f7ff be1b 	b.w	d51d8 <HAL_SPI_Acquire>

000d55a2 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d55a2:	2100      	movs	r1, #0
   d55a4:	f7ff be20 	b.w	d51e8 <HAL_SPI_Release>

000d55a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d55a8:	b510      	push	{r4, lr}
   d55aa:	4604      	mov	r4, r0
{
    _spi = spi;
   d55ac:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d55ae:	4608      	mov	r0, r1
   d55b0:	f7ff fe02 	bl	d51b8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d55b4:	2300      	movs	r3, #0
   d55b6:	6063      	str	r3, [r4, #4]
}
   d55b8:	4620      	mov	r0, r4
   d55ba:	bd10      	pop	{r4, pc}

000d55bc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d55bc:	b510      	push	{r4, lr}
   d55be:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d55c0:	7800      	ldrb	r0, [r0, #0]
   d55c2:	f7ff ffeb 	bl	d559c <_ZN8SPIClass4lockEv.isra.0>
   d55c6:	b948      	cbnz	r0, d55dc <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d55c8:	7820      	ldrb	r0, [r4, #0]
   d55ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d55ce:	f7ff fde3 	bl	d5198 <HAL_SPI_Begin>
        unlock();
   d55d2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d55d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d55d8:	f7ff bfe3 	b.w	d55a2 <_ZN8SPIClass6unlockEv.isra.1>
   d55dc:	bd10      	pop	{r4, pc}

000d55de <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d55de:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d55e0:	7800      	ldrb	r0, [r0, #0]
   d55e2:	f7ff fde1 	bl	d51a8 <HAL_SPI_Send_Receive_Data>
}
   d55e6:	b2c0      	uxtb	r0, r0
   d55e8:	bd08      	pop	{r3, pc}

000d55ea <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d55ea:	7800      	ldrb	r0, [r0, #0]
   d55ec:	f7ff bdec 	b.w	d51c8 <HAL_SPI_Is_Enabled>

000d55f0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d55f0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d55f2:	4c09      	ldr	r4, [pc, #36]	; (d5618 <_GLOBAL__sub_I_System+0x28>)
   d55f4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d55f6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d55fa:	6020      	str	r0, [r4, #0]
   d55fc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d55fe:	71a0      	strb	r0, [r4, #6]
   d5600:	8120      	strh	r0, [r4, #8]
   d5602:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5604:	f7ff ff00 	bl	d5408 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5608:	4620      	mov	r0, r4
   d560a:	4a04      	ldr	r2, [pc, #16]	; (d561c <_GLOBAL__sub_I_System+0x2c>)
   d560c:	4904      	ldr	r1, [pc, #16]	; (d5620 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d560e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5612:	f000 bd59 	b.w	d60c8 <__aeabi_atexit>
   d5616:	bf00      	nop
   d5618:	2003e3e4 	.word	0x2003e3e4
   d561c:	2003e33c 	.word	0x2003e33c
   d5620:	000d40af 	.word	0x000d40af

000d5624 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5624:	b510      	push	{r4, lr}
   d5626:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5628:	6800      	ldr	r0, [r0, #0]
   d562a:	b108      	cbz	r0, d5630 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d562c:	f7ff fe24 	bl	d5278 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5630:	4620      	mov	r0, r4
   d5632:	bd10      	pop	{r4, pc}

000d5634 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5634:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5636:	4c06      	ldr	r4, [pc, #24]	; (d5650 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5638:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d563a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d563c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d563e:	f7ff fe13 	bl	d5268 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5642:	4620      	mov	r0, r4
   d5644:	4a03      	ldr	r2, [pc, #12]	; (d5654 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5646:	4904      	ldr	r1, [pc, #16]	; (d5658 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d564c:	f000 bd3c 	b.w	d60c8 <__aeabi_atexit>
   d5650:	2003e3f0 	.word	0x2003e3f0
   d5654:	2003e33c 	.word	0x2003e33c
   d5658:	000d5625 	.word	0x000d5625

000d565c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d565e:	4606      	mov	r6, r0
   d5660:	460d      	mov	r5, r1
   d5662:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5664:	2400      	movs	r4, #0
  while (size--) {
   d5666:	42bd      	cmp	r5, r7
   d5668:	d00c      	beq.n	d5684 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d566a:	6833      	ldr	r3, [r6, #0]
   d566c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5670:	689b      	ldr	r3, [r3, #8]
   d5672:	4630      	mov	r0, r6
   d5674:	4798      	blx	r3
     if (chunk>=0)
   d5676:	2800      	cmp	r0, #0
   d5678:	db01      	blt.n	d567e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d567a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d567c:	e7f3      	b.n	d5666 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d567e:	2c00      	cmp	r4, #0
   d5680:	bf08      	it	eq
   d5682:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5684:	4620      	mov	r0, r4
   d5686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5688 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5688:	b570      	push	{r4, r5, r6, lr}
   d568a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d568c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d568e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5690:	b149      	cbz	r1, d56a6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5692:	f000 fecd 	bl	d6430 <strlen>
   d5696:	682b      	ldr	r3, [r5, #0]
   d5698:	4602      	mov	r2, r0
   d569a:	4621      	mov	r1, r4
   d569c:	4628      	mov	r0, r5
   d569e:	68db      	ldr	r3, [r3, #12]
    }
   d56a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d56a4:	4718      	bx	r3
    }
   d56a6:	bd70      	pop	{r4, r5, r6, pc}

000d56a8 <_ZN5Print5printEPKc>:
   d56a8:	b508      	push	{r3, lr}
   d56aa:	f7ff ffed 	bl	d5688 <_ZN5Print5writeEPKc>
   d56ae:	bd08      	pop	{r3, pc}

000d56b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d56b0:	6803      	ldr	r3, [r0, #0]
   d56b2:	689b      	ldr	r3, [r3, #8]
   d56b4:	4718      	bx	r3

000d56b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d56b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d56b8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d56ba:	4605      	mov	r5, r0
  size_t n = print('\r');
   d56bc:	f7ff fff8 	bl	d56b0 <_ZN5Print5printEc>
  n += print('\n');
   d56c0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d56c2:	4604      	mov	r4, r0
  n += print('\n');
   d56c4:	4628      	mov	r0, r5
   d56c6:	f7ff fff3 	bl	d56b0 <_ZN5Print5printEc>
  return n;
}
   d56ca:	4420      	add	r0, r4
   d56cc:	bd38      	pop	{r3, r4, r5, pc}

000d56ce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d56ce:	b538      	push	{r3, r4, r5, lr}
   d56d0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d56d2:	f7ff ffd9 	bl	d5688 <_ZN5Print5writeEPKc>
   d56d6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d56d8:	4628      	mov	r0, r5
   d56da:	f7ff ffec 	bl	d56b6 <_ZN5Print7printlnEv>
  return n;
}
   d56de:	4420      	add	r0, r4
   d56e0:	bd38      	pop	{r3, r4, r5, pc}

000d56e2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d56e2:	b530      	push	{r4, r5, lr}
   d56e4:	b08b      	sub	sp, #44	; 0x2c
   d56e6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d56e8:	2100      	movs	r1, #0
   d56ea:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d56ee:	2a01      	cmp	r2, #1
   d56f0:	bf98      	it	ls
   d56f2:	220a      	movls	r2, #10
   d56f4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d56f8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d56fc:	fb05 3312 	mls	r3, r5, r2, r3
   d5700:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5704:	2b09      	cmp	r3, #9
   d5706:	bf94      	ite	ls
   d5708:	3330      	addls	r3, #48	; 0x30
   d570a:	3337      	addhi	r3, #55	; 0x37
   d570c:	b2db      	uxtb	r3, r3
   d570e:	4621      	mov	r1, r4
   d5710:	f804 3901 	strb.w	r3, [r4], #-1
   d5714:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5716:	2d00      	cmp	r5, #0
   d5718:	d1ee      	bne.n	d56f8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d571a:	f7ff ffb5 	bl	d5688 <_ZN5Print5writeEPKc>
}
   d571e:	b00b      	add	sp, #44	; 0x2c
   d5720:	bd30      	pop	{r4, r5, pc}
	...

000d5724 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5724:	4b01      	ldr	r3, [pc, #4]	; (d572c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5726:	4a02      	ldr	r2, [pc, #8]	; (d5730 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5728:	601a      	str	r2, [r3, #0]
   d572a:	4770      	bx	lr
   d572c:	2003e3f4 	.word	0x2003e3f4
   d5730:	000d664f 	.word	0x000d664f

000d5734 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5734:	4b02      	ldr	r3, [pc, #8]	; (d5740 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5736:	681a      	ldr	r2, [r3, #0]
   d5738:	4b02      	ldr	r3, [pc, #8]	; (d5744 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d573a:	601a      	str	r2, [r3, #0]
   d573c:	4770      	bx	lr
   d573e:	bf00      	nop
   d5740:	2003e2d4 	.word	0x2003e2d4
   d5744:	2003e3f8 	.word	0x2003e3f8

000d5748 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5748:	2100      	movs	r1, #0
   d574a:	f7ff be65 	b.w	d5418 <system_delay_ms>

000d574e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d574e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5750:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5752:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5754:	b113      	cbz	r3, d575c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5756:	2203      	movs	r2, #3
   d5758:	4601      	mov	r1, r0
   d575a:	4798      	blx	r3
    }
   d575c:	4620      	mov	r0, r4
   d575e:	bd10      	pop	{r4, pc}

000d5760 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5760:	b510      	push	{r4, lr}
   d5762:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5764:	f7ff fff3 	bl	d574e <_ZNSt14_Function_baseD1Ev>
   d5768:	4620      	mov	r0, r4
   d576a:	bd10      	pop	{r4, pc}

000d576c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d576c:	4803      	ldr	r0, [pc, #12]	; (d577c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d576e:	4a04      	ldr	r2, [pc, #16]	; (d5780 <_GLOBAL__sub_I_RGB+0x14>)
   d5770:	4904      	ldr	r1, [pc, #16]	; (d5784 <_GLOBAL__sub_I_RGB+0x18>)
   d5772:	2300      	movs	r3, #0
   d5774:	6083      	str	r3, [r0, #8]
   d5776:	f000 bca7 	b.w	d60c8 <__aeabi_atexit>
   d577a:	bf00      	nop
   d577c:	2003e3fc 	.word	0x2003e3fc
   d5780:	2003e33c 	.word	0x2003e33c
   d5784:	000d5761 	.word	0x000d5761

000d5788 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5788:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d578a:	4b0c      	ldr	r3, [pc, #48]	; (d57bc <serialEventRun+0x34>)
   d578c:	b133      	cbz	r3, d579c <serialEventRun+0x14>
   d578e:	f000 f95d 	bl	d5a4c <_Z16_fetch_usbserialv>
   d5792:	6803      	ldr	r3, [r0, #0]
   d5794:	691b      	ldr	r3, [r3, #16]
   d5796:	4798      	blx	r3
   d5798:	2800      	cmp	r0, #0
   d579a:	dc09      	bgt.n	d57b0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d579c:	4b08      	ldr	r3, [pc, #32]	; (d57c0 <serialEventRun+0x38>)
   d579e:	b163      	cbz	r3, d57ba <serialEventRun+0x32>
   d57a0:	f000 f9d6 	bl	d5b50 <_Z22__fetch_global_Serial1v>
   d57a4:	6803      	ldr	r3, [r0, #0]
   d57a6:	691b      	ldr	r3, [r3, #16]
   d57a8:	4798      	blx	r3
   d57aa:	2800      	cmp	r0, #0
   d57ac:	dc03      	bgt.n	d57b6 <serialEventRun+0x2e>
   d57ae:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d57b0:	f3af 8000 	nop.w
   d57b4:	e7f2      	b.n	d579c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d57b6:	f3af 8000 	nop.w
   d57ba:	bd08      	pop	{r3, pc}
	...

000d57c4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d57c4:	b508      	push	{r3, lr}
	serialEventRun();
   d57c6:	f7ff ffdf 	bl	d5788 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d57ca:	f7ff fd2d 	bl	d5228 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d57ce:	4b01      	ldr	r3, [pc, #4]	; (d57d4 <_post_loop+0x10>)
   d57d0:	6018      	str	r0, [r3, #0]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	2003e730 	.word	0x2003e730

000d57d8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d57d8:	4802      	ldr	r0, [pc, #8]	; (d57e4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d57da:	4a03      	ldr	r2, [pc, #12]	; (d57e8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d57dc:	4903      	ldr	r1, [pc, #12]	; (d57ec <_Z33system_initialize_user_backup_ramv+0x14>)
   d57de:	1a12      	subs	r2, r2, r0
   d57e0:	f000 bdea 	b.w	d63b8 <memcpy>
   d57e4:	2003f400 	.word	0x2003f400
   d57e8:	2003f404 	.word	0x2003f404
   d57ec:	000d68d0 	.word	0x000d68d0

000d57f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d57f0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57f2:	2300      	movs	r3, #0
   d57f4:	9300      	str	r3, [sp, #0]
   d57f6:	461a      	mov	r2, r3
   d57f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d57fc:	f7ff fe1e 	bl	d543c <system_ctrl_set_result>
}
   d5800:	b003      	add	sp, #12
   d5802:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5808 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5808:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d580a:	8843      	ldrh	r3, [r0, #2]
   d580c:	2b0a      	cmp	r3, #10
   d580e:	d008      	beq.n	d5822 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5810:	2b50      	cmp	r3, #80	; 0x50
   d5812:	d109      	bne.n	d5828 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5814:	4b09      	ldr	r3, [pc, #36]	; (d583c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5816:	681b      	ldr	r3, [r3, #0]
   d5818:	b13b      	cbz	r3, d582a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d581a:	b003      	add	sp, #12
   d581c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5820:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5822:	f7ff ffe5 	bl	d57f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5826:	e006      	b.n	d5836 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5828:	2300      	movs	r3, #0
   d582a:	9300      	str	r3, [sp, #0]
   d582c:	461a      	mov	r2, r3
   d582e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5832:	f7ff fe03 	bl	d543c <system_ctrl_set_result>
        break;
    }
}
   d5836:	b003      	add	sp, #12
   d5838:	f85d fb04 	ldr.w	pc, [sp], #4
   d583c:	2003e40c 	.word	0x2003e40c

000d5840 <module_user_init_hook>:

void module_user_init_hook()
{
   d5840:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5842:	4c10      	ldr	r4, [pc, #64]	; (d5884 <module_user_init_hook+0x44>)
   d5844:	4d10      	ldr	r5, [pc, #64]	; (d5888 <module_user_init_hook+0x48>)
   d5846:	6823      	ldr	r3, [r4, #0]
   d5848:	42ab      	cmp	r3, r5
   d584a:	4b10      	ldr	r3, [pc, #64]	; (d588c <module_user_init_hook+0x4c>)
   d584c:	bf0c      	ite	eq
   d584e:	2201      	moveq	r2, #1
   d5850:	2200      	movne	r2, #0
   d5852:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5854:	d002      	beq.n	d585c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5856:	f7ff ffbf 	bl	d57d8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d585a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d585c:	f7ff fccc 	bl	d51f8 <HAL_RNG_GetRandomNumber>
   d5860:	4604      	mov	r4, r0
    srand(seed);
   d5862:	f000 fdbd 	bl	d63e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5866:	4b0a      	ldr	r3, [pc, #40]	; (d5890 <module_user_init_hook+0x50>)
   d5868:	b113      	cbz	r3, d5870 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d586a:	4620      	mov	r0, r4
   d586c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5870:	2100      	movs	r1, #0
   d5872:	4807      	ldr	r0, [pc, #28]	; (d5890 <module_user_init_hook+0x50>)
   d5874:	f7ff fe3c 	bl	d54f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5878:	2100      	movs	r1, #0
   d587a:	4806      	ldr	r0, [pc, #24]	; (d5894 <module_user_init_hook+0x54>)
}
   d587c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5880:	f7ff bdd2 	b.w	d5428 <system_ctrl_set_app_request_handler>
   d5884:	2003f400 	.word	0x2003f400
   d5888:	9a271c1e 	.word	0x9a271c1e
   d588c:	2003e410 	.word	0x2003e410
   d5890:	00000000 	.word	0x00000000
   d5894:	000d5809 	.word	0x000d5809

000d5898 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5898:	4770      	bx	lr

000d589a <_ZN9IPAddressD0Ev>:
   d589a:	b510      	push	{r4, lr}
   d589c:	2118      	movs	r1, #24
   d589e:	4604      	mov	r4, r0
   d58a0:	f000 fc20 	bl	d60e4 <_ZdlPvj>
   d58a4:	4620      	mov	r0, r4
   d58a6:	bd10      	pop	{r4, pc}

000d58a8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d58a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d58aa:	7d03      	ldrb	r3, [r0, #20]
   d58ac:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d58ae:	b08d      	sub	sp, #52	; 0x34
   d58b0:	460e      	mov	r6, r1
   d58b2:	f100 0704 	add.w	r7, r0, #4
   d58b6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d58ba:	d002      	beq.n	d58c2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d58bc:	f100 0508 	add.w	r5, r0, #8
   d58c0:	e018      	b.n	d58f4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d58c2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d58c4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d58c6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d58ca:	232f      	movs	r3, #47	; 0x2f
   d58cc:	462a      	mov	r2, r5
   d58ce:	200a      	movs	r0, #10
   d58d0:	f7ff fcda 	bl	d5288 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d58d4:	4628      	mov	r0, r5
   d58d6:	f000 fdab 	bl	d6430 <strlen>
   d58da:	6833      	ldr	r3, [r6, #0]
   d58dc:	4602      	mov	r2, r0
   d58de:	68db      	ldr	r3, [r3, #12]
   d58e0:	4629      	mov	r1, r5
   d58e2:	4630      	mov	r0, r6
   d58e4:	4798      	blx	r3
   d58e6:	e00f      	b.n	d5908 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d58e8:	b124      	cbz	r4, d58f4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d58ea:	212e      	movs	r1, #46	; 0x2e
   d58ec:	4630      	mov	r0, r6
   d58ee:	f7ff fedf 	bl	d56b0 <_ZN5Print5printEc>
   d58f2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d58f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d58f8:	220a      	movs	r2, #10
   d58fa:	4630      	mov	r0, r6
   d58fc:	f7ff fef1 	bl	d56e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5900:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5902:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5904:	d1f0      	bne.n	d58e8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5906:	4620      	mov	r0, r4
    }
    return n;
}
   d5908:	b00d      	add	sp, #52	; 0x34
   d590a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d590c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d590c:	b510      	push	{r4, lr}
   d590e:	4b05      	ldr	r3, [pc, #20]	; (d5924 <_ZN9IPAddressC1Ev+0x18>)
   d5910:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5912:	2211      	movs	r2, #17
   d5914:	f840 3b04 	str.w	r3, [r0], #4
   d5918:	2100      	movs	r1, #0
   d591a:	f000 fd58 	bl	d63ce <memset>
{
    clear();
}
   d591e:	4620      	mov	r0, r4
   d5920:	bd10      	pop	{r4, pc}
   d5922:	bf00      	nop
   d5924:	000d66f0 	.word	0x000d66f0

000d5928 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5928:	4603      	mov	r3, r0
   d592a:	4a07      	ldr	r2, [pc, #28]	; (d5948 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d592c:	b510      	push	{r4, lr}
   d592e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5932:	f101 0210 	add.w	r2, r1, #16
   d5936:	f851 4b04 	ldr.w	r4, [r1], #4
   d593a:	f843 4b04 	str.w	r4, [r3], #4
   d593e:	4291      	cmp	r1, r2
   d5940:	d1f9      	bne.n	d5936 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5942:	780a      	ldrb	r2, [r1, #0]
   d5944:	701a      	strb	r2, [r3, #0]
}
   d5946:	bd10      	pop	{r4, pc}
   d5948:	000d66f0 	.word	0x000d66f0

000d594c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d594c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d594e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5952:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5956:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d595a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d595e:	2304      	movs	r3, #4
   d5960:	6041      	str	r1, [r0, #4]
   d5962:	7503      	strb	r3, [r0, #20]
   d5964:	bd10      	pop	{r4, pc}

000d5966 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5966:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5968:	780d      	ldrb	r5, [r1, #0]
   d596a:	788b      	ldrb	r3, [r1, #2]
   d596c:	784a      	ldrb	r2, [r1, #1]
   d596e:	78c9      	ldrb	r1, [r1, #3]
   d5970:	9100      	str	r1, [sp, #0]
   d5972:	4629      	mov	r1, r5
   d5974:	f7ff ffea 	bl	d594c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5978:	b003      	add	sp, #12
   d597a:	bd30      	pop	{r4, r5, pc}

000d597c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d597c:	7441      	strb	r1, [r0, #17]
   d597e:	4770      	bx	lr

000d5980 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5980:	4770      	bx	lr

000d5982 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5982:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5984:	2100      	movs	r1, #0
   d5986:	7c00      	ldrb	r0, [r0, #16]
   d5988:	f7ff fd1e 	bl	d53c8 <HAL_USB_USART_Receive_Data>
}
   d598c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5990:	bf28      	it	cs
   d5992:	f04f 30ff 	movcs.w	r0, #4294967295
   d5996:	bd08      	pop	{r3, pc}

000d5998 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5998:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d599a:	2101      	movs	r1, #1
   d599c:	7c00      	ldrb	r0, [r0, #16]
   d599e:	f7ff fd13 	bl	d53c8 <HAL_USB_USART_Receive_Data>
}
   d59a2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d59a6:	bf28      	it	cs
   d59a8:	f04f 30ff 	movcs.w	r0, #4294967295
   d59ac:	bd08      	pop	{r3, pc}

000d59ae <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d59ae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d59b0:	7c00      	ldrb	r0, [r0, #16]
   d59b2:	f7ff fd01 	bl	d53b8 <HAL_USB_USART_Available_Data_For_Write>
}
   d59b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d59ba:	bd08      	pop	{r3, pc}

000d59bc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d59bc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d59be:	7c00      	ldrb	r0, [r0, #16]
   d59c0:	f7ff fcf2 	bl	d53a8 <HAL_USB_USART_Available_Data>
}
   d59c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d59c8:	bd08      	pop	{r3, pc}

000d59ca <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d59ca:	7c00      	ldrb	r0, [r0, #16]
   d59cc:	f7ff bd0c 	b.w	d53e8 <HAL_USB_USART_Flush_Data>

000d59d0 <_ZN9USBSerialD0Ev>:
   d59d0:	b510      	push	{r4, lr}
   d59d2:	2114      	movs	r1, #20
   d59d4:	4604      	mov	r4, r0
   d59d6:	f000 fb85 	bl	d60e4 <_ZdlPvj>
   d59da:	4620      	mov	r0, r4
   d59dc:	bd10      	pop	{r4, pc}

000d59de <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d59de:	b538      	push	{r3, r4, r5, lr}
   d59e0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d59e2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d59e4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d59e6:	f7ff fce7 	bl	d53b8 <HAL_USB_USART_Available_Data_For_Write>
   d59ea:	2800      	cmp	r0, #0
   d59ec:	dc01      	bgt.n	d59f2 <_ZN9USBSerial5writeEh+0x14>
   d59ee:	7c60      	ldrb	r0, [r4, #17]
   d59f0:	b128      	cbz	r0, d59fe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d59f2:	4629      	mov	r1, r5
   d59f4:	7c20      	ldrb	r0, [r4, #16]
   d59f6:	f7ff fcef 	bl	d53d8 <HAL_USB_USART_Send_Data>
   d59fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d59fe:	bd38      	pop	{r3, r4, r5, pc}

000d5a00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a00:	b510      	push	{r4, lr}
   d5a02:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5a04:	2300      	movs	r3, #0
   d5a06:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a0c:	60a3      	str	r3, [r4, #8]
   d5a0e:	4b05      	ldr	r3, [pc, #20]	; (d5a24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5a10:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5a12:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a14:	4608      	mov	r0, r1
{
  _serial = serial;
   d5a16:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5a18:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5a1a:	4611      	mov	r1, r2
   d5a1c:	f7ff fcb4 	bl	d5388 <HAL_USB_USART_Init>
}
   d5a20:	4620      	mov	r0, r4
   d5a22:	bd10      	pop	{r4, pc}
   d5a24:	000d6704 	.word	0x000d6704

000d5a28 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5a28:	2200      	movs	r2, #0
   d5a2a:	7c00      	ldrb	r0, [r0, #16]
   d5a2c:	f7ff bcb4 	b.w	d5398 <HAL_USB_USART_Begin>

000d5a30 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d5a30:	7c00      	ldrb	r0, [r0, #16]
   d5a32:	f7ff bce1 	b.w	d53f8 <HAL_USB_USART_Is_Enabled>

000d5a36 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
   d5a36:	f7ff bffb 	b.w	d5a30 <_ZN9USBSerial9isEnabledEv>

000d5a3a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5a3a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5a3c:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5a3e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5a40:	2100      	movs	r1, #0
   d5a42:	f000 fcc4 	bl	d63ce <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5a46:	4620      	mov	r0, r4
   d5a48:	bd10      	pop	{r4, pc}
	...

000d5a4c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5a4c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a4e:	4d0e      	ldr	r5, [pc, #56]	; (d5a88 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5a50:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5a52:	a801      	add	r0, sp, #4
   d5a54:	f7ff fff1 	bl	d5a3a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5a58:	6829      	ldr	r1, [r5, #0]
   d5a5a:	f011 0401 	ands.w	r4, r1, #1
   d5a5e:	d110      	bne.n	d5a82 <_Z16_fetch_usbserialv+0x36>
   d5a60:	4628      	mov	r0, r5
   d5a62:	f7fe fb1c 	bl	d409e <__cxa_guard_acquire>
   d5a66:	b160      	cbz	r0, d5a82 <_Z16_fetch_usbserialv+0x36>
   d5a68:	aa01      	add	r2, sp, #4
   d5a6a:	4621      	mov	r1, r4
   d5a6c:	4807      	ldr	r0, [pc, #28]	; (d5a8c <_Z16_fetch_usbserialv+0x40>)
   d5a6e:	f7ff ffc7 	bl	d5a00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5a72:	4628      	mov	r0, r5
   d5a74:	f7fe fb18 	bl	d40a8 <__cxa_guard_release>
   d5a78:	4a05      	ldr	r2, [pc, #20]	; (d5a90 <_Z16_fetch_usbserialv+0x44>)
   d5a7a:	4906      	ldr	r1, [pc, #24]	; (d5a94 <_Z16_fetch_usbserialv+0x48>)
   d5a7c:	4803      	ldr	r0, [pc, #12]	; (d5a8c <_Z16_fetch_usbserialv+0x40>)
   d5a7e:	f000 fb23 	bl	d60c8 <__aeabi_atexit>
	return _usbserial;
}
   d5a82:	4802      	ldr	r0, [pc, #8]	; (d5a8c <_Z16_fetch_usbserialv+0x40>)
   d5a84:	b007      	add	sp, #28
   d5a86:	bd30      	pop	{r4, r5, pc}
   d5a88:	2003e414 	.word	0x2003e414
   d5a8c:	2003e418 	.word	0x2003e418
   d5a90:	2003e33c 	.word	0x2003e33c
   d5a94:	000d5981 	.word	0x000d5981

000d5a98 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5a98:	4770      	bx	lr

000d5a9a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a9a:	7441      	strb	r1, [r0, #17]
   d5a9c:	4770      	bx	lr

000d5a9e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5a9e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5aa0:	7c00      	ldrb	r0, [r0, #16]
   d5aa2:	f7ff fc31 	bl	d5308 <HAL_USART_Available_Data_For_Write>
}
   d5aa6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5aaa:	bd08      	pop	{r3, pc}

000d5aac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5aac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5aae:	7c00      	ldrb	r0, [r0, #16]
   d5ab0:	f7ff fc02 	bl	d52b8 <HAL_USART_Available_Data>
}
   d5ab4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ab8:	bd08      	pop	{r3, pc}

000d5aba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5aba:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5abc:	7c00      	ldrb	r0, [r0, #16]
   d5abe:	f7ff fc0b 	bl	d52d8 <HAL_USART_Peek_Data>
}
   d5ac2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ac6:	bf28      	it	cs
   d5ac8:	f04f 30ff 	movcs.w	r0, #4294967295
   d5acc:	bd08      	pop	{r3, pc}

000d5ace <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5ace:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5ad0:	7c00      	ldrb	r0, [r0, #16]
   d5ad2:	f7ff fbf9 	bl	d52c8 <HAL_USART_Read_Data>
}
   d5ad6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ada:	bf28      	it	cs
   d5adc:	f04f 30ff 	movcs.w	r0, #4294967295
   d5ae0:	bd08      	pop	{r3, pc}

000d5ae2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5ae2:	7c00      	ldrb	r0, [r0, #16]
   d5ae4:	f7ff bc00 	b.w	d52e8 <HAL_USART_Flush_Data>

000d5ae8 <_ZN11USARTSerialD0Ev>:
   d5ae8:	b510      	push	{r4, lr}
   d5aea:	2114      	movs	r1, #20
   d5aec:	4604      	mov	r4, r0
   d5aee:	f000 faf9 	bl	d60e4 <_ZdlPvj>
   d5af2:	4620      	mov	r0, r4
   d5af4:	bd10      	pop	{r4, pc}

000d5af6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5af6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5af8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5afa:	4604      	mov	r4, r0
   d5afc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5afe:	b925      	cbnz	r5, d5b0a <_ZN11USARTSerial5writeEh+0x14>
   d5b00:	7c00      	ldrb	r0, [r0, #16]
   d5b02:	f7ff fc01 	bl	d5308 <HAL_USART_Available_Data_For_Write>
   d5b06:	2800      	cmp	r0, #0
   d5b08:	dd05      	ble.n	d5b16 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5b0a:	4631      	mov	r1, r6
   d5b0c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5b12:	f7ff bbc9 	b.w	d52a8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5b16:	4628      	mov	r0, r5
   d5b18:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5b1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5b1c:	b510      	push	{r4, lr}
   d5b1e:	4604      	mov	r4, r0
   d5b20:	4608      	mov	r0, r1
   d5b22:	4611      	mov	r1, r2
   d5b24:	2200      	movs	r2, #0
   d5b26:	6062      	str	r2, [r4, #4]
   d5b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b2c:	60a2      	str	r2, [r4, #8]
   d5b2e:	4a05      	ldr	r2, [pc, #20]	; (d5b44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5b30:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5b32:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5b34:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5b36:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5b38:	461a      	mov	r2, r3
   d5b3a:	f7ff fbad 	bl	d5298 <HAL_USART_Init>
}
   d5b3e:	4620      	mov	r0, r4
   d5b40:	bd10      	pop	{r4, pc}
   d5b42:	bf00      	nop
   d5b44:	000d6734 	.word	0x000d6734

000d5b48 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5b48:	7c00      	ldrb	r0, [r0, #16]
   d5b4a:	f7ff bbd5 	b.w	d52f8 <HAL_USART_Is_Enabled>
	...

000d5b50 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5b50:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5b52:	4d0c      	ldr	r5, [pc, #48]	; (d5b84 <_Z22__fetch_global_Serial1v+0x34>)
   d5b54:	6829      	ldr	r1, [r5, #0]
   d5b56:	f011 0401 	ands.w	r4, r1, #1
   d5b5a:	d111      	bne.n	d5b80 <_Z22__fetch_global_Serial1v+0x30>
   d5b5c:	4628      	mov	r0, r5
   d5b5e:	f7fe fa9e 	bl	d409e <__cxa_guard_acquire>
   d5b62:	b168      	cbz	r0, d5b80 <_Z22__fetch_global_Serial1v+0x30>
   d5b64:	4a08      	ldr	r2, [pc, #32]	; (d5b88 <_Z22__fetch_global_Serial1v+0x38>)
   d5b66:	4b09      	ldr	r3, [pc, #36]	; (d5b8c <_Z22__fetch_global_Serial1v+0x3c>)
   d5b68:	4809      	ldr	r0, [pc, #36]	; (d5b90 <_Z22__fetch_global_Serial1v+0x40>)
   d5b6a:	4621      	mov	r1, r4
   d5b6c:	f7ff ffd6 	bl	d5b1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5b70:	4628      	mov	r0, r5
   d5b72:	f7fe fa99 	bl	d40a8 <__cxa_guard_release>
   d5b76:	4a07      	ldr	r2, [pc, #28]	; (d5b94 <_Z22__fetch_global_Serial1v+0x44>)
   d5b78:	4907      	ldr	r1, [pc, #28]	; (d5b98 <_Z22__fetch_global_Serial1v+0x48>)
   d5b7a:	4805      	ldr	r0, [pc, #20]	; (d5b90 <_Z22__fetch_global_Serial1v+0x40>)
   d5b7c:	f000 faa4 	bl	d60c8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5b80:	4803      	ldr	r0, [pc, #12]	; (d5b90 <_Z22__fetch_global_Serial1v+0x40>)
   d5b82:	bd38      	pop	{r3, r4, r5, pc}
   d5b84:	2003e4c4 	.word	0x2003e4c4
   d5b88:	2003e4c8 	.word	0x2003e4c8
   d5b8c:	2003e440 	.word	0x2003e440
   d5b90:	2003e42c 	.word	0x2003e42c
   d5b94:	2003e33c 	.word	0x2003e33c
   d5b98:	000d5a99 	.word	0x000d5a99

000d5b9c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5b9c:	4770      	bx	lr

000d5b9e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ba0:	4606      	mov	r6, r0
   d5ba2:	4615      	mov	r5, r2
   d5ba4:	460c      	mov	r4, r1
   d5ba6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ba8:	42bc      	cmp	r4, r7
   d5baa:	d006      	beq.n	d5bba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5bac:	6833      	ldr	r3, [r6, #0]
   d5bae:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5bb2:	689b      	ldr	r3, [r3, #8]
   d5bb4:	4630      	mov	r0, r6
   d5bb6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5bb8:	e7f6      	b.n	d5ba8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5bba:	4628      	mov	r0, r5
   d5bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5bbe <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5bbe:	2200      	movs	r2, #0
   d5bc0:	7c00      	ldrb	r0, [r0, #16]
   d5bc2:	f7ff bba9 	b.w	d5318 <HAL_I2C_Write_Data>

000d5bc6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5bc6:	2100      	movs	r1, #0
   d5bc8:	7c00      	ldrb	r0, [r0, #16]
   d5bca:	f7ff bbad 	b.w	d5328 <HAL_I2C_Available_Data>

000d5bce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5bce:	2100      	movs	r1, #0
   d5bd0:	7c00      	ldrb	r0, [r0, #16]
   d5bd2:	f7ff bbb1 	b.w	d5338 <HAL_I2C_Read_Data>

000d5bd6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5bd6:	2100      	movs	r1, #0
   d5bd8:	7c00      	ldrb	r0, [r0, #16]
   d5bda:	f7ff bbb5 	b.w	d5348 <HAL_I2C_Peek_Data>

000d5bde <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5bde:	2100      	movs	r1, #0
   d5be0:	7c00      	ldrb	r0, [r0, #16]
   d5be2:	f7ff bbb9 	b.w	d5358 <HAL_I2C_Flush_Data>

000d5be6 <_ZN7TwoWireD0Ev>:
   d5be6:	b510      	push	{r4, lr}
   d5be8:	2114      	movs	r1, #20
   d5bea:	4604      	mov	r4, r0
   d5bec:	f000 fa7a 	bl	d60e4 <_ZdlPvj>
   d5bf0:	4620      	mov	r0, r4
   d5bf2:	bd10      	pop	{r4, pc}

000d5bf4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5bf4:	b510      	push	{r4, lr}
   d5bf6:	4604      	mov	r4, r0
   d5bf8:	2300      	movs	r3, #0
   d5bfa:	6063      	str	r3, [r4, #4]
   d5bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c00:	60a3      	str	r3, [r4, #8]
   d5c02:	4b04      	ldr	r3, [pc, #16]	; (d5c14 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5c04:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5c06:	4608      	mov	r0, r1
   d5c08:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5c0a:	4611      	mov	r1, r2
   d5c0c:	f7ff fbb4 	bl	d5378 <HAL_I2C_Init>
}
   d5c10:	4620      	mov	r0, r4
   d5c12:	bd10      	pop	{r4, pc}
   d5c14:	000d6764 	.word	0x000d6764

000d5c18 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5c18:	2100      	movs	r1, #0
   d5c1a:	7c00      	ldrb	r0, [r0, #16]
   d5c1c:	f7ff bba4 	b.w	d5368 <HAL_I2C_Is_Enabled>

000d5c20 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c20:	2200      	movs	r2, #0
   d5c22:	4611      	mov	r1, r2
   d5c24:	6840      	ldr	r0, [r0, #4]
   d5c26:	f7ff bc4b 	b.w	d54c0 <network_listening>

000d5c2a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c2a:	2200      	movs	r2, #0
   d5c2c:	4611      	mov	r1, r2
   d5c2e:	6840      	ldr	r0, [r0, #4]
   d5c30:	f7ff bc56 	b.w	d54e0 <network_get_listen_timeout>

000d5c34 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5c34:	2200      	movs	r2, #0
   d5c36:	6840      	ldr	r0, [r0, #4]
   d5c38:	f7ff bc4a 	b.w	d54d0 <network_set_listen_timeout>

000d5c3c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c3c:	2200      	movs	r2, #0
   d5c3e:	f081 0101 	eor.w	r1, r1, #1
   d5c42:	6840      	ldr	r0, [r0, #4]
   d5c44:	f7ff bc34 	b.w	d54b0 <network_listen>

000d5c48 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5c48:	2300      	movs	r3, #0
   d5c4a:	461a      	mov	r2, r3
   d5c4c:	2101      	movs	r1, #1
   d5c4e:	6840      	ldr	r0, [r0, #4]
   d5c50:	f7ff bc26 	b.w	d54a0 <network_off>

000d5c54 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5c54:	2300      	movs	r3, #0
   d5c56:	461a      	mov	r2, r3
   d5c58:	4619      	mov	r1, r3
   d5c5a:	6840      	ldr	r0, [r0, #4]
   d5c5c:	f7ff bc18 	b.w	d5490 <network_on>

000d5c60 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5c60:	2200      	movs	r2, #0
   d5c62:	4611      	mov	r1, r2
   d5c64:	6840      	ldr	r0, [r0, #4]
   d5c66:	f7ff bc0b 	b.w	d5480 <network_ready>

000d5c6a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5c6a:	2200      	movs	r2, #0
   d5c6c:	4611      	mov	r1, r2
   d5c6e:	6840      	ldr	r0, [r0, #4]
   d5c70:	f7ff bbf6 	b.w	d5460 <network_connecting>

000d5c74 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c74:	2200      	movs	r2, #0
   d5c76:	2102      	movs	r1, #2
   d5c78:	6840      	ldr	r0, [r0, #4]
   d5c7a:	f7ff bbf9 	b.w	d5470 <network_disconnect>

000d5c7e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c7e:	2300      	movs	r3, #0
   d5c80:	461a      	mov	r2, r3
   d5c82:	6840      	ldr	r0, [r0, #4]
   d5c84:	f7ff bbe4 	b.w	d5450 <network_connect>

000d5c88 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5c88:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c8a:	4605      	mov	r5, r0
   d5c8c:	b188      	cbz	r0, d5cb2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c8e:	6804      	ldr	r4, [r0, #0]
   d5c90:	b14c      	cbz	r4, d5ca6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5c92:	68a3      	ldr	r3, [r4, #8]
   d5c94:	b11b      	cbz	r3, d5c9e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c96:	2203      	movs	r2, #3
   d5c98:	4621      	mov	r1, r4
   d5c9a:	4620      	mov	r0, r4
   d5c9c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c9e:	2110      	movs	r1, #16
   d5ca0:	4620      	mov	r0, r4
   d5ca2:	f000 fa1f 	bl	d60e4 <_ZdlPvj>
   d5ca6:	4628      	mov	r0, r5
   d5ca8:	2114      	movs	r1, #20
      }
   d5caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cae:	f000 ba19 	b.w	d60e4 <_ZdlPvj>
   d5cb2:	bd38      	pop	{r3, r4, r5, pc}

000d5cb4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5cb4:	b110      	cbz	r0, d5cbc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5cb6:	6803      	ldr	r3, [r0, #0]
   d5cb8:	685b      	ldr	r3, [r3, #4]
   d5cba:	4718      	bx	r3
   d5cbc:	4770      	bx	lr

000d5cbe <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5cbe:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5cc0:	6803      	ldr	r3, [r0, #0]
   d5cc2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5cc4:	b1bb      	cbz	r3, d5cf6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5cc6:	6858      	ldr	r0, [r3, #4]
   d5cc8:	f7ff fab6 	bl	d5238 <os_thread_is_current>
   d5ccc:	b978      	cbnz	r0, d5cee <_ZN6ThreadD1Ev+0x30>
   d5cce:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5cd0:	7c5a      	ldrb	r2, [r3, #17]
   d5cd2:	b912      	cbnz	r2, d5cda <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5cd4:	6858      	ldr	r0, [r3, #4]
   d5cd6:	f7ff fab7 	bl	d5248 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5cda:	6823      	ldr	r3, [r4, #0]
   d5cdc:	6858      	ldr	r0, [r3, #4]
   d5cde:	f7ff fabb 	bl	d5258 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ce2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5ce4:	2300      	movs	r3, #0
   d5ce6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5ce8:	b128      	cbz	r0, d5cf6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5cea:	f7ff ffcd 	bl	d5c88 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5cee:	6820      	ldr	r0, [r4, #0]
   d5cf0:	b108      	cbz	r0, d5cf6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5cf2:	f7ff ffc9 	bl	d5c88 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5cf6:	4620      	mov	r0, r4
   d5cf8:	bd10      	pop	{r4, pc}

000d5cfa <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5cfa:	b538      	push	{r3, r4, r5, lr}
   d5cfc:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5cfe:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5d02:	b108      	cbz	r0, d5d08 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5d04:	f7fe f9c9 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5d08:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5d0c:	b108      	cbz	r0, d5d12 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5d0e:	f7ff fab3 	bl	d5278 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d12:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5d16:	b135      	cbz	r5, d5d26 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d18:	4628      	mov	r0, r5
   d5d1a:	f7ff ffd0 	bl	d5cbe <_ZN6ThreadD1Ev>
   d5d1e:	2104      	movs	r1, #4
   d5d20:	4628      	mov	r0, r5
   d5d22:	f000 f9df 	bl	d60e4 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d26:	6820      	ldr	r0, [r4, #0]
   d5d28:	b108      	cbz	r0, d5d2e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5d2a:	f7ff ffc3 	bl	d5cb4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5d2e:	4620      	mov	r0, r4
   d5d30:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5d34 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5d34:	b510      	push	{r4, lr}
   d5d36:	4b04      	ldr	r3, [pc, #16]	; (d5d48 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5d38:	4604      	mov	r4, r0
   d5d3a:	f840 3b08 	str.w	r3, [r0], #8
   d5d3e:	f7ff ffdc 	bl	d5cfa <_ZN5spark11MeshPublishD1Ev>
   d5d42:	4620      	mov	r0, r4
   d5d44:	bd10      	pop	{r4, pc}
   d5d46:	bf00      	nop
   d5d48:	000d678c 	.word	0x000d678c

000d5d4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5d4c:	b538      	push	{r3, r4, r5, lr}
   d5d4e:	4c0e      	ldr	r4, [pc, #56]	; (d5d88 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5d50:	4b0e      	ldr	r3, [pc, #56]	; (d5d8c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5d52:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5d54:	2500      	movs	r5, #0
   d5d56:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5d58:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5d5c:	6063      	str	r3, [r4, #4]
   d5d5e:	60a5      	str	r5, [r4, #8]
   d5d60:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5d64:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5d68:	f7ff fa7e 	bl	d5268 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5d6c:	4b08      	ldr	r3, [pc, #32]	; (d5d90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5d6e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5d72:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5d76:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5d78:	4620      	mov	r0, r4
   d5d7a:	4a06      	ldr	r2, [pc, #24]	; (d5d94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5d7c:	4906      	ldr	r1, [pc, #24]	; (d5d98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5d82:	f000 b9a1 	b.w	d60c8 <__aeabi_atexit>
   d5d86:	bf00      	nop
   d5d88:	2003e54c 	.word	0x2003e54c
   d5d8c:	000d67f4 	.word	0x000d67f4
   d5d90:	000d678c 	.word	0x000d678c
   d5d94:	2003e33c 	.word	0x2003e33c
   d5d98:	000d5d35 	.word	0x000d5d35

000d5d9c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5d9c:	2200      	movs	r2, #0
   d5d9e:	4611      	mov	r1, r2
   d5da0:	6840      	ldr	r0, [r0, #4]
   d5da2:	f7ff bb6d 	b.w	d5480 <network_ready>

000d5da6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5da6:	2200      	movs	r2, #0
   d5da8:	4611      	mov	r1, r2
   d5daa:	6840      	ldr	r0, [r0, #4]
   d5dac:	f7ff bb88 	b.w	d54c0 <network_listening>

000d5db0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5db0:	2200      	movs	r2, #0
   d5db2:	4611      	mov	r1, r2
   d5db4:	6840      	ldr	r0, [r0, #4]
   d5db6:	f7ff bb93 	b.w	d54e0 <network_get_listen_timeout>

000d5dba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5dba:	2200      	movs	r2, #0
   d5dbc:	6840      	ldr	r0, [r0, #4]
   d5dbe:	f7ff bb87 	b.w	d54d0 <network_set_listen_timeout>

000d5dc2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5dc2:	2200      	movs	r2, #0
   d5dc4:	f081 0101 	eor.w	r1, r1, #1
   d5dc8:	6840      	ldr	r0, [r0, #4]
   d5dca:	f7ff bb71 	b.w	d54b0 <network_listen>

000d5dce <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5dce:	2300      	movs	r3, #0
   d5dd0:	461a      	mov	r2, r3
   d5dd2:	4619      	mov	r1, r3
   d5dd4:	6840      	ldr	r0, [r0, #4]
   d5dd6:	f7ff bb63 	b.w	d54a0 <network_off>

000d5dda <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5dda:	2300      	movs	r3, #0
   d5ddc:	461a      	mov	r2, r3
   d5dde:	4619      	mov	r1, r3
   d5de0:	6840      	ldr	r0, [r0, #4]
   d5de2:	f7ff bb55 	b.w	d5490 <network_on>

000d5de6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5de6:	2200      	movs	r2, #0
   d5de8:	4611      	mov	r1, r2
   d5dea:	6840      	ldr	r0, [r0, #4]
   d5dec:	f7ff bb38 	b.w	d5460 <network_connecting>

000d5df0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5df0:	2200      	movs	r2, #0
   d5df2:	2102      	movs	r1, #2
   d5df4:	6840      	ldr	r0, [r0, #4]
   d5df6:	f7ff bb3b 	b.w	d5470 <network_disconnect>

000d5dfa <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5dfa:	2300      	movs	r3, #0
   d5dfc:	461a      	mov	r2, r3
   d5dfe:	6840      	ldr	r0, [r0, #4]
   d5e00:	f7ff bb26 	b.w	d5450 <network_connect>

000d5e04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5e04:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5e06:	2204      	movs	r2, #4
   d5e08:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5e0a:	4a02      	ldr	r2, [pc, #8]	; (d5e14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5e0c:	601a      	str	r2, [r3, #0]
   d5e0e:	4770      	bx	lr
   d5e10:	2003e720 	.word	0x2003e720
   d5e14:	000d67c0 	.word	0x000d67c0

000d5e18 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5e18:	2300      	movs	r3, #0
   d5e1a:	461a      	mov	r2, r3
   d5e1c:	6840      	ldr	r0, [r0, #4]
   d5e1e:	f7ff bb17 	b.w	d5450 <network_connect>

000d5e22 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5e22:	2200      	movs	r2, #0
   d5e24:	2102      	movs	r1, #2
   d5e26:	6840      	ldr	r0, [r0, #4]
   d5e28:	f7ff bb22 	b.w	d5470 <network_disconnect>

000d5e2c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5e2c:	2200      	movs	r2, #0
   d5e2e:	4611      	mov	r1, r2
   d5e30:	6840      	ldr	r0, [r0, #4]
   d5e32:	f7ff bb15 	b.w	d5460 <network_connecting>

000d5e36 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5e36:	2200      	movs	r2, #0
   d5e38:	4611      	mov	r1, r2
   d5e3a:	6840      	ldr	r0, [r0, #4]
   d5e3c:	f7ff bb20 	b.w	d5480 <network_ready>

000d5e40 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5e40:	2300      	movs	r3, #0
   d5e42:	461a      	mov	r2, r3
   d5e44:	4619      	mov	r1, r3
   d5e46:	6840      	ldr	r0, [r0, #4]
   d5e48:	f7ff bb22 	b.w	d5490 <network_on>

000d5e4c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5e4c:	2300      	movs	r3, #0
   d5e4e:	461a      	mov	r2, r3
   d5e50:	4619      	mov	r1, r3
   d5e52:	6840      	ldr	r0, [r0, #4]
   d5e54:	f7ff bb24 	b.w	d54a0 <network_off>

000d5e58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5e58:	2200      	movs	r2, #0
   d5e5a:	f081 0101 	eor.w	r1, r1, #1
   d5e5e:	6840      	ldr	r0, [r0, #4]
   d5e60:	f7ff bb26 	b.w	d54b0 <network_listen>

000d5e64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5e64:	2200      	movs	r2, #0
   d5e66:	6840      	ldr	r0, [r0, #4]
   d5e68:	f7ff bb32 	b.w	d54d0 <network_set_listen_timeout>

000d5e6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5e6c:	2200      	movs	r2, #0
   d5e6e:	4611      	mov	r1, r2
   d5e70:	6840      	ldr	r0, [r0, #4]
   d5e72:	f7ff bb35 	b.w	d54e0 <network_get_listen_timeout>

000d5e76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5e76:	2200      	movs	r2, #0
   d5e78:	4611      	mov	r1, r2
   d5e7a:	6840      	ldr	r0, [r0, #4]
   d5e7c:	f7ff bb20 	b.w	d54c0 <network_listening>

000d5e80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e84:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e86:	b095      	sub	sp, #84	; 0x54
   d5e88:	4616      	mov	r6, r2
   d5e8a:	460d      	mov	r5, r1
   d5e8c:	4607      	mov	r7, r0
    IPAddress addr;
   d5e8e:	f7ff fd3d 	bl	d590c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5e92:	4621      	mov	r1, r4
   d5e94:	2220      	movs	r2, #32
   d5e96:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e98:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5e9a:	f000 fa98 	bl	d63ce <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5e9e:	2340      	movs	r3, #64	; 0x40
   d5ea0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5ea2:	4621      	mov	r1, r4
   d5ea4:	466b      	mov	r3, sp
   d5ea6:	aa0c      	add	r2, sp, #48	; 0x30
   d5ea8:	4630      	mov	r0, r6
   d5eaa:	f7ff f945 	bl	d5138 <netdb_getaddrinfo>
    if (!r) {
   d5eae:	4604      	mov	r4, r0
   d5eb0:	2800      	cmp	r0, #0
   d5eb2:	d144      	bne.n	d5f3e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5eb4:	4602      	mov	r2, r0
   d5eb6:	2101      	movs	r1, #1
   d5eb8:	6868      	ldr	r0, [r5, #4]
   d5eba:	f7ff fae1 	bl	d5480 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ebe:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ec0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ec2:	4622      	mov	r2, r4
   d5ec4:	6868      	ldr	r0, [r5, #4]
   d5ec6:	f7ff fadb 	bl	d5480 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5eca:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ecc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5ece:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ed0:	2e00      	cmp	r6, #0
   d5ed2:	d034      	beq.n	d5f3e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5ed4:	2900      	cmp	r1, #0
   d5ed6:	d132      	bne.n	d5f3e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5ed8:	6873      	ldr	r3, [r6, #4]
   d5eda:	2b02      	cmp	r3, #2
   d5edc:	d002      	beq.n	d5ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5ede:	2b0a      	cmp	r3, #10
   d5ee0:	d009      	beq.n	d5ef6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5ee2:	e02a      	b.n	d5f3a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5ee4:	f1b8 0f00 	cmp.w	r8, #0
   d5ee8:	d027      	beq.n	d5f3a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5eea:	6971      	ldr	r1, [r6, #20]
   d5eec:	4638      	mov	r0, r7
   d5eee:	3104      	adds	r1, #4
   d5ef0:	f7ff fd39 	bl	d5966 <_ZN9IPAddressaSEPKh>
   d5ef4:	e020      	b.n	d5f38 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5ef6:	f1b9 0f00 	cmp.w	r9, #0
   d5efa:	d01e      	beq.n	d5f3a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5efc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5efe:	2211      	movs	r2, #17
   d5f00:	a801      	add	r0, sp, #4
   d5f02:	f000 fa64 	bl	d63ce <memset>
                    a.v = 6;
   d5f06:	2306      	movs	r3, #6
   d5f08:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5f0c:	ad01      	add	r5, sp, #4
   d5f0e:	f104 0308 	add.w	r3, r4, #8
   d5f12:	3418      	adds	r4, #24
   d5f14:	6818      	ldr	r0, [r3, #0]
   d5f16:	6859      	ldr	r1, [r3, #4]
   d5f18:	462a      	mov	r2, r5
   d5f1a:	c203      	stmia	r2!, {r0, r1}
   d5f1c:	3308      	adds	r3, #8
   d5f1e:	42a3      	cmp	r3, r4
   d5f20:	4615      	mov	r5, r2
   d5f22:	d1f7      	bne.n	d5f14 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5f24:	a901      	add	r1, sp, #4
   d5f26:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5f28:	ad07      	add	r5, sp, #28
   d5f2a:	f7ff fcfd 	bl	d5928 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f30:	1d3c      	adds	r4, r7, #4
   d5f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5f34:	682b      	ldr	r3, [r5, #0]
   d5f36:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5f38:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f3a:	69f6      	ldr	r6, [r6, #28]
   d5f3c:	e7c8      	b.n	d5ed0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5f3e:	9800      	ldr	r0, [sp, #0]
   d5f40:	f7ff f8f2 	bl	d5128 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5f44:	4638      	mov	r0, r7
   d5f46:	b015      	add	sp, #84	; 0x54
   d5f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5f4c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5f4c:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5f4e:	4a03      	ldr	r2, [pc, #12]	; (d5f5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5f50:	601a      	str	r2, [r3, #0]
   d5f52:	2200      	movs	r2, #0
   d5f54:	605a      	str	r2, [r3, #4]
   d5f56:	4770      	bx	lr
   d5f58:	2003e728 	.word	0x2003e728
   d5f5c:	000d67f4 	.word	0x000d67f4

000d5f60 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5f60:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5f62:	4e18      	ldr	r6, [pc, #96]	; (d5fc4 <pinAvailable+0x64>)
   d5f64:	6831      	ldr	r1, [r6, #0]
   d5f66:	f011 0501 	ands.w	r5, r1, #1
   d5f6a:	4604      	mov	r4, r0
   d5f6c:	d10a      	bne.n	d5f84 <pinAvailable+0x24>
   d5f6e:	4630      	mov	r0, r6
   d5f70:	f7fe f895 	bl	d409e <__cxa_guard_acquire>
   d5f74:	b130      	cbz	r0, d5f84 <pinAvailable+0x24>
   d5f76:	4629      	mov	r1, r5
   d5f78:	4813      	ldr	r0, [pc, #76]	; (d5fc8 <pinAvailable+0x68>)
   d5f7a:	f7ff fb15 	bl	d55a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5f7e:	4630      	mov	r0, r6
   d5f80:	f7fe f892 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5f84:	4810      	ldr	r0, [pc, #64]	; (d5fc8 <pinAvailable+0x68>)
   d5f86:	f7ff fb30 	bl	d55ea <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5f8a:	b128      	cbz	r0, d5f98 <pinAvailable+0x38>
   d5f8c:	f1a4 030b 	sub.w	r3, r4, #11
   d5f90:	2b02      	cmp	r3, #2
   d5f92:	d801      	bhi.n	d5f98 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5f94:	2000      	movs	r0, #0
   d5f96:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5f98:	f000 f870 	bl	d607c <_Z19__fetch_global_Wirev>
   d5f9c:	f7ff fe3c 	bl	d5c18 <_ZN7TwoWire9isEnabledEv>
   d5fa0:	b108      	cbz	r0, d5fa6 <pinAvailable+0x46>
   d5fa2:	2c01      	cmp	r4, #1
   d5fa4:	d9f6      	bls.n	d5f94 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5fa6:	f7ff fdd3 	bl	d5b50 <_Z22__fetch_global_Serial1v>
   d5faa:	f7ff fdcd 	bl	d5b48 <_ZN11USARTSerial9isEnabledEv>
   d5fae:	b118      	cbz	r0, d5fb8 <pinAvailable+0x58>
   d5fb0:	f1a4 0309 	sub.w	r3, r4, #9
   d5fb4:	2b01      	cmp	r3, #1
   d5fb6:	d9ed      	bls.n	d5f94 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5fb8:	2c23      	cmp	r4, #35	; 0x23
   d5fba:	bf8c      	ite	hi
   d5fbc:	2000      	movhi	r0, #0
   d5fbe:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5fc0:	bd70      	pop	{r4, r5, r6, pc}
   d5fc2:	bf00      	nop
   d5fc4:	2003e340 	.word	0x2003e340
   d5fc8:	2003e344 	.word	0x2003e344

000d5fcc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5fcc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5fce:	b538      	push	{r3, r4, r5, lr}
   d5fd0:	4604      	mov	r4, r0
   d5fd2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5fd4:	d80a      	bhi.n	d5fec <pinMode+0x20>
   d5fd6:	29ff      	cmp	r1, #255	; 0xff
   d5fd8:	d008      	beq.n	d5fec <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5fda:	f7ff ffc1 	bl	d5f60 <pinAvailable>
   d5fde:	b128      	cbz	r0, d5fec <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5fe0:	4629      	mov	r1, r5
   d5fe2:	4620      	mov	r0, r4
}
   d5fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5fe8:	f7ff b8b6 	b.w	d5158 <HAL_Pin_Mode>
   d5fec:	bd38      	pop	{r3, r4, r5, pc}

000d5fee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5fee:	b538      	push	{r3, r4, r5, lr}
   d5ff0:	4604      	mov	r4, r0
   d5ff2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5ff4:	f7ff f8b8 	bl	d5168 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5ff8:	28ff      	cmp	r0, #255	; 0xff
   d5ffa:	d010      	beq.n	d601e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5ffc:	2806      	cmp	r0, #6
   d5ffe:	d804      	bhi.n	d600a <digitalWrite+0x1c>
   d6000:	234d      	movs	r3, #77	; 0x4d
   d6002:	fa23 f000 	lsr.w	r0, r3, r0
   d6006:	07c3      	lsls	r3, r0, #31
   d6008:	d409      	bmi.n	d601e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d600a:	4620      	mov	r0, r4
   d600c:	f7ff ffa8 	bl	d5f60 <pinAvailable>
   d6010:	b128      	cbz	r0, d601e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6012:	4629      	mov	r1, r5
   d6014:	4620      	mov	r0, r4
}
   d6016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d601a:	f7ff b8ad 	b.w	d5178 <HAL_GPIO_Write>
   d601e:	bd38      	pop	{r3, r4, r5, pc}

000d6020 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6020:	b510      	push	{r4, lr}
   d6022:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6024:	f7ff f8a0 	bl	d5168 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6028:	3804      	subs	r0, #4
   d602a:	b2c0      	uxtb	r0, r0
   d602c:	2801      	cmp	r0, #1
   d602e:	d908      	bls.n	d6042 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6030:	4620      	mov	r0, r4
   d6032:	f7ff ff95 	bl	d5f60 <pinAvailable>
   d6036:	b120      	cbz	r0, d6042 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6038:	4620      	mov	r0, r4
}
   d603a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d603e:	f7ff b8a3 	b.w	d5188 <HAL_GPIO_Read>
}
   d6042:	2000      	movs	r0, #0
   d6044:	bd10      	pop	{r4, pc}
	...

000d6048 <_Z17acquireWireBufferv>:
   d6048:	b570      	push	{r4, r5, r6, lr}
   d604a:	4604      	mov	r4, r0
   d604c:	2514      	movs	r5, #20
   d604e:	462a      	mov	r2, r5
   d6050:	4e09      	ldr	r6, [pc, #36]	; (d6078 <_Z17acquireWireBufferv+0x30>)
   d6052:	2100      	movs	r1, #0
   d6054:	f000 f9bb 	bl	d63ce <memset>
   d6058:	8025      	strh	r5, [r4, #0]
   d605a:	2520      	movs	r5, #32
   d605c:	4631      	mov	r1, r6
   d605e:	60a5      	str	r5, [r4, #8]
   d6060:	6125      	str	r5, [r4, #16]
   d6062:	4628      	mov	r0, r5
   d6064:	f000 f840 	bl	d60e8 <_ZnajRKSt9nothrow_t>
   d6068:	4631      	mov	r1, r6
   d606a:	6060      	str	r0, [r4, #4]
   d606c:	4628      	mov	r0, r5
   d606e:	f000 f83b 	bl	d60e8 <_ZnajRKSt9nothrow_t>
   d6072:	60e0      	str	r0, [r4, #12]
   d6074:	4620      	mov	r0, r4
   d6076:	bd70      	pop	{r4, r5, r6, pc}
   d6078:	000d6820 	.word	0x000d6820

000d607c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d607c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d607e:	4d0e      	ldr	r5, [pc, #56]	; (d60b8 <_Z19__fetch_global_Wirev+0x3c>)
   d6080:	6829      	ldr	r1, [r5, #0]
   d6082:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6086:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6088:	d113      	bne.n	d60b2 <_Z19__fetch_global_Wirev+0x36>
   d608a:	4628      	mov	r0, r5
   d608c:	f7fe f807 	bl	d409e <__cxa_guard_acquire>
   d6090:	b178      	cbz	r0, d60b2 <_Z19__fetch_global_Wirev+0x36>
   d6092:	a801      	add	r0, sp, #4
   d6094:	f7ff ffd8 	bl	d6048 <_Z17acquireWireBufferv>
   d6098:	aa01      	add	r2, sp, #4
   d609a:	4621      	mov	r1, r4
   d609c:	4807      	ldr	r0, [pc, #28]	; (d60bc <_Z19__fetch_global_Wirev+0x40>)
   d609e:	f7ff fda9 	bl	d5bf4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d60a2:	4628      	mov	r0, r5
   d60a4:	f7fe f800 	bl	d40a8 <__cxa_guard_release>
   d60a8:	4a05      	ldr	r2, [pc, #20]	; (d60c0 <_Z19__fetch_global_Wirev+0x44>)
   d60aa:	4906      	ldr	r1, [pc, #24]	; (d60c4 <_Z19__fetch_global_Wirev+0x48>)
   d60ac:	4803      	ldr	r0, [pc, #12]	; (d60bc <_Z19__fetch_global_Wirev+0x40>)
   d60ae:	f000 f80b 	bl	d60c8 <__aeabi_atexit>
	return wire;
}
   d60b2:	4802      	ldr	r0, [pc, #8]	; (d60bc <_Z19__fetch_global_Wirev+0x40>)
   d60b4:	b007      	add	sp, #28
   d60b6:	bd30      	pop	{r4, r5, pc}
   d60b8:	2003e734 	.word	0x2003e734
   d60bc:	2003e738 	.word	0x2003e738
   d60c0:	2003e33c 	.word	0x2003e33c
   d60c4:	000d5b9d 	.word	0x000d5b9d

000d60c8 <__aeabi_atexit>:
   d60c8:	460b      	mov	r3, r1
   d60ca:	4601      	mov	r1, r0
   d60cc:	4618      	mov	r0, r3
   d60ce:	f000 b965 	b.w	d639c <__cxa_atexit>
	...

000d60d4 <_ZSt15get_new_handlerv>:
   d60d4:	4b02      	ldr	r3, [pc, #8]	; (d60e0 <_ZSt15get_new_handlerv+0xc>)
   d60d6:	6818      	ldr	r0, [r3, #0]
   d60d8:	f3bf 8f5f 	dmb	sy
   d60dc:	4770      	bx	lr
   d60de:	bf00      	nop
   d60e0:	2003e74c 	.word	0x2003e74c

000d60e4 <_ZdlPvj>:
   d60e4:	f7fd bfd7 	b.w	d4096 <_ZdlPv>

000d60e8 <_ZnajRKSt9nothrow_t>:
   d60e8:	f000 b800 	b.w	d60ec <_ZnwjRKSt9nothrow_t>

000d60ec <_ZnwjRKSt9nothrow_t>:
   d60ec:	b510      	push	{r4, lr}
   d60ee:	2800      	cmp	r0, #0
   d60f0:	bf14      	ite	ne
   d60f2:	4604      	movne	r4, r0
   d60f4:	2401      	moveq	r4, #1
   d60f6:	4620      	mov	r0, r4
   d60f8:	f7ff fa02 	bl	d5500 <malloc>
   d60fc:	b920      	cbnz	r0, d6108 <_ZnwjRKSt9nothrow_t+0x1c>
   d60fe:	f7ff ffe9 	bl	d60d4 <_ZSt15get_new_handlerv>
   d6102:	b108      	cbz	r0, d6108 <_ZnwjRKSt9nothrow_t+0x1c>
   d6104:	4780      	blx	r0
   d6106:	e7f6      	b.n	d60f6 <_ZnwjRKSt9nothrow_t+0xa>
   d6108:	bd10      	pop	{r4, pc}
	...

000d610c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d610c:	4b18      	ldr	r3, [pc, #96]	; (d6170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d610e:	681a      	ldr	r2, [r3, #0]
   d6110:	07d1      	lsls	r1, r2, #31
   d6112:	bf5c      	itt	pl
   d6114:	2201      	movpl	r2, #1
   d6116:	601a      	strpl	r2, [r3, #0]
   d6118:	4b16      	ldr	r3, [pc, #88]	; (d6174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d611a:	681a      	ldr	r2, [r3, #0]
   d611c:	07d2      	lsls	r2, r2, #31
   d611e:	bf5c      	itt	pl
   d6120:	2201      	movpl	r2, #1
   d6122:	601a      	strpl	r2, [r3, #0]
   d6124:	4b14      	ldr	r3, [pc, #80]	; (d6178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6126:	681a      	ldr	r2, [r3, #0]
   d6128:	07d0      	lsls	r0, r2, #31
   d612a:	bf5c      	itt	pl
   d612c:	2201      	movpl	r2, #1
   d612e:	601a      	strpl	r2, [r3, #0]
   d6130:	4b12      	ldr	r3, [pc, #72]	; (d617c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6132:	681a      	ldr	r2, [r3, #0]
   d6134:	07d1      	lsls	r1, r2, #31
   d6136:	bf5c      	itt	pl
   d6138:	2201      	movpl	r2, #1
   d613a:	601a      	strpl	r2, [r3, #0]
   d613c:	4b10      	ldr	r3, [pc, #64]	; (d6180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d613e:	681a      	ldr	r2, [r3, #0]
   d6140:	07d2      	lsls	r2, r2, #31
   d6142:	bf5c      	itt	pl
   d6144:	2201      	movpl	r2, #1
   d6146:	601a      	strpl	r2, [r3, #0]
   d6148:	4b0e      	ldr	r3, [pc, #56]	; (d6184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d614a:	681a      	ldr	r2, [r3, #0]
   d614c:	07d0      	lsls	r0, r2, #31
   d614e:	bf5c      	itt	pl
   d6150:	2201      	movpl	r2, #1
   d6152:	601a      	strpl	r2, [r3, #0]
   d6154:	4b0c      	ldr	r3, [pc, #48]	; (d6188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6156:	681a      	ldr	r2, [r3, #0]
   d6158:	07d1      	lsls	r1, r2, #31
   d615a:	bf5c      	itt	pl
   d615c:	2201      	movpl	r2, #1
   d615e:	601a      	strpl	r2, [r3, #0]
   d6160:	4b0a      	ldr	r3, [pc, #40]	; (d618c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6162:	681a      	ldr	r2, [r3, #0]
   d6164:	07d2      	lsls	r2, r2, #31
   d6166:	bf5c      	itt	pl
   d6168:	2201      	movpl	r2, #1
   d616a:	601a      	strpl	r2, [r3, #0]
   d616c:	4770      	bx	lr
   d616e:	bf00      	nop
   d6170:	2003e76c 	.word	0x2003e76c
   d6174:	2003e768 	.word	0x2003e768
   d6178:	2003e764 	.word	0x2003e764
   d617c:	2003e760 	.word	0x2003e760
   d6180:	2003e75c 	.word	0x2003e75c
   d6184:	2003e758 	.word	0x2003e758
   d6188:	2003e754 	.word	0x2003e754
   d618c:	2003e750 	.word	0x2003e750

000d6190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6190:	4b24      	ldr	r3, [pc, #144]	; (d6224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6192:	681a      	ldr	r2, [r3, #0]
   d6194:	07d0      	lsls	r0, r2, #31
   d6196:	bf5c      	itt	pl
   d6198:	2201      	movpl	r2, #1
   d619a:	601a      	strpl	r2, [r3, #0]
   d619c:	4b22      	ldr	r3, [pc, #136]	; (d6228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d619e:	681a      	ldr	r2, [r3, #0]
   d61a0:	07d1      	lsls	r1, r2, #31
   d61a2:	bf5c      	itt	pl
   d61a4:	2201      	movpl	r2, #1
   d61a6:	601a      	strpl	r2, [r3, #0]
   d61a8:	4b20      	ldr	r3, [pc, #128]	; (d622c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d61aa:	681a      	ldr	r2, [r3, #0]
   d61ac:	07d2      	lsls	r2, r2, #31
   d61ae:	bf5c      	itt	pl
   d61b0:	2201      	movpl	r2, #1
   d61b2:	601a      	strpl	r2, [r3, #0]
   d61b4:	4b1e      	ldr	r3, [pc, #120]	; (d6230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d61b6:	681a      	ldr	r2, [r3, #0]
   d61b8:	07d0      	lsls	r0, r2, #31
   d61ba:	bf5c      	itt	pl
   d61bc:	2201      	movpl	r2, #1
   d61be:	601a      	strpl	r2, [r3, #0]
   d61c0:	4b1c      	ldr	r3, [pc, #112]	; (d6234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d61c2:	681a      	ldr	r2, [r3, #0]
   d61c4:	07d1      	lsls	r1, r2, #31
   d61c6:	bf5c      	itt	pl
   d61c8:	2201      	movpl	r2, #1
   d61ca:	601a      	strpl	r2, [r3, #0]
   d61cc:	4b1a      	ldr	r3, [pc, #104]	; (d6238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d61ce:	681a      	ldr	r2, [r3, #0]
   d61d0:	07d2      	lsls	r2, r2, #31
   d61d2:	bf5c      	itt	pl
   d61d4:	2201      	movpl	r2, #1
   d61d6:	601a      	strpl	r2, [r3, #0]
   d61d8:	4b18      	ldr	r3, [pc, #96]	; (d623c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d61da:	681a      	ldr	r2, [r3, #0]
   d61dc:	07d0      	lsls	r0, r2, #31
   d61de:	bf5c      	itt	pl
   d61e0:	2201      	movpl	r2, #1
   d61e2:	601a      	strpl	r2, [r3, #0]
   d61e4:	4b16      	ldr	r3, [pc, #88]	; (d6240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d61e6:	681a      	ldr	r2, [r3, #0]
   d61e8:	07d1      	lsls	r1, r2, #31
   d61ea:	bf5c      	itt	pl
   d61ec:	2201      	movpl	r2, #1
   d61ee:	601a      	strpl	r2, [r3, #0]
   d61f0:	4b14      	ldr	r3, [pc, #80]	; (d6244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d61f2:	681a      	ldr	r2, [r3, #0]
   d61f4:	07d2      	lsls	r2, r2, #31
   d61f6:	bf5c      	itt	pl
   d61f8:	2201      	movpl	r2, #1
   d61fa:	601a      	strpl	r2, [r3, #0]
   d61fc:	4b12      	ldr	r3, [pc, #72]	; (d6248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d61fe:	681a      	ldr	r2, [r3, #0]
   d6200:	07d0      	lsls	r0, r2, #31
   d6202:	bf5c      	itt	pl
   d6204:	2201      	movpl	r2, #1
   d6206:	601a      	strpl	r2, [r3, #0]
   d6208:	4b10      	ldr	r3, [pc, #64]	; (d624c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d620a:	681a      	ldr	r2, [r3, #0]
   d620c:	07d1      	lsls	r1, r2, #31
   d620e:	bf5c      	itt	pl
   d6210:	2201      	movpl	r2, #1
   d6212:	601a      	strpl	r2, [r3, #0]
   d6214:	4b0e      	ldr	r3, [pc, #56]	; (d6250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6216:	681a      	ldr	r2, [r3, #0]
   d6218:	07d2      	lsls	r2, r2, #31
   d621a:	bf5c      	itt	pl
   d621c:	2201      	movpl	r2, #1
   d621e:	601a      	strpl	r2, [r3, #0]
   d6220:	4770      	bx	lr
   d6222:	bf00      	nop
   d6224:	2003e79c 	.word	0x2003e79c
   d6228:	2003e798 	.word	0x2003e798
   d622c:	2003e794 	.word	0x2003e794
   d6230:	2003e790 	.word	0x2003e790
   d6234:	2003e78c 	.word	0x2003e78c
   d6238:	2003e788 	.word	0x2003e788
   d623c:	2003e784 	.word	0x2003e784
   d6240:	2003e780 	.word	0x2003e780
   d6244:	2003e77c 	.word	0x2003e77c
   d6248:	2003e778 	.word	0x2003e778
   d624c:	2003e774 	.word	0x2003e774
   d6250:	2003e770 	.word	0x2003e770

000d6254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6254:	4b24      	ldr	r3, [pc, #144]	; (d62e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6256:	681a      	ldr	r2, [r3, #0]
   d6258:	07d0      	lsls	r0, r2, #31
   d625a:	bf5c      	itt	pl
   d625c:	2201      	movpl	r2, #1
   d625e:	601a      	strpl	r2, [r3, #0]
   d6260:	4b22      	ldr	r3, [pc, #136]	; (d62ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6262:	681a      	ldr	r2, [r3, #0]
   d6264:	07d1      	lsls	r1, r2, #31
   d6266:	bf5c      	itt	pl
   d6268:	2201      	movpl	r2, #1
   d626a:	601a      	strpl	r2, [r3, #0]
   d626c:	4b20      	ldr	r3, [pc, #128]	; (d62f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d626e:	681a      	ldr	r2, [r3, #0]
   d6270:	07d2      	lsls	r2, r2, #31
   d6272:	bf5c      	itt	pl
   d6274:	2201      	movpl	r2, #1
   d6276:	601a      	strpl	r2, [r3, #0]
   d6278:	4b1e      	ldr	r3, [pc, #120]	; (d62f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d627a:	681a      	ldr	r2, [r3, #0]
   d627c:	07d0      	lsls	r0, r2, #31
   d627e:	bf5c      	itt	pl
   d6280:	2201      	movpl	r2, #1
   d6282:	601a      	strpl	r2, [r3, #0]
   d6284:	4b1c      	ldr	r3, [pc, #112]	; (d62f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6286:	681a      	ldr	r2, [r3, #0]
   d6288:	07d1      	lsls	r1, r2, #31
   d628a:	bf5c      	itt	pl
   d628c:	2201      	movpl	r2, #1
   d628e:	601a      	strpl	r2, [r3, #0]
   d6290:	4b1a      	ldr	r3, [pc, #104]	; (d62fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6292:	681a      	ldr	r2, [r3, #0]
   d6294:	07d2      	lsls	r2, r2, #31
   d6296:	bf5c      	itt	pl
   d6298:	2201      	movpl	r2, #1
   d629a:	601a      	strpl	r2, [r3, #0]
   d629c:	4b18      	ldr	r3, [pc, #96]	; (d6300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d629e:	681a      	ldr	r2, [r3, #0]
   d62a0:	07d0      	lsls	r0, r2, #31
   d62a2:	bf5c      	itt	pl
   d62a4:	2201      	movpl	r2, #1
   d62a6:	601a      	strpl	r2, [r3, #0]
   d62a8:	4b16      	ldr	r3, [pc, #88]	; (d6304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d62aa:	681a      	ldr	r2, [r3, #0]
   d62ac:	07d1      	lsls	r1, r2, #31
   d62ae:	bf5c      	itt	pl
   d62b0:	2201      	movpl	r2, #1
   d62b2:	601a      	strpl	r2, [r3, #0]
   d62b4:	4b14      	ldr	r3, [pc, #80]	; (d6308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d62b6:	681a      	ldr	r2, [r3, #0]
   d62b8:	07d2      	lsls	r2, r2, #31
   d62ba:	bf5c      	itt	pl
   d62bc:	2201      	movpl	r2, #1
   d62be:	601a      	strpl	r2, [r3, #0]
   d62c0:	4b12      	ldr	r3, [pc, #72]	; (d630c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d62c2:	681a      	ldr	r2, [r3, #0]
   d62c4:	07d0      	lsls	r0, r2, #31
   d62c6:	bf5c      	itt	pl
   d62c8:	2201      	movpl	r2, #1
   d62ca:	601a      	strpl	r2, [r3, #0]
   d62cc:	4b10      	ldr	r3, [pc, #64]	; (d6310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d62ce:	681a      	ldr	r2, [r3, #0]
   d62d0:	07d1      	lsls	r1, r2, #31
   d62d2:	bf5c      	itt	pl
   d62d4:	2201      	movpl	r2, #1
   d62d6:	601a      	strpl	r2, [r3, #0]
   d62d8:	4b0e      	ldr	r3, [pc, #56]	; (d6314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d62da:	681a      	ldr	r2, [r3, #0]
   d62dc:	07d2      	lsls	r2, r2, #31
   d62de:	bf5c      	itt	pl
   d62e0:	2201      	movpl	r2, #1
   d62e2:	601a      	strpl	r2, [r3, #0]
   d62e4:	4770      	bx	lr
   d62e6:	bf00      	nop
   d62e8:	2003e7cc 	.word	0x2003e7cc
   d62ec:	2003e7c8 	.word	0x2003e7c8
   d62f0:	2003e7c4 	.word	0x2003e7c4
   d62f4:	2003e7c0 	.word	0x2003e7c0
   d62f8:	2003e7bc 	.word	0x2003e7bc
   d62fc:	2003e7b8 	.word	0x2003e7b8
   d6300:	2003e7b4 	.word	0x2003e7b4
   d6304:	2003e7b0 	.word	0x2003e7b0
   d6308:	2003e7ac 	.word	0x2003e7ac
   d630c:	2003e7a8 	.word	0x2003e7a8
   d6310:	2003e7a4 	.word	0x2003e7a4
   d6314:	2003e7a0 	.word	0x2003e7a0

000d6318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6318:	4b18      	ldr	r3, [pc, #96]	; (d637c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d631a:	681a      	ldr	r2, [r3, #0]
   d631c:	07d1      	lsls	r1, r2, #31
   d631e:	bf5c      	itt	pl
   d6320:	2201      	movpl	r2, #1
   d6322:	601a      	strpl	r2, [r3, #0]
   d6324:	4b16      	ldr	r3, [pc, #88]	; (d6380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6326:	681a      	ldr	r2, [r3, #0]
   d6328:	07d2      	lsls	r2, r2, #31
   d632a:	bf5c      	itt	pl
   d632c:	2201      	movpl	r2, #1
   d632e:	601a      	strpl	r2, [r3, #0]
   d6330:	4b14      	ldr	r3, [pc, #80]	; (d6384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6332:	681a      	ldr	r2, [r3, #0]
   d6334:	07d0      	lsls	r0, r2, #31
   d6336:	bf5c      	itt	pl
   d6338:	2201      	movpl	r2, #1
   d633a:	601a      	strpl	r2, [r3, #0]
   d633c:	4b12      	ldr	r3, [pc, #72]	; (d6388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d633e:	681a      	ldr	r2, [r3, #0]
   d6340:	07d1      	lsls	r1, r2, #31
   d6342:	bf5c      	itt	pl
   d6344:	2201      	movpl	r2, #1
   d6346:	601a      	strpl	r2, [r3, #0]
   d6348:	4b10      	ldr	r3, [pc, #64]	; (d638c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d634a:	681a      	ldr	r2, [r3, #0]
   d634c:	07d2      	lsls	r2, r2, #31
   d634e:	bf5c      	itt	pl
   d6350:	2201      	movpl	r2, #1
   d6352:	601a      	strpl	r2, [r3, #0]
   d6354:	4b0e      	ldr	r3, [pc, #56]	; (d6390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6356:	681a      	ldr	r2, [r3, #0]
   d6358:	07d0      	lsls	r0, r2, #31
   d635a:	bf5c      	itt	pl
   d635c:	2201      	movpl	r2, #1
   d635e:	601a      	strpl	r2, [r3, #0]
   d6360:	4b0c      	ldr	r3, [pc, #48]	; (d6394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6362:	681a      	ldr	r2, [r3, #0]
   d6364:	07d1      	lsls	r1, r2, #31
   d6366:	bf5c      	itt	pl
   d6368:	2201      	movpl	r2, #1
   d636a:	601a      	strpl	r2, [r3, #0]
   d636c:	4b0a      	ldr	r3, [pc, #40]	; (d6398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d636e:	681a      	ldr	r2, [r3, #0]
   d6370:	07d2      	lsls	r2, r2, #31
   d6372:	bf5c      	itt	pl
   d6374:	2201      	movpl	r2, #1
   d6376:	601a      	strpl	r2, [r3, #0]
   d6378:	4770      	bx	lr
   d637a:	bf00      	nop
   d637c:	2003e7ec 	.word	0x2003e7ec
   d6380:	2003e7e8 	.word	0x2003e7e8
   d6384:	2003e7e4 	.word	0x2003e7e4
   d6388:	2003e7e0 	.word	0x2003e7e0
   d638c:	2003e7dc 	.word	0x2003e7dc
   d6390:	2003e7d8 	.word	0x2003e7d8
   d6394:	2003e7d4 	.word	0x2003e7d4
   d6398:	2003e7d0 	.word	0x2003e7d0

000d639c <__cxa_atexit>:
   d639c:	b510      	push	{r4, lr}
   d639e:	4c05      	ldr	r4, [pc, #20]	; (d63b4 <__cxa_atexit+0x18>)
   d63a0:	4613      	mov	r3, r2
   d63a2:	b12c      	cbz	r4, d63b0 <__cxa_atexit+0x14>
   d63a4:	460a      	mov	r2, r1
   d63a6:	4601      	mov	r1, r0
   d63a8:	2002      	movs	r0, #2
   d63aa:	f3af 8000 	nop.w
   d63ae:	bd10      	pop	{r4, pc}
   d63b0:	4620      	mov	r0, r4
   d63b2:	bd10      	pop	{r4, pc}
   d63b4:	00000000 	.word	0x00000000

000d63b8 <memcpy>:
   d63b8:	b510      	push	{r4, lr}
   d63ba:	1e43      	subs	r3, r0, #1
   d63bc:	440a      	add	r2, r1
   d63be:	4291      	cmp	r1, r2
   d63c0:	d004      	beq.n	d63cc <memcpy+0x14>
   d63c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d63c6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d63ca:	e7f8      	b.n	d63be <memcpy+0x6>
   d63cc:	bd10      	pop	{r4, pc}

000d63ce <memset>:
   d63ce:	4402      	add	r2, r0
   d63d0:	4603      	mov	r3, r0
   d63d2:	4293      	cmp	r3, r2
   d63d4:	d002      	beq.n	d63dc <memset+0xe>
   d63d6:	f803 1b01 	strb.w	r1, [r3], #1
   d63da:	e7fa      	b.n	d63d2 <memset+0x4>
   d63dc:	4770      	bx	lr
	...

000d63e0 <srand>:
   d63e0:	b538      	push	{r3, r4, r5, lr}
   d63e2:	4b12      	ldr	r3, [pc, #72]	; (d642c <srand+0x4c>)
   d63e4:	681c      	ldr	r4, [r3, #0]
   d63e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d63e8:	4605      	mov	r5, r0
   d63ea:	b9d3      	cbnz	r3, d6422 <srand+0x42>
   d63ec:	2018      	movs	r0, #24
   d63ee:	f7ff f887 	bl	d5500 <malloc>
   d63f2:	f243 330e 	movw	r3, #13070	; 0x330e
   d63f6:	63a0      	str	r0, [r4, #56]	; 0x38
   d63f8:	8003      	strh	r3, [r0, #0]
   d63fa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d63fe:	8043      	strh	r3, [r0, #2]
   d6400:	f241 2334 	movw	r3, #4660	; 0x1234
   d6404:	8083      	strh	r3, [r0, #4]
   d6406:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d640a:	80c3      	strh	r3, [r0, #6]
   d640c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6410:	8103      	strh	r3, [r0, #8]
   d6412:	2305      	movs	r3, #5
   d6414:	8143      	strh	r3, [r0, #10]
   d6416:	230b      	movs	r3, #11
   d6418:	8183      	strh	r3, [r0, #12]
   d641a:	2201      	movs	r2, #1
   d641c:	2300      	movs	r3, #0
   d641e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6424:	2200      	movs	r2, #0
   d6426:	611d      	str	r5, [r3, #16]
   d6428:	615a      	str	r2, [r3, #20]
   d642a:	bd38      	pop	{r3, r4, r5, pc}
   d642c:	2003e338 	.word	0x2003e338

000d6430 <strlen>:
   d6430:	4603      	mov	r3, r0
   d6432:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6436:	2a00      	cmp	r2, #0
   d6438:	d1fb      	bne.n	d6432 <strlen+0x2>
   d643a:	1a18      	subs	r0, r3, r0
   d643c:	3801      	subs	r0, #1
   d643e:	4770      	bx	lr

000d6440 <dynalib_user>:
   d6440:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6450:	0000 0000 3020 4100 7475 6568 746e 6369     .... 0.Authentic
   d6460:	7461 6e69 2067 7375 6e69 2067 656b 2079     ating using key 
   d6470:	2e41 2e2e 5000 4443 415f 7475 6568 746e     A....PCD_Authent
   d6480:	6369 7461 2865 2029 6166 6c69 6465 203a     icate() failed: 
   d6490:	4300 7275 6572 746e 6420 7461 2061 6e69     .Current data in
   d64a0:	7320 6365 6f74 3a72 5200 6165 6964 676e      sector:.Reading
   d64b0:	6420 7461 2061 7266 6d6f 6220 6f6c 6b63      data from block
   d64c0:	0020 2e20 2e2e 4d00 4649 5241 5f45 6552      . ....MIFARE_Re
   d64d0:	6461 2928 6620 6961 656c 3a64 0020 6144     ad() failed: .Da
   d64e0:	6174 6920 206e 6c62 636f 206b 4100 7475     ta in block .Aut
   d64f0:	6568 746e 6369 7461 6e69 2067 6761 6961     henticating agai
   d6500:	206e 7375 6e69 2067 656b 2079 2e42 2e2e     n using key B...
   d6510:	5700 6972 6974 676e 6420 7461 2061 6e69     .Writing data in
   d6520:	6f74 6220 6f6c 6b63 0020 494d 4146 4552     to block .MIFARE
   d6530:	575f 6972 6574 2928 6620 6961 656c 3a64     _Write() failed:
   d6540:	0020 6154 2067 6f66 6e75 0064 494d 4146      .Tag found.MIFA
   d6550:	4552 525f 6165 2864 2029 6166 6c69 6465     RE_Read() failed
   d6560:	2d00 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     .---------------
   d6570:	2d2d 2d2d 2d2d 2d2d 2d2d 002d 6154 2067     -----------.Tag 
   d6580:	6f67 656e 0000 0000 c000 4001 1000 4002     gone.......@...@
   d6590:	2000 4002                                   . .@

000d6594 <CSWTCH.65>:
   d6594:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d65a4:	0050 0000                                   P...

000d65a8 <_ZTVN5spark13EthernetClassE>:
	...
   d65b0:	557f 000d 5575 000d 556b 000d 5561 000d     .U..uU..kU..aU..
   d65c0:	5555 000d 5549 000d 553d 000d 5535 000d     UU..IU..=U..5U..
   d65d0:	552b 000d 5521 000d 5e81 000d 6162 6475     +U..!U...^..baud
   d65e0:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d65f0:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6600:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6610:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6620:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6630:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6640:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6650:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d6660:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d6670:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d6680:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d6690:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d66a0:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d66b0:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d66c0:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d66d0:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d66e0:	7463 6d69 0065 0000                         ctime...

000d66e8 <_ZTV9IPAddress>:
	...
   d66f0:	58a9 000d 5899 000d 589b 000d               .X...X...X..

000d66fc <_ZTV9USBSerial>:
	...
   d6704:	5981 000d 59d1 000d 59df 000d 565d 000d     .Y...Y...Y..]V..
   d6714:	59bd 000d 5983 000d 5999 000d 59cb 000d     .Y...Y...Y...Y..
   d6724:	59af 000d 597d 000d                         .Y..}Y..

000d672c <_ZTV11USARTSerial>:
	...
   d6734:	5a99 000d 5ae9 000d 5af7 000d 565d 000d     .Z...Z...Z..]V..
   d6744:	5aad 000d 5acf 000d 5abb 000d 5ae3 000d     .Z...Z...Z...Z..
   d6754:	5a9b 000d 5a9f 000d                         .Z...Z..

000d675c <_ZTV7TwoWire>:
	...
   d6764:	5b9d 000d 5be7 000d 5bbf 000d 5b9f 000d     .[...[...[...[..
   d6774:	5bc7 000d 5bcf 000d 5bd7 000d 5bdf 000d     .[...[...[...[..

000d6784 <_ZTVN5spark9MeshClassE>:
	...
   d678c:	5c7f 000d 5c75 000d 5c6b 000d 5c61 000d     .\..u\..k\..a\..
   d679c:	5c55 000d 5c49 000d 5c3d 000d 5c35 000d     U\..I\..=\..5\..
   d67ac:	5c2b 000d 5c21 000d 5e81 000d               +\..!\...^..

000d67b8 <_ZTVN5spark9WiFiClassE>:
	...
   d67c0:	5dfb 000d 5df1 000d 5de7 000d 5d9d 000d     .]...]...]...]..
   d67d0:	5ddb 000d 5dcf 000d 5dc3 000d 5dbb 000d     .]...]...]...]..
   d67e0:	5db1 000d 5da7 000d 5e81 000d               .]...]...^..

000d67ec <_ZTVN5spark12NetworkClassE>:
	...
   d67f4:	5e19 000d 5e23 000d 5e2d 000d 5e37 000d     .^..#^..-^..7^..
   d6804:	5e41 000d 5e4d 000d 5e59 000d 5e65 000d     A^..M^..Y^..e^..
   d6814:	5e6d 000d 5e77 000d 5e81 000d               m^..w^...^..

000d6820 <_ZSt7nothrow>:
   d6820:	0000 0000                                   ....

000d6824 <__sf_fake_stdin>:
	...

000d6844 <__sf_fake_stdout>:
	...

000d6864 <__sf_fake_stderr>:
	...
   d6884:	0043                                        C.

000d6886 <link_const_variable_data_end>:
	...

000d6888 <link_constructors_location>:
   d6888:	000d43d9 	.word	0x000d43d9
   d688c:	000d4c61 	.word	0x000d4c61
   d6890:	000d5115 	.word	0x000d5115
   d6894:	000d5589 	.word	0x000d5589
   d6898:	000d55f1 	.word	0x000d55f1
   d689c:	000d5635 	.word	0x000d5635
   d68a0:	000d5725 	.word	0x000d5725
   d68a4:	000d5735 	.word	0x000d5735
   d68a8:	000d576d 	.word	0x000d576d
   d68ac:	000d5d4d 	.word	0x000d5d4d
   d68b0:	000d5e05 	.word	0x000d5e05
   d68b4:	000d5f4d 	.word	0x000d5f4d
   d68b8:	000d610d 	.word	0x000d610d
   d68bc:	000d6191 	.word	0x000d6191
   d68c0:	000d6255 	.word	0x000d6255
   d68c4:	000d6319 	.word	0x000d6319

000d68c8 <link_constructors_end>:
	...
